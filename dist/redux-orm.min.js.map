{"version":3,"sources":["webpack://ReduxOrm/webpack/universalModuleDefinition","webpack://ReduxOrm/webpack/bootstrap","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/createClass.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/inheritsLoose.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/typeof.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://ReduxOrm/./node_modules/reselect/lib/index.js","webpack://ReduxOrm/./node_modules/re-reselect/dist/index.js","webpack://ReduxOrm/./node_modules/lodash/_baseOrderBy.js","webpack://ReduxOrm/./node_modules/lodash/_baseIteratee.js","webpack://ReduxOrm/./node_modules/lodash/identity.js","webpack://ReduxOrm/./node_modules/lodash/isArray.js","webpack://ReduxOrm/./node_modules/lodash/filter.js","webpack://ReduxOrm/./node_modules/lodash/orderBy.js","webpack://ReduxOrm/./node_modules/lodash/reject.js","webpack://ReduxOrm/./node_modules/lodash/sortBy.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://ReduxOrm/./node_modules/lodash/_arrayMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseSortBy.js","webpack://ReduxOrm/./node_modules/lodash/_baseUnary.js","webpack://ReduxOrm/./node_modules/lodash/_compareMultiple.js","webpack://ReduxOrm/./node_modules/lodash/_compareAscending.js","webpack://ReduxOrm/./node_modules/lodash/isSymbol.js","webpack://ReduxOrm/./node_modules/lodash/_arrayFilter.js","webpack://ReduxOrm/./node_modules/lodash/_baseFilter.js","webpack://ReduxOrm/./node_modules/lodash/negate.js","webpack://ReduxOrm/./node_modules/lodash/_baseFlatten.js","webpack://ReduxOrm/./node_modules/lodash/_baseRest.js","webpack://ReduxOrm/./node_modules/lodash/_overRest.js","webpack://ReduxOrm/./node_modules/lodash/_apply.js","webpack://ReduxOrm/./node_modules/lodash/_setToString.js","webpack://ReduxOrm/./node_modules/lodash/_isIterateeCall.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry1.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_arity.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry2.js","webpack://ReduxOrm/./node_modules/ramda/es/curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/curry.js","webpack://ReduxOrm/./node_modules/ramda/es/__.js","webpack://ReduxOrm/./node_modules/immutable-ops/es/index.js","webpack://ReduxOrm/./src/constants.js","webpack://ReduxOrm/./src/utils.js","webpack://ReduxOrm/./src/QuerySet.js","webpack://ReduxOrm/./src/Session.js","webpack://ReduxOrm/./src/fields/DefaultFieldInstaller.js","webpack://ReduxOrm/./src/fields/FieldInstallerTemplate.js","webpack://ReduxOrm/./src/fields/Field.js","webpack://ReduxOrm/./src/descriptors.js","webpack://ReduxOrm/./src/fields/Attribute.js","webpack://ReduxOrm/./src/fields/RelationalField.js","webpack://ReduxOrm/./src/fields/ForeignKey.js","webpack://ReduxOrm/./src/fields/ManyToMany.js","webpack://ReduxOrm/./src/fields/OneToOne.js","webpack://ReduxOrm/./src/fields/index.js","webpack://ReduxOrm/./src/Model.js","webpack://ReduxOrm/./src/db/Table.js","webpack://ReduxOrm/./src/db/Database.js","webpack://ReduxOrm/./src/selectors/SelectorSpec.js","webpack://ReduxOrm/./src/selectors/ModelBasedSelectorSpec.js","webpack://ReduxOrm/./src/selectors/idArgSelector.js","webpack://ReduxOrm/./src/selectors/MapSelectorSpec.js","webpack://ReduxOrm/./src/selectors/ModelSelectorSpec.js","webpack://ReduxOrm/./src/selectors/FieldSelectorSpec.js","webpack://ReduxOrm/./src/selectors/index.js","webpack://ReduxOrm/./src/ORM.js","webpack://ReduxOrm/./src/memoize.js","webpack://ReduxOrm/./src/redux.js","webpack://ReduxOrm/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","subClass","superClass","constructor","__proto__","_typeof2","obj","iterator","_typeof","arrayWithoutHoles","iterableToArray","nonIterableSpread","arr","defaultEqualityCheck","a","b","areArgumentsShallowlyEqual","equalityCheck","prev","next","defaultMemoize","func","arguments","undefined","lastArgs","lastResult","apply","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptions","_key","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","concat","selector","params","push","resetRecomputations","createStructuredSelector","selectors","selectorCreator","createSelector","objectKeys","keys","_len3","values","_key3","reduce","composition","index","reselect","isStringOrNumber","FlatObjectCache","this","_cache","_proto","set","selectorFn","remove","clear","isValidCacheKey","cacheKey","defaultCacheCreator","defaultCacheKeyValidator","createCachedSelector","polymorphicOptions","legacyOptions","options","assign","keySelector","cache","cacheObject","keySelectorCreator","inputSelectors","cacheResponse","console","warn","getMatchingSelector","removeMatchingSelector","clearCache","validateCacheSize","cacheSize","Number","isInteger","FifoObjectCache","_temp","_cacheOrdering","_cacheSize","earliest","indexOf","splice","LruObjectCache","_registerCacheHit","_deleteCacheHit","FlatMapCache","Map","FifoMapCache","size","LruMapCache","has","FifoCacheObject","FlatCacheObject","LruCacheObject","createStructuredCachedSelector","default","arrayMap","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","collection","iteratees","orders","result","iteratee","other","array","predicate","resIndex","baseOrderBy","guard","arrayFilter","baseFilter","negate","baseFlatten","baseRest","isIterateeCall","sortBy","arr2","iter","toString","from","TypeError","comparer","sort","compareAscending","objCriteria","criteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","FUNC_ERROR_TEXT","args","overRest","setToString","start","nativeMax","Math","max","transform","otherArgs","thisArg","_isPlaceholder","_curry1","fn","f1","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","_curry2","f2","_b","_a","_curryN","received","combined","argsIdx","left","combinedIdx","forOwn","OWNER_ID_TAG","canMutate","ownerID","getBatchToken","prepareNewObject","instance","addOwnerID","forceArray","arg","PATH_SEPARATOR","normalizePath","pathArg","split","mutableSet","mutableMerge","isDeep","_mergeObjs","baseObj","mergeObjs","forEach","mergeObj","assignValue","mutableShallowMerge","mutableDeepMerge","mutableOmit","_keys","shouldMergeKey","immutableMerge","hasChanges","nextObject","willChange","mergeValue","currentValue","recursiveMergeResult","immutableDeepMerge","immutableArrSet","newArr","copied","fastArrayCopy","mutableArrFilter","currIndex","originalIndex","mutableArrSplice","deleteCount","_vals","vals","mutableArrInsert","immutableArrSplice","slice","immutableArrInsert","immutableOperations","merge","deepMerge","omit","keysInObj","filter","newObj","setIn","_pathArg","acc","currRef","valueInPath","pathLen","rootObj","curr","idx","currType","_newObj","pathRepr","insert","isArrayLike","mutableOperations","originalPathArg","done","immutableOps","mutableOps","batchOps","mutable","batch","batched","_token","_fn","token","immutableOpsBoundToToken","__","getImmutableOps","UPDATE","DELETE","CREATE","FILTER","EXCLUDE","SUCCESS","STATE_FLAG","ALL_INSTANCES","ID_ARG_KEY_SELECTOR","state","idArg","warnDeprecated","msg","log","m2mName","declarationModelName","fieldName","string","charAt","toUpperCase","m2mFromFieldName","m2mToFieldName","otherModelName","querySetDelegatorFactory","methodName","getQuerySet","querySetGetterDelegatorFactory","getterName","attachQuerySetMethods","modelClass","querySetClass","leftToDefine","sharedMethods","currClass","Function","getPrototypeOf","forEachSuperClass","cls","defined","getOwnPropertyDescriptor","normalizeEntity","entity","getId","ops","clauseFiltersByAttribute","type","payload","attribute","attributeValue","mapValues","entries","newObject","normalizeModelReference","modelNameOrClass","modelName","QuerySet","clauses","opts","_opts","addSharedMethod","_new","userOpts","_evaluate","rows","id","withId","toRefArray","toModelArray","ModelClass","count","exists","Boolean","at","first","last","all","lookupObj","normalizedLookupObj","filterDescriptor","exclude","excludeDescriptor","session","_evaluated","table","querySpec","query","orderBy","orderByDescriptor","update","applyUpdate","action","delete","model","_onDelete","Session","schema","db","withMutations","batchToken","getEmptyState","initialState","modelData","models","getModelClasses","sessionBoundModels","SessionBoundModel","Reflect","construct","setPrototypeOf","connect","getDataForModel","getModelData","markAccessed","modelIds","data","accessedInstances","markFullTableScanned","fullTableScanned","markAccessedIndexes","indexes","attr","accessedIndexes","updateSpec","tx","_getTransaction","status","_markAccessedByQuery","includes","idAttribute","accessedIds","Set","row","anyClauseFilteredByPk","some","clause","add","getNextState","DefaultFieldInstaller","installForwardsDescriptor","field","createForwardsDescriptor","toModel","throughModel","installForwardsVirtualField","virtualFields","createForwardsVirtualField","installBackwardsDescriptor","backwardsFieldName","toModelName","createBackwardsDescriptor","installBackwardsVirtualField","createBackwardsVirtualField","orm","references","run","installsForwardsDescriptor","installsForwardsVirtualField","installsBackwardsDescriptor","installsBackwardsVirtualField","_toModel","_throughModel","throughModelName","getThroughModelName","getBackwardsFieldName","Field","getClass","forwardsManyToOneDescriptor","declaredToModelName","DeclaredToModel","toId","_fields","manyToManyDescriptor","declaredFromModelName","throughFields","reverse","DeclaredFromModel","ThroughModel","ThisModel","OtherModel","thisReferencingField","to","otherReferencingField","thisId","throughQs","referencedOtherIds","qs","otherModelInstance","entities","idsToAdd","existingQs","through","existingIds","idsToRemove","entitiesToDelete","entitiesToDeleteIds","unexistingIds","Attribute","getDefault","attrDescriptor","RelationalField","relatedName","as","toLowerCase","ForeignKey","declaredFieldName","ManyToMany","getThroughFields","fieldAName","fieldBName","fieldA","fields","throughModelFieldReferencing","otherModel","find","someFieldName","OneToOne","forwardsOneToOneDescriptor","fk","many","oneToOne","getByIdQuery","modelInstance","Model","_initFields","propsObj","ids","_session","QuerySetClass","invalidateClassCache","isSetUp","tableOptions","backend","userProps","m2mRelations","declaredFieldNames","declaredVirtualFieldNames","valuePassed","_refreshMany2Many","upsert","idExists","_findDatabaseRows","equals","keysInA","objectShallowEquals","propertyName","userMergeObj","mergeKey","mergedFields","updatedModel","refreshFromState","ref","relations","normalizedNewIds","uniqueIds","fromField","toField","diffActions","sourceArr","targetArr","itemsInBoth","item","deleteItems","addItems","arrayDiffActions","idsToDelete","relatedQs","hasId","describe","DEFAULT_TABLE_OPTIONS","arrName","mapName","Table","accessId","branch","accessIds","accessIdList","accessList","getMaxId","getMeta","setMaxId","newMaxId","setMeta","nextId","meta","optimallyOrderedClauses","clauseReducesResultSetSize","reducer","remainingPayload","withoutPkAttr","filterAttr","indexAttrs","lastIndex","indexedIds","indexSet","withoutIndexAttrs","reject","convert","order","normalizeOrders","entry","workingState","_currMax","userPassedId","newMax","newId","currMax","idSequencer","finalEntry","indexesToAppendTo","fkAttr","attrIndex","created","nextIndexes","indexMap","indexedAttrs","indexIdsToAdd","indexIdsToDelete","nextMap","prevAttrValues","valueMap","mergeObjInto","nextAttrValues","nextRow","prevValue","nextValue","rowId","valueIndex","attrIndexMap","BASE_EMPTY_STATE","tables","tableName","nextTableState","resultPayload","currTableState","nextDBState","newTableState","replaceTableState","createDatabase","schemaSpec","tableSpecs","tableSpec","SelectorSpec","parent","_parent","_orm","cachePath","ModelBasedSelectorSpec","_model","valueForInstance","idArgSelector","MapSelectorSpec","accessorName","_field","_accessorName","_selector","mapIdAttribute","ModelSelectorSpec","FieldSelectorSpec","fieldModel","isVirtual","_fieldModel","_isVirtual","ParentToModel","parentRef","parentInstance","JSON","stringify","createFieldSelectorSpec","fieldSelectorSpec","relatedFieldName","relatedField","fieldAccessorName","ORM_DEFAULTS","defaultCreateDatabase","RESERVED_TABLE_OPTIONS","isReservedTableOption","word","ORM","registry","implicitThroughModels","installedFields","stateSelector","register","registerManyToManyModelsFor","_setupModelPrototypes","modelSelectorSpec","createModelSelectorSpec","thisModelName","fieldInstance","selfReferencing","fromFieldName","toFieldName","Through","PlainForeignKey","ForeignKeyClass","allModels","found","generateSchemaSpec","spec","getDatabase","mutableSession","_isFieldInstalled","_installField","_setFieldInstalled","FieldInstaller","installerClass","getDefaultState","isOrmState","argsAreEqual","nextArgs","accessedModelInstancesAreEqual","previous","ormState","instances","previousRows","rowsA","rowsB","rowsAreEqual","accessedIndexesAreEqual","column","fullTableScannedModelsAreEqual","fullTableScannedModels","argEqualityCheck","stateAndArgs","argsWithSession","accessedModelInstances","defaultUpdater","createReducer","updater","toORM","selectorCache","SELECTOR_KEY","toSelector","ormSelectors","level","resultArg","inputFuncs","Schema","Backend"],"mappings":"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","file":"redux-orm.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ReduxOrm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxOrm\"] = factory();\n\telse\n\t\troot[\"ReduxOrm\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 33);\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","'use strict';\n\nexports.__esModule = true;\nexports.defaultMemoize = defaultMemoize;\nexports.createSelectorCreator = createSelectorCreator;\nexports.createStructuredSelector = createStructuredSelector;\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nfunction createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = defaultMemoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nvar createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);\n\nfunction createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('reselect')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'reselect'], factory) :\n  (global = global || self, factory(global['Re-reselect'] = {}, global.Reselect));\n}(this, function (exports, reselect) { 'use strict';\n\n  function isStringOrNumber(value) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  var FlatObjectCache =\n  /*#__PURE__*/\n  function () {\n    function FlatObjectCache() {\n      this._cache = {};\n    }\n\n    var _proto = FlatObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n    };\n\n    _proto.get = function get(key) {\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return FlatObjectCache;\n  }();\n\n  var defaultCacheCreator = FlatObjectCache;\n\n  var defaultCacheKeyValidator = function defaultCacheKeyValidator() {\n    return true;\n  };\n\n  function createCachedSelector() {\n    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n      funcs[_key] = arguments[_key];\n    }\n\n    return function (polymorphicOptions, legacyOptions) {\n      // @NOTE Versions 0.x/1.x accepted \"options\" as a function\n      if (typeof legacyOptions === 'function') {\n        throw new Error('[re-reselect] Second argument \"options\" must be an object. Please use \"options.selectorCreator\" to provide a custom selectorCreator.');\n      }\n\n      var options = {};\n\n      if (typeof polymorphicOptions === 'function') {\n        Object.assign(options, legacyOptions, {\n          keySelector: polymorphicOptions\n        }); // @TODO add legacyOptions deprecation notice in next major release\n      } else {\n        Object.assign(options, polymorphicOptions);\n      } // https://github.com/reduxjs/reselect/blob/v4.0.0/src/index.js#L54\n\n\n      var recomputations = 0;\n      var resultFunc = funcs.pop();\n      var dependencies = Array.isArray(funcs[0]) ? funcs[0] : [].concat(funcs);\n\n      var resultFuncWithRecomputations = function resultFuncWithRecomputations() {\n        recomputations++;\n        return resultFunc.apply(void 0, arguments);\n      };\n\n      funcs.push(resultFuncWithRecomputations);\n      var cache = options.cacheObject || new defaultCacheCreator();\n      var selectorCreator = options.selectorCreator || reselect.createSelector;\n      var isValidCacheKey = cache.isValidCacheKey || defaultCacheKeyValidator;\n\n      if (options.keySelectorCreator) {\n        options.keySelector = options.keySelectorCreator({\n          keySelector: options.keySelector,\n          inputSelectors: dependencies,\n          resultFunc: resultFunc\n        });\n      } // Application receives this function\n\n\n      var selector = function selector() {\n        var cacheKey = options.keySelector.apply(options, arguments);\n\n        if (isValidCacheKey(cacheKey)) {\n          var cacheResponse = cache.get(cacheKey);\n\n          if (cacheResponse === undefined) {\n            cacheResponse = selectorCreator.apply(void 0, funcs);\n            cache.set(cacheKey, cacheResponse);\n          }\n\n          return cacheResponse.apply(void 0, arguments);\n        }\n\n        console.warn(\"[re-reselect] Invalid cache key \\\"\" + cacheKey + \"\\\" has been returned by keySelector function.\");\n        return undefined;\n      }; // Further selector methods\n\n\n      selector.getMatchingSelector = function () {\n        var cacheKey = options.keySelector.apply(options, arguments); // @NOTE It might update cache hit count in LRU-like caches\n\n        return cache.get(cacheKey);\n      };\n\n      selector.removeMatchingSelector = function () {\n        var cacheKey = options.keySelector.apply(options, arguments);\n        cache.remove(cacheKey);\n      };\n\n      selector.clearCache = function () {\n        cache.clear();\n      };\n\n      selector.resultFunc = resultFunc;\n      selector.dependencies = dependencies;\n      selector.cache = cache;\n\n      selector.recomputations = function () {\n        return recomputations;\n      };\n\n      selector.resetRecomputations = function () {\n        return recomputations = 0;\n      };\n\n      selector.keySelector = options.keySelector;\n      return selector;\n    };\n  }\n\n  function createStructuredCachedSelector(selectors) {\n    return reselect.createStructuredSelector(selectors, createCachedSelector);\n  }\n\n  function validateCacheSize(cacheSize) {\n    if (cacheSize === undefined) {\n      throw new Error('Missing the required property \"cacheSize\".');\n    }\n\n    if (!Number.isInteger(cacheSize) || cacheSize <= 0) {\n      throw new Error('The \"cacheSize\" property must be a positive integer value.');\n    }\n  }\n\n  var FifoObjectCache =\n  /*#__PURE__*/\n  function () {\n    function FifoObjectCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = {};\n      this._cacheOrdering = [];\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = FifoObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n\n      this._cacheOrdering.push(key);\n\n      if (this._cacheOrdering.length > this._cacheSize) {\n        var earliest = this._cacheOrdering[0];\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      var index = this._cacheOrdering.indexOf(key);\n\n      if (index > -1) {\n        this._cacheOrdering.splice(index, 1);\n      }\n\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n      this._cacheOrdering = [];\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return FifoObjectCache;\n  }();\n\n  var LruObjectCache =\n  /*#__PURE__*/\n  function () {\n    function LruObjectCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = {};\n      this._cacheOrdering = [];\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = LruObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n\n      this._registerCacheHit(key);\n\n      if (this._cacheOrdering.length > this._cacheSize) {\n        var earliest = this._cacheOrdering[0];\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      this._registerCacheHit(key);\n\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      this._deleteCacheHit(key);\n\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n      this._cacheOrdering = [];\n    };\n\n    _proto._registerCacheHit = function _registerCacheHit(key) {\n      this._deleteCacheHit(key);\n\n      this._cacheOrdering.push(key);\n    };\n\n    _proto._deleteCacheHit = function _deleteCacheHit(key) {\n      var index = this._cacheOrdering.indexOf(key);\n\n      if (index > -1) {\n        this._cacheOrdering.splice(index, 1);\n      }\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return LruObjectCache;\n  }();\n\n  var FlatMapCache =\n  /*#__PURE__*/\n  function () {\n    function FlatMapCache() {\n      this._cache = new Map();\n    }\n\n    var _proto = FlatMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n    };\n\n    _proto.get = function get(key) {\n      return this._cache.get(key);\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache[\"delete\"](key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return FlatMapCache;\n  }();\n\n  var FifoMapCache =\n  /*#__PURE__*/\n  function () {\n    function FifoMapCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = new Map();\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = FifoMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n\n      if (this._cache.size > this._cacheSize) {\n        var earliest = this._cache.keys().next().value;\n\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      return this._cache.get(key);\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache[\"delete\"](key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return FifoMapCache;\n  }();\n\n  var LruMapCache =\n  /*#__PURE__*/\n  function () {\n    function LruMapCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = new Map();\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = LruMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n\n      if (this._cache.size > this._cacheSize) {\n        var earliest = this._cache.keys().next().value;\n\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      var value = this._cache.get(key); // Register cache hit\n\n\n      if (this._cache.has(key)) {\n        this.remove(key);\n\n        this._cache.set(key, value);\n      }\n\n      return value;\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache[\"delete\"](key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return LruMapCache;\n  }();\n\n  exports.FifoCacheObject = FifoObjectCache;\n  exports.FifoMapCache = FifoMapCache;\n  exports.FifoObjectCache = FifoObjectCache;\n  exports.FlatCacheObject = FlatObjectCache;\n  exports.FlatMapCache = FlatMapCache;\n  exports.FlatObjectCache = FlatObjectCache;\n  exports.LruCacheObject = LruMapCache;\n  exports.LruMapCache = LruMapCache;\n  exports.LruObjectCache = LruObjectCache;\n  exports.createStructuredCachedSelector = createStructuredCachedSelector;\n  exports.default = createCachedSelector;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=index.js.map\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    negate = require('./negate');\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nmodule.exports = reject;\n","var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nmodule.exports = head;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","export default function _isPlaceholder(a) {\n       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","import _curry1 from './_curry1.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport _curry2 from './internal/_curry2.js';\nimport _curryN from './internal/_curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;","import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default { '@@functional/placeholder': true };","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { curry, __ as placeholder } from 'ramda';\n\nfunction forOwn(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(obj[key], key);\n    }\n  }\n}\n\nfunction isArrayLike(value) {\n  return value && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n}\n\nvar OWNER_ID_TAG = '@@_______immutableOpsOwnerID';\n\nfunction fastArrayCopy(arr) {\n  var copied = new Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    copied[i] = arr[i];\n  }\n\n  return copied;\n}\n\nexport function canMutate(obj, ownerID) {\n  if (!ownerID) return false;\n  return obj[OWNER_ID_TAG] === ownerID;\n}\nvar newOwnerID = typeof Symbol === 'function' ? function () {\n  return Symbol('ownerID');\n} : function () {\n  return {};\n};\nexport var getBatchToken = newOwnerID;\n\nfunction addOwnerID(obj, ownerID) {\n  Object.defineProperty(obj, OWNER_ID_TAG, {\n    value: ownerID,\n    configurable: true,\n    enumerable: false\n  });\n  return obj;\n}\n\nfunction prepareNewObject(instance, ownerID) {\n  if (ownerID) {\n    addOwnerID(instance, ownerID);\n  }\n\n  return instance;\n}\n\nfunction forceArray(arg) {\n  if (!(arg instanceof Array)) {\n    return [arg];\n  }\n\n  return arg;\n}\n\nvar PATH_SEPARATOR = '.';\n\nfunction normalizePath(pathArg) {\n  if (typeof pathArg === 'string') {\n    if (pathArg.indexOf(PATH_SEPARATOR) === -1) {\n      return [pathArg];\n    }\n\n    return pathArg.split(PATH_SEPARATOR);\n  }\n\n  return pathArg;\n}\n\nfunction mutableSet(key, value, obj) {\n  obj[key] = value;\n  return obj;\n}\n\nfunction mutableSetIn(_pathArg, value, obj) {\n  var originalPathArg = normalizePath(_pathArg);\n  var pathLen = originalPathArg.length;\n  var done = false;\n  var idx = 0;\n  var acc = obj;\n  var curr = originalPathArg[idx];\n\n  while (!done) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      done = true;\n    } else {\n      var currType = _typeof(acc[curr]);\n\n      if (currType === 'undefined') {\n        var newObj = {};\n        prepareNewObject(newObj, null);\n        acc[curr] = newObj;\n      } else if (currType !== 'object') {\n        var pathRepr = \"\".concat(originalPathArg[idx - 1], \".\").concat(curr);\n        throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n      }\n\n      acc = acc[curr];\n      idx++;\n      curr = originalPathArg[idx];\n    }\n  }\n\n  return obj;\n}\n\nfunction valueInPath(_pathArg, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var acc = obj;\n\n  for (var i = 0; i < pathArg.length; i++) {\n    var curr = pathArg[i];\n    var currRef = acc[curr];\n\n    if (i === pathArg.length - 1) {\n      return currRef;\n    }\n\n    if (_typeof(currRef) === 'object') {\n      acc = currRef;\n    } else {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}\n\nfunction immutableSetIn(ownerID, _pathArg, value, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var currentValue = valueInPath(pathArg, obj);\n  if (value === currentValue) return obj;\n  var pathLen = pathArg.length;\n  var acc;\n\n  if (canMutate(obj, ownerID)) {\n    acc = obj;\n  } else {\n    acc = Object.assign(prepareNewObject({}, ownerID), obj);\n  }\n\n  var rootObj = acc;\n  pathArg.forEach(function (curr, idx) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      return;\n    }\n\n    var currRef = acc[curr];\n\n    var currType = _typeof(currRef);\n\n    if (currType === 'object') {\n      if (canMutate(currRef, ownerID)) {\n        acc = currRef;\n      } else {\n        var newObj = prepareNewObject({}, ownerID);\n        acc[curr] = Object.assign(newObj, currRef);\n        acc = newObj;\n      }\n\n      return;\n    }\n\n    if (currType === 'undefined') {\n      var _newObj = prepareNewObject({}, ownerID);\n\n      acc[curr] = _newObj;\n      acc = _newObj;\n      return;\n    }\n\n    var pathRepr = \"\".concat(pathArg[idx - 1], \".\").concat(curr);\n    throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n  });\n  return rootObj;\n}\n\nfunction mutableMerge(isDeep, _mergeObjs, baseObj) {\n  var mergeObjs = forceArray(_mergeObjs);\n\n  if (isDeep) {\n    mergeObjs.forEach(function (mergeObj) {\n      forOwn(mergeObj, function (value, key) {\n        if (isDeep && baseObj.hasOwnProperty(key)) {\n          var assignValue;\n\n          if (_typeof(value) === 'object') {\n            assignValue = mutableMerge(isDeep, [value], baseObj[key]);\n          } else {\n            assignValue = value;\n          }\n\n          baseObj[key] = assignValue;\n        } else {\n          baseObj[key] = value;\n        }\n      });\n    });\n  } else {\n    Object.assign.apply(Object, [baseObj].concat(_toConsumableArray(mergeObjs)));\n  }\n\n  return baseObj;\n}\n\nvar mutableShallowMerge = mutableMerge.bind(null, false);\nvar mutableDeepMerge = mutableMerge.bind(null, true);\n\nfunction mutableOmit(_keys, obj) {\n  var keys = forceArray(_keys);\n  keys.forEach(function (key) {\n    delete obj[key];\n  });\n  return obj;\n}\n\nfunction shouldMergeKey(obj, other, key) {\n  return obj[key] !== other[key];\n}\n\nfunction immutableMerge(isDeep, ownerID, _mergeObjs, obj) {\n  if (canMutate(obj, ownerID)) return mutableMerge(isDeep, _mergeObjs, obj);\n  var mergeObjs = forceArray(_mergeObjs);\n  var hasChanges = false;\n  var nextObject = obj;\n\n  var willChange = function willChange() {\n    if (!hasChanges) {\n      hasChanges = true;\n      nextObject = Object.assign({}, obj);\n      prepareNewObject(nextObject, ownerID);\n    }\n  };\n\n  mergeObjs.forEach(function (mergeObj) {\n    forOwn(mergeObj, function (mergeValue, key) {\n      if (isDeep && obj.hasOwnProperty(key)) {\n        var currentValue = nextObject[key];\n\n        if (_typeof(mergeValue) === 'object' && !(mergeValue instanceof Array)) {\n          if (shouldMergeKey(nextObject, mergeObj, key)) {\n            var recursiveMergeResult = immutableMerge(isDeep, ownerID, mergeValue, currentValue);\n\n            if (recursiveMergeResult !== currentValue) {\n              willChange();\n              nextObject[key] = recursiveMergeResult;\n            }\n          }\n\n          return true; // continue forOwn\n        }\n      }\n\n      if (shouldMergeKey(nextObject, mergeObj, key)) {\n        willChange();\n        nextObject[key] = mergeValue;\n      }\n\n      return undefined;\n    });\n  });\n  return nextObject;\n}\n\nvar immutableDeepMerge = immutableMerge.bind(null, true);\nvar immutableShallowMerge = immutableMerge.bind(null, false);\n\nfunction immutableArrSet(ownerID, index, value, arr) {\n  if (canMutate(arr, ownerID)) return mutableSet(index, value, arr);\n  if (arr[index] === value) return arr;\n  var newArr = fastArrayCopy(arr);\n  newArr[index] = value;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nfunction immutableSet(ownerID, key, value, obj) {\n  if (isArrayLike(obj)) return immutableArrSet(ownerID, key, value, obj);\n  if (canMutate(obj, ownerID)) return mutableSet(key, value, obj);\n  if (obj[key] === value) return obj;\n  var newObj = Object.assign({}, obj);\n  prepareNewObject(newObj, ownerID);\n  newObj[key] = value;\n  return newObj;\n}\n\nfunction immutableOmit(ownerID, _keys, obj) {\n  if (canMutate(obj, ownerID)) return mutableOmit(_keys, obj);\n  var keys = forceArray(_keys);\n  var keysInObj = keys.filter(function (key) {\n    return obj.hasOwnProperty(key);\n  }); // None of the keys were in the object, so we can return `obj`.\n\n  if (keysInObj.length === 0) return obj;\n  var newObj = Object.assign({}, obj);\n  keysInObj.forEach(function (key) {\n    delete newObj[key];\n  });\n  prepareNewObject(newObj, ownerID);\n  return newObj;\n}\n\nfunction mutableArrPush(_vals, arr) {\n  var vals = forceArray(_vals);\n  arr.push.apply(arr, _toConsumableArray(vals));\n  return arr;\n}\n\nfunction mutableArrFilter(func, arr) {\n  var currIndex = 0;\n  var originalIndex = 0;\n\n  while (currIndex < arr.length) {\n    var item = arr[currIndex];\n\n    if (!func(item, originalIndex)) {\n      arr.splice(currIndex, 1);\n    } else {\n      currIndex++;\n    }\n\n    originalIndex++;\n  }\n\n  return arr;\n}\n\nfunction mutableArrSplice(index, deleteCount, _vals, arr) {\n  var vals = forceArray(_vals);\n  arr.splice.apply(arr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return arr;\n}\n\nfunction mutableArrInsert(index, _vals, arr) {\n  return mutableArrSplice(index, 0, _vals, arr);\n}\n\nfunction immutableArrSplice(ownerID, index, deleteCount, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrSplice(index, deleteCount, _vals, arr);\n  var vals = forceArray(_vals);\n  var newArr = arr.slice();\n  prepareNewObject(newArr, ownerID);\n  newArr.splice.apply(newArr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return newArr;\n}\n\nfunction immutableArrInsert(ownerID, index, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrInsert(index, _vals, arr);\n  return immutableArrSplice(ownerID, index, 0, _vals, arr);\n}\n\nfunction immutableArrPush(ownerID, vals, arr) {\n  return immutableArrInsert(ownerID, arr.length, vals, arr);\n}\n\nfunction immutableArrFilter(ownerID, func, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrFilter(func, arr);\n  var newArr = arr.filter(func);\n  if (newArr.length === arr.length) return arr;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nvar immutableOperations = {\n  // object operations\n  merge: immutableShallowMerge,\n  deepMerge: immutableDeepMerge,\n  omit: immutableOmit,\n  setIn: immutableSetIn,\n  // array operations\n  insert: immutableArrInsert,\n  push: immutableArrPush,\n  filter: immutableArrFilter,\n  splice: immutableArrSplice,\n  // both\n  set: immutableSet\n};\nvar mutableOperations = {\n  // object operations\n  merge: mutableShallowMerge,\n  deepMerge: mutableDeepMerge,\n  omit: mutableOmit,\n  setIn: mutableSetIn,\n  // array operations\n  insert: mutableArrInsert,\n  push: mutableArrPush,\n  filter: mutableArrFilter,\n  splice: mutableArrSplice,\n  // both\n  set: mutableSet\n};\nexport function getImmutableOps() {\n  var immutableOps = Object.assign({}, immutableOperations);\n  forOwn(immutableOps, function (value, key) {\n    immutableOps[key] = curry(value.bind(null, null));\n  });\n  var mutableOps = Object.assign({}, mutableOperations);\n  forOwn(mutableOps, function (value, key) {\n    mutableOps[key] = curry(value);\n  });\n  var batchOps = Object.assign({}, immutableOperations);\n  forOwn(batchOps, function (value, key) {\n    batchOps[key] = curry(value);\n  });\n\n  function batched(_token, _fn) {\n    var token;\n    var fn;\n\n    if (typeof _token === 'function') {\n      fn = _token;\n      token = getBatchToken();\n    } else {\n      token = _token;\n      fn = _fn;\n    }\n\n    var immutableOpsBoundToToken = Object.assign({}, immutableOperations);\n    forOwn(immutableOpsBoundToToken, function (value, key) {\n      immutableOpsBoundToToken[key] = curry(value.bind(null, token));\n    });\n    return fn(immutableOpsBoundToToken);\n  }\n\n  return Object.assign(immutableOps, {\n    mutable: mutableOps,\n    batch: batchOps,\n    batched: batched,\n    __: placeholder,\n    getBatchToken: getBatchToken\n  });\n}\nexport var ops = getImmutableOps();\nexport default ops;","export const UPDATE = 'REDUX_ORM_UPDATE';\nexport const DELETE = 'REDUX_ORM_DELETE';\nexport const CREATE = 'REDUX_ORM_CREATE';\n\nexport const FILTER = 'REDUX_ORM_FILTER';\nexport const EXCLUDE = 'REDUX_ORM_EXCLUDE';\nexport const ORDER_BY = 'REDUX_ORM_ORDER_BY';\n\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';\n\nexport const STATE_FLAG = Symbol('REDUX_ORM_STATE_FLAG');\n\nexport const ALL_INSTANCES = Symbol('REDUX_ORM_ALL_INSTANCES');\n\nexport const ID_ARG_KEY_SELECTOR = (state, idArg) => (\n    (typeof idArg === 'undefined') ? ALL_INSTANCES : idArg\n);\n","import ops from 'immutable-ops';\nimport { FILTER, EXCLUDE } from './constants';\n\n/**\n * @module utils\n * @private\n */\n\n/** @private */\nfunction warnDeprecated(msg) {\n    const logger = typeof console.warn === 'function'\n        ? console.warn.bind(console)\n        : console.log.bind(console);\n    return logger(msg);\n}\n\n/** @private */\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\nfunction m2mName(declarationModelName, fieldName) {\n    return declarationModelName + capitalize(fieldName);\n}\n\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\nfunction m2mFromFieldName(declarationModelName) {\n    return `from${declarationModelName}Id`;\n}\n\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\nfunction m2mToFieldName(otherModelName) {\n    return `to${otherModelName}Id`;\n}\n\n/** */\nfunction reverseFieldName(modelName) {\n    return modelName.toLowerCase() + 'Set'; // eslint-disable-line prefer-template\n}\n\n/** @private */\nfunction querySetDelegatorFactory(methodName) {\n    return function querySetDelegator(...args) {\n        return this.getQuerySet()[methodName](...args);\n    };\n}\n\n/** @private */\nfunction querySetGetterDelegatorFactory(getterName) {\n    return function querySetGetterDelegator() {\n        const qs = this.getQuerySet();\n        return qs[getterName];\n    };\n}\n\n/** @private */\nfunction forEachSuperClass(subClass, func) {\n    let currClass = subClass;\n    while (currClass !== Function.prototype) {\n        func(currClass);\n        currClass = Object.getPrototypeOf(currClass);\n    }\n}\n\n/** */\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n    const leftToDefine = querySetClass.sharedMethods.slice();\n\n    // There is no way to get a property descriptor for the whole prototype chain;\n    // only from an objects own properties. Therefore we traverse the whole prototype\n    // chain for querySet.\n    forEachSuperClass(querySetClass, (cls) => {\n        for (let i = 0; i < leftToDefine.length; i++) {\n            let defined = false;\n            const methodName = leftToDefine[i];\n            const descriptor = Object.getOwnPropertyDescriptor(cls.prototype, methodName);\n            if (typeof descriptor !== 'undefined') {\n                if (typeof descriptor.get !== 'undefined') {\n                    descriptor.get = querySetGetterDelegatorFactory(methodName);\n                    Object.defineProperty(modelClass, methodName, descriptor);\n                    defined = true;\n                } else if (typeof descriptor.value === 'function') {\n                    modelClass[methodName] = querySetDelegatorFactory(methodName);\n                    defined = true;\n                }\n            }\n            if (defined) {\n                leftToDefine.splice(i--, 1);\n            }\n        }\n    });\n}\n\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\nfunction normalizeEntity(entity) {\n    if (entity !== null &&\n            typeof entity !== 'undefined' &&\n            typeof entity.getId === 'function') {\n        return entity.getId();\n    }\n    return entity;\n}\n\n/** */\nfunction reverseFieldErrorMessage(modelName, fieldName, toModelName, backwardsFieldName) {\n    return [\n        `Reverse field ${backwardsFieldName} already defined`,\n        ` on model ${toModelName}. To fix, set a custom related`,\n        ` name on ${modelName}.${fieldName}.`,\n    ].join('');\n}\n\n/** */\nfunction objectShallowEquals(a, b) {\n    let keysInA = 0;\n\n    // eslint-disable-next-line consistent-return\n    Object.entries(Object(a)).forEach(([key, value]) => {\n        if (!b.hasOwnProperty(key) || b[key] !== value) {\n            return false;\n        }\n        keysInA++;\n    });\n\n    return keysInA === Object.keys(b).length;\n}\n\n/** */\nfunction arrayDiffActions(sourceArr, targetArr) {\n    const itemsInBoth = sourceArr.filter((item) => targetArr.includes(item));\n    const deleteItems = sourceArr.filter((item) => !itemsInBoth.includes(item));\n    const addItems = targetArr.filter((item) => !itemsInBoth.includes(item));\n\n    if (deleteItems.length || addItems.length) {\n        return {\n            delete: deleteItems,\n            add: addItems,\n        };\n    }\n    return null;\n}\n\nconst { getBatchToken } = ops;\n\n/**\n * @return boolean\n */\nfunction clauseFiltersByAttribute({ type, payload }, attribute) {\n    if (type !== FILTER) return false;\n\n    if (typeof payload !== 'object') {\n        /**\n         * payload could also be a function in which case\n         * we would have no way of knowing what it does,\n         * so we default to false for non-objects\n         */\n        return false;\n    }\n\n    if (!payload.hasOwnProperty(attribute)) return false;\n    const attributeValue = payload[attribute];\n    if (attributeValue === null) return false;\n    if (attributeValue === undefined) return false;\n\n    return true;\n}\n\n/**\n * @return boolean\n */\nfunction clauseReducesResultSetSize({ type }) {\n    return [FILTER, EXCLUDE].includes(type);\n}\n\n/**\n * @param {Object} object\n * @return Object\n */\nfunction mapValues(object, func) {\n    return Object.entries(object)\n        .reduce((newObject, [key, value]) => {\n            newObject[key] = func(value);\n            return newObject;\n        }, {});\n}\n\n/** */\nfunction normalizeModelReference(modelNameOrClass) {\n    if (!modelNameOrClass || typeof modelNameOrClass === 'string') {\n        return modelNameOrClass;\n    }\n    return modelNameOrClass.modelName;\n}\n\nexport {\n    attachQuerySetMethods,\n    m2mName,\n    m2mFromFieldName,\n    m2mToFieldName,\n    reverseFieldName,\n    normalizeEntity,\n    reverseFieldErrorMessage,\n    objectShallowEquals,\n    ops,\n    arrayDiffActions,\n    getBatchToken,\n    clauseFiltersByAttribute,\n    clauseReducesResultSetSize,\n    warnDeprecated,\n    mapValues,\n    normalizeModelReference,\n};\n","import {\n    normalizeEntity,\n    warnDeprecated,\n    mapValues,\n} from './utils';\n\nimport {\n    UPDATE,\n    DELETE,\n    FILTER,\n    EXCLUDE,\n    ORDER_BY,\n} from './constants';\n\n/**\n * This class is used to build and make queries to the database\n * and operating the resulting set (such as updating attributes\n * or deleting the records).\n *\n * The queries are built lazily. For example:\n *\n * ```javascript\n * const qs = Book.all()\n *     .filter(book => book.releaseYear > 1999)\n *     .orderBy('name');\n * ```\n *\n * Doesn't execute a query. The query is executed only when\n * you need information from the query result, such as {@link QuerySet#count},\n * {@link QuerySet#toRefArray}. After the query is executed, the resulting\n * set is cached in the QuerySet instance.\n *\n * QuerySet instances also return copies, so chaining filters doesn't\n * mutate the previous instances.\n */\nconst QuerySet = class QuerySet {\n    /**\n     * Creates a QuerySet. The constructor is mainly for internal use;\n     * You should access QuerySet instances from {@link Model}.\n     *\n     * @param  {Model} modelClass - the model class of objects in this QuerySet.\n     * @param  {any[]} clauses - query clauses needed to evaluate the set.\n     * @param {Object} [opts] - additional options\n     */\n    constructor(modelClass, clauses, opts) {\n        Object.assign(this, {\n            modelClass,\n            clauses: clauses || [],\n        });\n\n        this._opts = opts;\n    }\n\n    static addSharedMethod(methodName) {\n        this.sharedMethods = this.sharedMethods.concat(methodName);\n    }\n\n    _new(clauses, userOpts) {\n        const opts = { ...this._opts, ...userOpts };\n        return new this.constructor(this.modelClass, clauses, opts);\n    }\n\n    toString() {\n        this._evaluate();\n        const contents = this.rows.map(({ id }) => this.modelClass.withId(id).toString()\n        ).join('\\n    - ');\n        return `QuerySet contents:\\n    - ${contents}`;\n    }\n\n    /**\n     * Returns an array of the plain objects represented by the QuerySet.\n     * The plain objects are direct references to the store.\n     *\n     * @return {Object[]} references to the plain JS objects represented by\n     *                    the QuerySet\n     */\n    toRefArray() {\n        return this._evaluate();\n    }\n\n    /**\n     * Returns an array of {@link Model} instances represented by the QuerySet.\n     * @return {Model[]} model instances represented by the QuerySet\n     */\n    toModelArray() {\n        const { modelClass: ModelClass } = this;\n        return this._evaluate().map(\n            (props) => new ModelClass(props)\n        );\n    }\n\n    /**\n     * Returns the number of {@link Model} instances represented by the QuerySet.\n     *\n     * @return {number} length of the QuerySet\n     */\n    count() {\n        this._evaluate();\n        return this.rows.length;\n    }\n\n    /**\n     * Checks if the {@link QuerySet} instance has any records matching the query\n     * in the database.\n     *\n     * @return {Boolean} `true` if the {@link QuerySet} instance contains entities, else `false`.\n     */\n    exists() {\n        return Boolean(this.count());\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `index` in the {@link QuerySet} instance if\n     * `withRefs` flag is set to `false`, or a reference to the plain JavaScript\n     * object in the model state if `true`.\n     *\n     * @param  {number} index - index of the model instance to get\n     * @return {Model|undefined} a {@link Model} instance at index\n     *                           `index` in the {@link QuerySet} instance,\n     *                           or undefined if the index is out of bounds.\n     */\n    at(index) {\n        const { modelClass: ModelClass } = this;\n\n        const rows = this._evaluate();\n        if (index >= 0 && index < rows.length) {\n            return new ModelClass(rows[index]);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns the {@link Model} instance at index 0 in the {@link QuerySet} instance.\n     * @return {Model}\n     */\n    first() {\n        return this.at(0);\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `QuerySet.count() - 1`\n     * @return {Model}\n     */\n    last() {\n        const rows = this._evaluate();\n        return this.at(rows.length - 1);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with the same entities.\n     * @return {QuerySet} a new QuerySet with the same entities.\n     */\n    all() {\n        return this._new(this.clauses);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that match properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to match objects with. Can also be a function.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that passed the filter.\n     */\n    filter(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n\n        const filterDescriptor = {\n            type: FILTER,\n            payload: normalizedLookupObj,\n        };\n        /**\n         * create a new QuerySet\n         * including only rows matching the lookupObj\n         */\n        return this._new(\n            this.clauses.concat(filterDescriptor)\n        );\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that do not match\n     * properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to unmatch objects with. Can also be a function.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that did not pass the filter.\n     */\n    exclude(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n        const excludeDescriptor = {\n            type: EXCLUDE,\n            payload: normalizedLookupObj,\n        };\n\n        /**\n         * create a new QuerySet\n         * excluding all rows matching the lookupObj\n         */\n        return this._new(\n            this.clauses.concat(excludeDescriptor)\n        );\n    }\n\n    /**\n     * Performs the actual database query.\n     * @private\n     * @return {Array} rows corresponding to the QuerySet's clauses\n     */\n    _evaluate() {\n        if (typeof this.modelClass.session === 'undefined') {\n            throw new Error([\n                `Tried to query the ${this.modelClass.modelName} model's table without a session. `,\n                'Create a session using `session = orm.session()` and use ',\n                `\\`session[\"${this.modelClass.modelName}\"]\\` for querying instead.`,\n            ].join(''));\n        }\n        if (!this._evaluated) {\n            const {\n                session,\n                modelName: table,\n            } = this.modelClass;\n            const querySpec = {\n                table,\n                clauses: this.clauses,\n            };\n            this.rows = session.query(querySpec).rows;\n            this._evaluated = true;\n        }\n        return this.rows;\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities ordered by `iteratees` in ascending\n     * order, unless otherwise specified. Delegates to `lodash.orderBy`.\n     *\n     * @param  {string[]|Function[]} iteratees - an array where each item can be a string or a\n     *                                           function. If a string is supplied, it should\n     *                                           correspond to property on the entity that will\n     *                                           determine the order. If a function is supplied,\n     *                                           it should return the value to order by.\n     * @param {Boolean[]} [orders] - the sort orders of `iteratees`. If unspecified, all iteratees\n     *                               will be sorted in ascending order. `true` and `'asc'`\n     *                               correspond to ascending order, and `false` and `'desc`\n     *                               to descending order.\n     * @return {QuerySet} a new {@link QuerySet} with objects ordered by `iteratees`.\n     */\n    orderBy(iteratees, orders) {\n        const orderByDescriptor = {\n            type: ORDER_BY,\n            payload: [iteratees, orders],\n        };\n\n        /**\n         * create a new QuerySet\n         * sorting all rows according to the passed arguments\n         */\n        return this._new(\n            this.clauses.concat(orderByDescriptor)\n        );\n    }\n\n    /**\n     * Records an update specified with `mergeObj` to all the objects\n     * in the {@link QuerySet} instance.\n     *\n     * @param  {Object} mergeObj - an object to merge with all the objects in this\n     *                             queryset.\n     * @return {undefined}\n     */\n    update(mergeObj) {\n        const {\n            session,\n            modelName: table,\n        } = this.modelClass;\n\n        session.applyUpdate({\n            action: UPDATE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n            payload: mergeObj,\n        });\n\n        this._evaluated = false;\n    }\n\n    /**\n     * Records a deletion of all the objects in this {@link QuerySet} instance.\n     * @return {undefined}\n     */\n    delete() {\n        const {\n            session,\n            modelName: table,\n        } = this.modelClass;\n\n        this.toModelArray().forEach(\n            (model) => model._onDelete() // eslint-disable-line no-underscore-dangle\n        );\n\n        session.applyUpdate({\n            action: DELETE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n        });\n\n        this._evaluated = false;\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated\n     * Use {@link QuerySet#toModelArray} or predicate functions that\n     * instantiate Models from refs, e.g. `new Model(ref)`.\n     */\n    get withModels() {\n        throw new Error(\n            '`QuerySet.prototype.withModels` has been removed. ' +\n            'Use `.toModelArray()` or predicate functions that ' +\n            'instantiate Models from refs, e.g. `new Model(ref)`.'\n        );\n    }\n\n    /**\n     * @deprecated Query building operates on refs only now.\n     */\n    get withRefs() {\n        warnDeprecated(\n            '`QuerySet.prototype.withRefs` has been deprecated. ' +\n            'Query building operates on refs only now.'\n        );\n        return undefined;\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to map.\n     */\n    map() {\n        throw new Error(\n            '`QuerySet.prototype.map` has been removed. ' +\n            'Call `.toModelArray()` or `.toRefArray()` first to map.'\n        );\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to iterate.\n     */\n    forEach() {\n        throw new Error(\n            '`QuerySet.prototype.forEach` has been removed. ' +\n            'Call `.toModelArray()` or `.toRefArray()` first to iterate.'\n        );\n    }\n};\n\nQuerySet.sharedMethods = [\n    'count',\n    'at',\n    'all',\n    'last',\n    'first',\n    'filter',\n    'exclude',\n    'orderBy',\n    'update',\n    'delete',\n];\n\nexport default QuerySet;\n","import { getBatchToken } from 'immutable-ops';\n\nimport { SUCCESS, UPDATE, DELETE } from './constants';\nimport { warnDeprecated, clauseFiltersByAttribute } from './utils';\n\nconst Session = class Session {\n    /**\n     * Creates a new Session.\n     *\n     * @param  {Database} db - a {@link Database} instance\n     * @param  {Object} state - the database state\n     * @param  {Boolean} [withMutations] - whether the session should mutate data\n     * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n     *                                 mutated.\n     */\n    constructor(schema, db, state, withMutations, batchToken) {\n        this.schema = schema;\n        this.db = db;\n        this.state = state || db.getEmptyState();\n        this.initialState = this.state;\n\n        this.withMutations = Boolean(withMutations);\n        this.batchToken = batchToken || getBatchToken();\n\n        this.modelData = {};\n\n        this.models = schema.getModelClasses();\n\n        this.sessionBoundModels = this.models.map((modelClass) => {\n            function SessionBoundModel() {\n                return Reflect.construct(modelClass, arguments, SessionBoundModel); // eslint-disable-line prefer-rest-params\n            }\n            Reflect.setPrototypeOf(SessionBoundModel.prototype, modelClass.prototype);\n            Reflect.setPrototypeOf(SessionBoundModel, modelClass);\n\n            Object.defineProperty(this, modelClass.modelName, {\n                get: () => SessionBoundModel,\n            });\n\n            SessionBoundModel.connect(this);\n            return SessionBoundModel;\n        });\n    }\n\n    getDataForModel(modelName) {\n        if (!this.modelData[modelName]) {\n            this.modelData[modelName] = {};\n        }\n        return this.modelData[modelName];\n    }\n\n    getModelData() {\n        return this.modelData;\n    }\n\n    markAccessed(modelName, modelIds) {\n        const data = this.getDataForModel(modelName);\n        if (!data.accessedInstances) {\n            data.accessedInstances = {};\n        }\n        modelIds.forEach((id) => {\n            data.accessedInstances[id] = true;\n        });\n    }\n\n    get accessedModelInstances() {\n        return Object.entries(this.getModelData()).reduce((result, [key, value]) => {\n            if (value.accessedInstances) {\n                result[key] = value.accessedInstances;\n            }\n            return result;\n        }, {});\n    }\n\n    markFullTableScanned(modelName) {\n        const data = this.getDataForModel(modelName);\n        data.fullTableScanned = true;\n    }\n\n    get fullTableScannedModels() {\n        return Object.entries(this.getModelData()).reduce((result, [key, value]) => {\n            if (value.fullTableScanned) {\n                result.push(key);\n            }\n            return result;\n        }, []);\n    }\n\n    markAccessedIndexes(indexes) {\n        indexes.forEach(([table, attr, value]) => {\n            const data = this.getDataForModel(table);\n            if (!data.accessedIndexes) {\n                data.accessedIndexes = {};\n            }\n            data.accessedIndexes[attr] = [\n                ...(data.accessedIndexes[attr] || []),\n                value,\n            ];\n        });\n    }\n\n    get accessedIndexes() {\n        return Object.entries(this.getModelData()).reduce((result, [key, value]) => {\n            if (value.accessedIndexes) {\n                result[key] = value.accessedIndexes;\n            }\n            return result;\n        }, {});\n    }\n\n    /**\n     * Applies update to a model state.\n     *\n     * @private\n     * @param {Object} update - the update object. Must have keys\n     *                          `type`, `payload`.\n     */\n    applyUpdate(updateSpec) {\n        const tx = this._getTransaction(updateSpec);\n        const result = this.db.update(updateSpec, tx, this.state);\n        const { status, state, payload } = result;\n\n        if (status !== SUCCESS) {\n            throw new Error(`Applying update failed with status ${status}. Payload: ${payload}`);\n        }\n\n        this.state = state;\n\n        return payload;\n    }\n\n    query(querySpec) {\n        const result = this.db.query(querySpec, this.state);\n\n        this._markAccessedByQuery(querySpec, result);\n\n        return result;\n    }\n\n    _getTransaction(updateSpec) {\n        const { withMutations } = this;\n        const { action } = updateSpec;\n        let { batchToken } = this;\n        if ([UPDATE, DELETE].includes(action)) {\n            batchToken = getBatchToken();\n        }\n        return { batchToken, withMutations };\n    }\n\n    _markAccessedByQuery(querySpec, result) {\n        const { table, clauses } = querySpec;\n        const { rows } = result;\n\n        const { idAttribute } = this[table];\n        const accessedIds = new Set(rows.map(\n            (row) => row[idAttribute]\n        ));\n\n        const anyClauseFilteredByPk = clauses.some((clause) => {\n            if (!clauseFiltersByAttribute(clause, idAttribute)) {\n                return false;\n            }\n            const id = clause.payload[idAttribute];\n            if (id === null) return false;\n            /**\n             * We previously knew which row we wanted to access,\n             * so there was no need to scan the entire table.\n             */\n            accessedIds.add(id);\n            return true;\n        });\n\n        const accessedIndexes = [];\n        const { indexes } = this.state[table];\n        clauses.forEach((clause) => {\n            Object.keys(indexes).forEach((attr) => {\n                if (!clauseFiltersByAttribute(clause, attr)) return;\n                const value = clause.payload[attr];\n                accessedIndexes.push([table, attr, value]);\n            });\n        });\n\n        if (anyClauseFilteredByPk) {\n            /**\n             * The clauses have been ordered so that an indexed one was\n             * the first to have been evaluated, and thus only the row\n             * with the specified PK value has actually been accessed.\n             */\n            this.markAccessed(table, accessedIds);\n        } else if (accessedIndexes.length) {\n            /**\n             * At least one clause was optimized using indexes.\n             */\n            this.markAccessed(table, accessedIds);\n            this.markAccessedIndexes(accessedIndexes);\n        } else {\n            /**\n             * At least one clause could not be efficiently optimized\n             * or no clause was specified at all.\n             */\n            this.markFullTableScanned(table);\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Access {@link Session#state} instead.\n     */\n    getNextState() {\n        warnDeprecated(\n            '`Session.prototype.getNextState` has been deprecated. Access ' +\n            'the `Session.prototype.state` property instead.'\n        );\n        return this.state;\n    }\n\n    /**\n     * @deprecated\n     * The Redux integration API is now decoupled from ORM and Session.<br>\n     * See the 0.9 migration guide in the GitHub repo.\n     */\n    reduce() {\n        throw new Error(\n            '`Session.prototype.reduce` has been removed. The Redux integration API ' +\n            'is now decoupled from ORM and Session - see the 0.9 migration guide ' +\n            'in the GitHub repo.'\n        );\n    }\n};\n\nexport default Session;\n","import FieldInstallerTemplate from './FieldInstallerTemplate';\n\nimport {\n    reverseFieldErrorMessage,\n} from '../utils';\n\n/**\n * Default implementation for the template method in FieldInstallerTemplate.\n * @private\n */\nexport class DefaultFieldInstaller extends FieldInstallerTemplate {\n    installForwardsDescriptor() {\n        Object.defineProperty(\n            this.model.prototype,\n            this.fieldName,\n            this.field.createForwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installForwardsVirtualField() {\n        this.model.virtualFields[this.fieldName] = this.field.createForwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n\n    installBackwardsDescriptor() {\n        const backwardsDescriptor = Object.getOwnPropertyDescriptor(\n            this.toModel.prototype,\n            this.backwardsFieldName\n        );\n        if (backwardsDescriptor) {\n            throw new Error(reverseFieldErrorMessage(\n                this.model.modelName,\n                this.fieldName,\n                this.toModel.modelName,\n                this.backwardsFieldName\n            ));\n        }\n\n        // install backwards descriptor\n        Object.defineProperty(\n            this.toModel.prototype,\n            this.backwardsFieldName,\n            this.field.createBackwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installBackwardsVirtualField() {\n        this.toModel.virtualFields[this.backwardsFieldName] = this.field.createBackwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n}\n\nexport default DefaultFieldInstaller;\n","/**\n * Defines algorithm for installing a field onto a model and related models.\n * Conforms to the template method behavioral design pattern.\n * @private\n */\nexport class FieldInstallerTemplate {\n    constructor(opts) {\n        this.field = opts.field;\n        this.fieldName = opts.fieldName;\n        this.model = opts.model;\n        this.orm = opts.orm;\n        /**\n         * the field itself has no knowledge of the model\n         * it is being installed upon; we need to inform it\n         * that it is a self-referencing field for the field\n         * to be able to make better informed decisions\n         */\n        if (this.field.references(this.model)) {\n            this.field.toModelName = 'this';\n        }\n    }\n\n    get toModel() {\n        if (typeof this._toModel === 'undefined') {\n            const { toModelName } = this.field;\n            if (!toModelName) {\n                this._toModel = null;\n            } else if (toModelName === 'this') {\n                this._toModel = this.model;\n            } else {\n                this._toModel = this.orm.get(toModelName);\n            }\n        }\n        return this._toModel;\n    }\n\n    get throughModel() {\n        if (typeof this._throughModel === 'undefined') {\n            const throughModelName = this.field.getThroughModelName(\n                this.fieldName,\n                this.model\n            );\n            if (!throughModelName) {\n                this._throughModel = null;\n            } else {\n                this._throughModel = this.orm.get(throughModelName);\n            }\n        }\n        return this._throughModel;\n    }\n\n    get backwardsFieldName() {\n        return this.field.getBackwardsFieldName(this.model);\n    }\n\n    run() {\n        if (this.field.installsForwardsDescriptor) {\n            this.installForwardsDescriptor();\n        }\n        if (this.field.installsForwardsVirtualField) {\n            this.installForwardsVirtualField();\n        }\n        /**\n         * Install a backwards field on a model as a consequence\n         * of having installed the forwards field on another model.\n         */\n        if (this.field.installsBackwardsDescriptor) {\n            this.installBackwardsDescriptor();\n        }\n        if (this.field.installsBackwardsVirtualField) {\n            this.installBackwardsVirtualField();\n        }\n    }\n}\n\nexport default FieldInstallerTemplate;\n","import DefaultFieldInstaller from './DefaultFieldInstaller';\n\n/**\n * @private\n */\nexport class Field {\n    constructor() {\n        this.index = false;\n    }\n\n    get installerClass() {\n        return DefaultFieldInstaller;\n    }\n\n    getClass() {\n        return this.constructor;\n    }\n\n    references(model) {\n        return false;\n    }\n\n    getThroughModelName(fieldName, model) {\n        return null;\n    }\n\n    get installsForwardsDescriptor() {\n        return true;\n    }\n\n    get installsForwardsVirtualField() {\n        return false;\n    }\n\n    get installsBackwardsDescriptor() {\n        return false;\n    }\n\n    get installsBackwardsVirtualField() {\n        return false;\n    }\n}\n\nexport default Field;\n","import {\n    normalizeEntity,\n} from './utils';\n\n/**\n * The functions in this file return custom JS property descriptors\n * that are supposed to be assigned to Model fields.\n *\n * Some include the logic to look up models using foreign keys and\n * to add or remove relationships between models.\n *\n * @module descriptors\n * @private\n */\n\n/**\n * Defines a basic non-key attribute.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n */\nfunction attrDescriptor(fieldName) {\n    return {\n        get() {\n            return this._fields[fieldName];\n        },\n\n        set(value) {\n            return this.set(fieldName, value);\n        },\n\n        enumerable: true,\n        configurable: true,\n    };\n}\n\n/**\n * Forwards direction of a Foreign Key: returns one object.\n * Also works as {@link .forwardsOneToOneDescriptor|forwardsOneToOneDescriptor}.\n *\n * For `book.author` referencing an `Author` model instance,\n * `fieldName` would be `'author'` and `declaredToModelName` would be `'Author'`.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n * @param  {string} declaredToModelName - the name of the model that the field references.\n */\nfunction forwardsManyToOneDescriptor(fieldName, declaredToModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredToModelName]: DeclaredToModel,\n                },\n            } = this.getClass();\n            const {\n                [fieldName]: toId,\n            } = this._fields;\n\n            return DeclaredToModel.withId(toId);\n        },\n        set(value) {\n            this.update({\n                [fieldName]: normalizeEntity(value),\n            });\n        },\n    };\n}\n\n/**\n * Dereferencing foreign keys in {@link module:fields.oneToOne|oneToOne}\n * relationships works the same way as in many-to-one relationships:\n * just look up the related model.\n *\n * For example, a human face tends to have a single nose.\n * So if we want to resolve `face.nose`, we need to\n * look up the `Nose` that has the primary key that `face` references.\n *\n * @see {@link module:descriptors~forwardsManyToOneDescriptor|forwardsManyToOneDescriptor}\n */\nfunction forwardsOneToOneDescriptor(...args) {\n    return forwardsManyToOneDescriptor(...args);\n}\n\n/**\n * Here we resolve 1-to-1 relationships starting at the model on which the\n * field was not installed. This means we need to find the instance of the\n * other model whose {@link module:fields.oneToOne|oneToOne} FK field contains the current model's primary key.\n *\n * @param  {string} declaredFieldName - the name of the field referencing the current model.\n * @param  {string} declaredFromModelName - the name of the other model.\n */\nfunction backwardsOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                },\n            } = this.getClass();\n\n            return DeclaredFromModel.get({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse one-to-one relation.');\n        },\n    };\n}\n\n/**\n * The backwards direction of a n-to-1 relationship (i.e. 1-to-n),\n * meaning this will return an a collection (`QuerySet`) of model instances.\n *\n * An example would be `author.books` referencing all instances of\n * the `Book` model that reference the author using `fk()`.\n */\nfunction backwardsManyToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                },\n            } = this.getClass();\n\n            return DeclaredFromModel.filter({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse many-to-one relation.');\n        },\n    };\n}\n\n/**\n * This descriptor is assigned to both sides of a many-to-many relationship.\n * To indicate the backwards direction pass `true` for `reverse`.\n */\nfunction manyToManyDescriptor(\n    declaredFromModelName,\n    declaredToModelName,\n    throughModelName,\n    throughFields,\n    reverse\n) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                    [declaredToModelName]: DeclaredToModel,\n                    [throughModelName]: ThroughModel,\n                },\n            } = this.getClass();\n\n            const ThisModel = reverse\n                ? DeclaredToModel\n                : DeclaredFromModel;\n            const OtherModel = reverse\n                ? DeclaredFromModel\n                : DeclaredToModel;\n\n            const thisReferencingField = reverse\n                ? throughFields.to\n                : throughFields.from;\n            const otherReferencingField = reverse\n                ? throughFields.from\n                : throughFields.to;\n\n            const thisId = this.getId();\n\n            const throughQs = ThroughModel.filter({\n                [thisReferencingField]: thisId,\n            });\n\n            /**\n             * all IDs of instances of the other model that are\n             * referenced by any instance of the current model\n             */\n            const referencedOtherIds = new Set(\n                throughQs\n                    .toRefArray()\n                    .map((obj) => obj[otherReferencingField])\n            );\n\n            /**\n             * selects all instances of other model that are referenced\n             * by any instance of the current model\n             */\n            const qs = OtherModel.filter((otherModelInstance) => (\n                referencedOtherIds.has(\n                    otherModelInstance[OtherModel.idAttribute]\n                )\n            ));\n\n            /**\n             * Allows adding OtherModel instances to be referenced by the current instance.\n             *\n             * E.g. Book.first().authors.add(1, 2) would add the authors with IDs 1 and 2\n             * to the first book's list of referenced authors.\n             *\n             * @return undefined\n             */\n            qs.add = function add(...entities) {\n                const idsToAdd = new Set(\n                    entities.map(normalizeEntity)\n                );\n\n                const existingQs = throughQs.filter((through) => (\n                    idsToAdd.has(through[otherReferencingField])\n                ));\n\n                if (existingQs.exists()) {\n                    const existingIds = existingQs\n                        .toRefArray()\n                        .map((through) => through[otherReferencingField]);\n\n                    throw new Error(`Tried to add already existing ${OtherModel.modelName} id(s) ${existingIds} to the ${ThisModel.modelName} instance with id ${thisId}`);\n                }\n\n                idsToAdd.forEach((id) => {\n                    ThroughModel.create({\n                        [otherReferencingField]: id,\n                        [thisReferencingField]: thisId,\n                    });\n                });\n            };\n\n            /**\n             * Removes references to all OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.clear() would cause the first book's list\n             * of referenced authors to become empty.\n             *\n             * @return undefined\n             */\n            qs.clear = function clear() {\n                throughQs.delete();\n            };\n\n            /**\n             * Removes references to all passed OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.remove(1, 2) would cause the authors with\n             * IDs 1 and 2 to no longer be referenced by the first book.\n             *\n             * @return undefined\n             */\n            qs.remove = function remove(...entities) {\n                const idsToRemove = new Set(\n                    entities.map(normalizeEntity)\n                );\n\n                const entitiesToDelete = throughQs.filter(\n                    (through) => idsToRemove.has(through[otherReferencingField])\n                );\n\n                if (entitiesToDelete.count() !== idsToRemove.size) {\n                    // Tried deleting non-existing entities.\n                    const entitiesToDeleteIds = entitiesToDelete\n                        .toRefArray()\n                        .map((through) => through[otherReferencingField]);\n\n                    const unexistingIds = [...idsToRemove].filter(\n                        (id) => !entitiesToDeleteIds.includes(id)\n                    );\n\n                    throw new Error(`Tried to delete non-existing ${OtherModel.modelName} id(s) ${unexistingIds} from the ${ThisModel.modelName} instance with id ${thisId}`);\n                }\n\n                entitiesToDelete.delete();\n            };\n\n            return qs;\n        },\n\n        set() {\n            throw new Error('Tried setting a M2M field. Please use the related QuerySet methods add, remove and clear.');\n        },\n    };\n}\n\nexport {\n    attrDescriptor,\n    forwardsManyToOneDescriptor,\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n    backwardsManyToOneDescriptor,\n    manyToManyDescriptor,\n};\n","import Field from './Field';\n\nimport {\n    attrDescriptor,\n} from '../descriptors';\n\n/**\n * @private\n */\nexport class Attribute extends Field {\n    constructor(opts) {\n        super();\n        this.opts = opts || {};\n\n        if (this.opts.hasOwnProperty('getDefault')) {\n            this.getDefault = this.opts.getDefault;\n        }\n    }\n\n    createForwardsDescriptor(fieldName, model) {\n        return attrDescriptor(fieldName);\n    }\n}\n\nexport default Attribute;\n","/* eslint-disable max-classes-per-file */\nimport Field from './Field';\nimport DefaultFieldInstaller from './DefaultFieldInstaller';\n\nimport {\n    reverseFieldName,\n    normalizeModelReference,\n} from '../utils';\n\n/**\n * @private\n */\nexport class RelationalField extends Field {\n    constructor(...args) {\n        super();\n        if (args.length === 1 && typeof args[0] === 'object') {\n            const opts = args[0];\n            this.toModelName = normalizeModelReference(opts.to);\n            this.relatedName = opts.relatedName;\n            this.through = normalizeModelReference(opts.through);\n            this.throughFields = opts.throughFields;\n            this.as = opts.as;\n        } else {\n            [this.toModelName, this.relatedName] = [normalizeModelReference(args[0]), args[1]];\n        }\n    }\n\n    getBackwardsFieldName(model) {\n        return (\n            this.relatedName ||\n            reverseFieldName(model.modelName)\n        );\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField(model.modelName, fieldName);\n    }\n\n    get installsBackwardsVirtualField() {\n        return true;\n    }\n\n    get installsBackwardsDescriptor() {\n        return true;\n    }\n\n    references(model) {\n        return this.toModelName === model.modelName;\n    }\n\n    get installerClass() {\n        return class AliasedForwardsDescriptorInstaller extends DefaultFieldInstaller {\n            installForwardsDescriptor() {\n                Object.defineProperty(\n                    this.model.prototype,\n                    this.field.as || this.fieldName, // use supplied name if possible\n                    this.field.createForwardsDescriptor(\n                        this.fieldName,\n                        this.model,\n                        this.toModel,\n                        this.throughModel\n                    )\n                );\n            }\n        };\n    }\n}\n\nexport default RelationalField;\n","import RelationalField from './RelationalField';\n\nimport {\n    forwardsManyToOneDescriptor,\n    backwardsManyToOneDescriptor,\n} from '../descriptors';\n\n/**\n * @private\n */\nexport class ForeignKey extends RelationalField {\n    constructor(...args) {\n        super(...args);\n        this.index = true;\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsManyToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsManyToOneDescriptor(fieldName, model.modelName);\n    }\n}\n\nexport default ForeignKey;\n","import RelationalField from './RelationalField';\n\nimport {\n    manyToManyDescriptor,\n} from '../descriptors';\n\nimport {\n    m2mName,\n    m2mToFieldName,\n    m2mFromFieldName,\n} from '../utils';\n\n/**\n * @private\n */\nexport class ManyToMany extends RelationalField {\n    getDefault() {\n        return [];\n    }\n\n    getThroughModelName(fieldName, model) {\n        return (\n            this.through ||\n            m2mName(model.modelName, fieldName)\n        );\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            false\n        );\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            true\n        );\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: model.modelName,\n            relatedName: fieldName,\n            through: throughModel.modelName,\n            throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n        });\n    }\n\n    createForwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: toModel.modelName,\n            relatedName: fieldName,\n            through: this.through,\n            throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n            as: this.as,\n        });\n    }\n\n    get installsForwardsVirtualField() {\n        return true;\n    }\n\n    getThroughFields(fieldName, model, toModel, throughModel) {\n        if (this.throughFields) {\n            const [fieldAName, fieldBName] = this.throughFields;\n            const fieldA = throughModel.fields[fieldAName];\n            return {\n                to: fieldA.references(toModel) ? fieldAName : fieldBName,\n                from: fieldA.references(toModel) ? fieldBName : fieldAName,\n            };\n        }\n\n        if (model.modelName === toModel.modelName) {\n            /**\n             * we have no way of determining the relationship's\n             * direction here, so we need to assume that the user\n             * did not use a custom through model\n             * see ORM#registerManyToManyModelsFor\n             */\n            return {\n                to: m2mToFieldName(toModel.modelName),\n                from: m2mFromFieldName(model.modelName),\n            };\n        }\n\n        /**\n         * determine which field references which model\n         * and infer the directions from that\n         */\n        const throughModelFieldReferencing = (otherModel) => (\n            Object.keys(throughModel.fields).find((someFieldName) => (\n                throughModel.fields[someFieldName].references(otherModel)\n            ))\n        );\n\n        return {\n            to: throughModelFieldReferencing(toModel),\n            from: throughModelFieldReferencing(model),\n        };\n    }\n}\n\nexport default ManyToMany;\n","import RelationalField from './RelationalField';\n\nimport {\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n} from '../descriptors';\n\n/**\n * @private\n */\nexport class OneToOne extends RelationalField {\n    getBackwardsFieldName(model) {\n        return (\n            this.relatedName ||\n            model.modelName.toLowerCase()\n        );\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsOneToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsOneToOneDescriptor(fieldName, model.modelName);\n    }\n}\n\nexport default OneToOne;\n","import Attribute from './Attribute';\nimport ForeignKey from './ForeignKey';\nimport ManyToMany from './ManyToMany';\nimport OneToOne from './OneToOne';\n\n/**\n * Contains the logic for how fields on {@link Model}s work\n * and which descriptors must be installed.\n *\n * If your goal is to define fields on a Model class,\n * please use the more convenient methods {@link attr},\n * {@link fk}, {@link many} and {@link oneToOne}.\n *\n * @module fields\n * @private\n */\n\n/**\n * Defines a value attribute on the model.\n * Though not required, it is recommended to define this for each non-foreign key you wish to use.\n * Getters and setters need to be defined on each Model\n * instantiation for undeclared data fields, which is slower.\n * You can use the optional `getDefault` parameter to fill in unpassed values\n * to {@link Model.create}, such as for generating ID's with UUID:\n *\n * ```javascript\n * import getUUID from 'your-uuid-package-of-choice';\n *\n * fields = {\n *   id: attr({ getDefault: () => getUUID() }),\n *   title: attr(),\n * }\n * ```\n *\n * @global\n *\n * @param  {Object} [opts]\n * @param {Function} [opts.getDefault] - If you give a function here, its return\n *                                       value from calling with zero arguments will\n *                                       be used as the value when creating a new Model\n *                                       instance with {@link Model#create} if the field\n *                                       value is not passed.\n * @return {Attribute}\n */\nfunction attr(opts) {\n    return new Attribute(opts);\n}\n\n/**\n * Defines a foreign key on a model, which points\n * to a single entity on another model.\n *\n * You can pass arguments as either a single object,\n * or two arguments.\n *\n * If you pass two arguments, the first one is the name\n * of the Model the foreign key is pointing to, and\n * the second one is an optional related name, which will\n * be used to access the Model the foreign key\n * is being defined from, from the target Model.\n *\n * If the related name is not passed, it will be set as\n * `${toModelName}Set`.\n *\n * If you pass an object to `fk`, it has to be in the form\n *\n * ```javascript\n * fields = {\n *   author: fk({ to: 'Author', relatedName: 'books' })\n * }\n * ```\n *\n * Which is equal to\n *\n * ```javascript\n * fields = {\n *   author: fk('Author', 'books'),\n * }\n * ```\n *\n * @global\n *\n * @param {string|Class<Model>|Object} options - The target Model class, its `modelName`\n *                                               attribute or an options object that\n *                                               contains either as the `to` key.\n * @param {string|Class<Model>} options.to - The target Model class or its `modelName` attribute.\n * @param {string} [options.as] - Name for the new accessor defined for this field. If you don't\n *                                supply this, the key that this field is defined under will be\n *                                overridden.\n * @param {string} [options.relatedName] - The property name that will be used to access\n *                                         a QuerySet for all source models that reference\n *                                         the respective target Model's instance.\n * @param {string} [relatedName] - If you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a QuerySet for all source models that reference\n *                                 the respective target Model's instance.\n * @return {ForeignKey}\n */\nfunction fk(...args) {\n    return new ForeignKey(...args);\n}\n\n/**\n * Defines a many-to-many relationship between\n * this (source) and another (target) model.\n *\n * The relationship is modeled with an extra model called the through model.\n * The through model has foreign keys to both the source and target models.\n *\n * You can define your own through model if you want to associate more information\n * to the relationship. A custom through model must have at least two foreign keys,\n * one pointing to the source Model, and one pointing to the target Model.\n *\n * Like `fk`, this function accepts one or two string arguments specifying the other\n * Model and the related name, or a single object argument that allows you to pass\n * a custom through model.\n *\n * If you have more than one foreign key pointing to a source or target Model in the\n * through Model, you must pass the option `throughFields`, which is an array of two\n * strings, where the strings are the field names that identify the foreign keys to\n * be used for the many-to-many relationship. Redux-ORM will figure out which field name\n * points to which model by checking the \"through model\" definition.\n *\n * ```javascript\n * class Authorship extends Model {}\n * Authorship.modelName = 'Authorship';\n * Authorship.fields = {\n *   author: fk('Author', 'authorships'),\n *   book: fk('Book', 'authorships'),\n * };\n *\n * class Author extends Model {}\n * Author.modelName = 'Author';\n * Author.fields = {\n *   books: many({\n *     to: 'Book',\n *     relatedName: 'authors',\n *     through: 'Authorship',\n *\n *     // here this is optional: Redux-ORM can figure\n *     // out the through fields itself since the two\n *     // foreign key fields point to different Models\n *     throughFields: ['author', 'book'],\n *   })\n * };\n *\n * class Book extends Model {}\n * Book.modelName = 'Book';\n * ```\n *\n * You should only define the many-to-many relationship on one side. In the\n * above case of Authors to Books through Authorships, the relationship is\n * defined only on the Author model.\n *\n * @global\n *\n * @param {string|Class<Model>|Object} options - The target Model class, its `modelName`\n *                                               attribute or an options object that\n *                                               contains either as the `to` key.\n * @param {string|Class<Model>} options.to - The target Model class or its `modelName` attribute.\n * @param {string} [options.as] - Name for the new accessor defined for this field. If you don't\n *                                supply this, the key that this field is defined under will be\n *                                overridden.\n * @param {string|Class<Model>} [options.through] - The through Model class or its `modelName`\n *                                                  attribute. It must declare at least one\n *                                                  foreign key to both source and target models.\n *                                                  If not supplied, Redux-ORM will generate one.\n * @param {string[]} [options.throughFields] - Must be supplied only when a custom through\n *                                             Model has more than one foreign key pointing to\n *                                             either the source or target mode. In this case\n *                                             Redux-ORM can't figure out the correct fields for\n *                                             you, you must provide them. The supplied array should\n *                                             have two elements that are the field names for the\n *                                             through fields you want to declare the many-to-many\n *                                             relationship with. The order doesn't matter;\n *                                             Redux-ORM will figure out which field points to\n *                                             the source Model and which to the target Model.\n * @param {string} [options.relatedName] - The attribute used to access a QuerySet for all\n *                                         source models that reference the respective target\n *                                         Model's instance.\n * @param {string} [relatedName] - If you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a QuerySet for all source models that reference\n *                                 the respective target Model's instance.\n * @return {ManyToMany}\n */\nfunction many(...args) {\n    return new ManyToMany(...args);\n}\n\n/**\n * Defines a one-to-one relationship. In database terms, this is a foreign key with the\n * added restriction that only one entity can point to single target entity.\n *\n * The arguments are the same as with `fk`. If `relatedName` is not supplied,\n * the source model name in lowercase will be used. Note that with the one-to-one\n * relationship, the `relatedName` should be in singular, not plural.\n *\n * @global\n *\n * @param {string|Class<Model>|Object} options - The target Model class, its `modelName`\n *                                               attribute or an options object that\n *                                               contains either as the `to` key.\n * @param {string|Class<Model>} options.to - The target Model class or its `modelName` attribute.\n * @param {string} [options.as] - Name for the new accessor defined for this field. If you don't\n *                                supply this, the key that this field is defined under will be\n *                                overridden.\n * @param {string} [options.relatedName] - The property name that will be used to access the source\n *                                         model instance referencing the target model instance.\n * @param {string} [relatedName] - The property name that will be used to access the source\n *                                 model instance referencing the target model instance\n * @return {OneToOne}\n */\nfunction oneToOne(...args) {\n    return new OneToOne(...args);\n}\n\nexport {\n    fk,\n    attr,\n    many,\n    oneToOne,\n};\n","import Session from './Session';\nimport QuerySet from './QuerySet';\n\nimport { attr } from './fields';\nimport ForeignKey from './fields/ForeignKey';\nimport ManyToMany from './fields/ManyToMany';\nimport OneToOne from './fields/OneToOne';\n\nimport {\n    CREATE, UPDATE, DELETE, FILTER,\n} from './constants';\nimport {\n    normalizeEntity,\n    arrayDiffActions,\n    objectShallowEquals,\n    warnDeprecated,\n    m2mName,\n} from './utils';\n\n\n/**\n * Generates a query specification to get the instance's\n * corresponding table row using its primary key.\n *\n * @private\n * @returns {Object}\n */\nfunction getByIdQuery(modelInstance) {\n    const modelClass = modelInstance.getClass();\n    const { idAttribute, modelName } = modelClass;\n\n    return {\n        table: modelName,\n        clauses: [\n            {\n                type: FILTER,\n                payload: {\n                    [idAttribute]: modelInstance.getId(),\n                },\n            },\n        ],\n    };\n}\n\n\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\nconst Model = class Model {\n    /**\n     * Creates a Model instance from it's properties.\n     * Don't use this to create a new record; Use the static method {@link Model#create}.\n     * @param  {Object} props - the properties to instantiate with\n     */\n    constructor(props) {\n        this._initFields(props);\n    }\n\n    _initFields(props) {\n        const propsObj = Object(props);\n        this._fields = { ...propsObj };\n\n        Object.keys(propsObj).forEach((fieldName) => {\n            // In this case, we got a prop that wasn't defined as a field.\n            // Assuming it's an arbitrary data field, making an instance-specific\n            // descriptor for it.\n            // Using the in operator as the property could be defined anywhere\n            // on the prototype chain.\n            if (!(fieldName in this)) {\n                Object.defineProperty(this, fieldName, {\n                    get: () => this._fields[fieldName],\n                    set: (value) => this.set(fieldName, value),\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n\n    static toString() {\n        return `ModelClass: ${this.modelName}`;\n    }\n\n    /**\n     * Returns the options object passed to the database for the table that represents\n     * this Model class.\n     *\n     * Returns an empty object by default, which means the database\n     * will use default options. You can either override this function to return the options\n     * you want to use, or assign the options object as a static property of the same name to the\n     * Model class.\n     *\n     * @return {Object} the options object passed to the database for the table\n     *                  representing this Model class.\n     */\n    static options() {\n        return {};\n    }\n\n    /**\n     * Manually mark individual instances as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<*>} ids - Array of primary key values\n     * @return {undefined}\n     */\n    static markAccessed(ids) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark rows of the ${this.modelName} model as accessed without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markAccessed\\` instead.`,\n            ].join(''));\n        }\n        this.session.markAccessed(this.modelName, ids);\n    }\n\n    /**\n     * Manually mark this model's table as scanned.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @return {undefined}\n     */\n    static markFullTableScanned() {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark the ${this.modelName} model as full table scanned without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markFullTableScanned\\` instead.`,\n            ].join(''));\n        }\n        this.session.markFullTableScanned(this.modelName);\n    }\n\n    /**\n     * Manually mark indexes as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<Array.<*,*>>} indexes - Array of column-value pairs\n     * @return {undefined}\n     */\n    static markAccessedIndexes(indexes) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark indexes for the ${this.modelName} model as accessed without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markAccessedIndexes\\` instead.`,\n            ].join(''));\n        }\n        this.session.markAccessedIndexes(\n            indexes.map(\n                ([attribute, value]) => [this.modelName, attribute, value]\n            )\n        );\n    }\n\n    /**\n     * Returns the id attribute of this {@link Model}.\n     *\n     * @return {string} The id attribute of this {@link Model}.\n     */\n    static get idAttribute() {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to get the ${this.modelName} model's id attribute without a session. `,\n                'Create a session using `session = orm.session()` and access ',\n                `\\`session[\"${this.modelName}\"].idAttribute\\` instead.`,\n            ].join(''));\n        }\n        return this.session.db.describe(this.modelName).idAttribute;\n    }\n\n    /**\n     * Connect the model class to a {@link Session}.\n     *\n     * @private\n     * @param  {Session} session - The session to connect to.\n     */\n    static connect(session) {\n        if (!(session instanceof Session)) {\n            throw new Error('A model can only be connected to instances of Session.');\n        }\n        this._session = session;\n    }\n\n    /**\n     * Get the current {@link Session} instance.\n     *\n     * @private\n     * @return {Session} The current {@link Session} instance.\n     */\n    static get session() {\n        return this._session;\n    }\n\n    /**\n     * Returns an instance of the model's `querySetClass` field.\n     * By default, this will be an empty {@link QuerySet}.\n     *\n     * @return {Object} An instance of the model's `querySetClass`.\n     */\n    static getQuerySet() {\n        const { querySetClass: QuerySetClass } = this;\n        return new QuerySetClass(this);\n    }\n\n    /**\n     * @return {undefined}\n     */\n    static invalidateClassCache() {\n        this.isSetUp = undefined;\n        this.virtualFields = {};\n    }\n\n    /**\n     * @see {@link Model.getQuerySet}\n     */\n    static get query() {\n        return this.getQuerySet();\n    }\n\n    /**\n     * Returns parameters to be passed to {@link Table} instance.\n     *\n     * @private\n     */\n    static tableOptions() {\n        if (typeof this.backend === 'function') {\n            warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n            return this.backend();\n        }\n        if (this.backend) {\n            warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n            return this.backend;\n        }\n        if (typeof this.options === 'function') {\n            return this.options();\n        }\n        return this.options;\n    }\n\n    /**\n     * Creates a new record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {Object} userProps - the new {@link Model}'s properties.\n     * @return {Model} a new {@link Model} instance.\n     */\n    static create(userProps) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to create a ${this.modelName} model instance without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].create\\` instead.`,\n            ].join(''));\n        }\n        const props = { ...userProps };\n\n        const m2mRelations = {};\n\n        const declaredFieldNames = Object.keys(this.fields);\n        const declaredVirtualFieldNames = Object.keys(this.virtualFields);\n\n        declaredFieldNames.forEach((key) => {\n            const field = this.fields[key];\n            const valuePassed = userProps.hasOwnProperty(key);\n            if (!(field instanceof ManyToMany)) {\n                if (valuePassed) {\n                    const value = userProps[key];\n                    props[key] = normalizeEntity(value);\n                } else if (field.getDefault) {\n                    props[key] = field.getDefault();\n                }\n            } else if (valuePassed) {\n                // Save for later processing\n                m2mRelations[key] = userProps[key];\n\n                if (!field.as) {\n                    /**\n                     * The relationship does not have an accessor\n                     * Discard the value from props as the field will be populated later with instances\n                     * from the target models when refreshing the M2M relations.\n                     * If the relationship does have an accessor (`as`) field then we do want to keep this\n                     * original value in the props to expose the raw list of IDs from the instance.\n                     */\n                    delete props[key];\n                }\n            }\n        });\n\n        // add backward many-many if required\n        declaredVirtualFieldNames.forEach((key) => {\n            if (!m2mRelations.hasOwnProperty(key)) {\n                const field = this.virtualFields[key];\n                if (userProps.hasOwnProperty(key) && field instanceof ManyToMany) {\n                    // If a value is supplied for a ManyToMany field,\n                    // discard them from props and save for later processing.\n                    m2mRelations[key] = userProps[key];\n                    delete props[key];\n                }\n            }\n        });\n\n        const newEntry = this.session.applyUpdate({\n            action: CREATE,\n            table: this.modelName,\n            payload: props,\n        });\n\n        const ThisModel = this;\n        const instance = new ThisModel(newEntry);\n        instance._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n        return instance;\n    }\n\n    /**\n     * Creates a new or update existing record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {Object} userProps - the required {@link Model}'s properties.\n     * @return {Model} a {@link Model} instance.\n     */\n    static upsert(userProps) {\n        if (typeof this.session === 'undefined') {\n            throw new Error([\n                `Tried to upsert a ${this.modelName} model instance without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].upsert\\` instead.`,\n            ].join(''));\n        }\n\n        const { idAttribute } = this;\n        if (userProps.hasOwnProperty(idAttribute)) {\n            const id = userProps[idAttribute];\n            if (this.idExists(id)) {\n                const model = this.withId(id);\n                model.update(userProps);\n                return model;\n            }\n        }\n\n        return this.create(userProps);\n    }\n\n    /**\n     * Returns a {@link Model} instance for the object with id `id`.\n     * Returns `null` if the model has no instance with id `id`.\n     *\n     * You can use {@link Model#idExists} to check for existence instead.\n     *\n     * @param  {*} id - the `id` of the object to get\n     * @throws If object with id `id` doesn't exist\n     * @return {Model|null} {@link Model} instance with id `id`\n     */\n    static withId(id) {\n        return this.get({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     *\n     * @since 0.11.0\n     */\n    static idExists(id) {\n        return this.exists({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the given props exists in the state.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     */\n    static exists(lookupObj) {\n        if (typeof this.session === 'undefined') {\n            throw new Error([\n                `Tried to check if a ${this.modelName} model instance exists without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].exists\\` instead.`,\n            ].join(''));\n        }\n\n        return Boolean(\n            this._findDatabaseRows(lookupObj).length\n        );\n    }\n\n    /**\n     * Gets the {@link Model} instance that matches properties in `lookupObj`.\n     * Throws an error if {@link Model} if multiple records match\n     * the properties.\n     *\n     * @param  {Object} lookupObj - the properties used to match a single entity.\n     * @throws {Error} If more than one entity matches the properties in `lookupObj`.\n     * @return {Model} a {@link Model} instance that matches the properties in `lookupObj`.\n     */\n    static get(lookupObj) {\n        const ThisModel = this;\n\n        const rows = this._findDatabaseRows(lookupObj);\n        if (rows.length === 0) {\n            return null;\n        }\n        if (rows.length > 1) {\n            throw new Error(`Expected to find a single row in \\`${this.modelName}.get\\`. Found ${rows.length}.`);\n        }\n\n        return new ThisModel(rows[0]);\n    }\n\n    /**\n     * Gets the {@link Model} class or subclass constructor (the class that\n     * instantiated this instance).\n     *\n     * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n     *                 this instance.\n     */\n    getClass() {\n        return this.constructor;\n    }\n\n    /**\n     * Gets the id value of the current instance by looking up the id attribute.\n     * @return {*} The id value of the current instance.\n     */\n    getId() {\n        return this._fields[this.getClass().idAttribute];\n    }\n\n    /**\n     * Returns a reference to the plain JS object in the store.\n     * It contains all the properties that you pass when creating the model,\n     * except for primary keys of many-to-many relationships with a custom accessor.\n     *\n     * Make sure never to mutate this.\n     *\n     * @return {Object} a reference to the plain JS object in the store\n     */\n    get ref() {\n        const ThisModel = this.getClass();\n\n        // eslint-disable-next-line no-underscore-dangle\n        return ThisModel._findDatabaseRows({\n            [ThisModel.idAttribute]: this.getId(),\n        })[0];\n    }\n\n    /**\n     * Finds all rows in this model's table that match the given `lookupObj`.\n     * If no `lookupObj` is passed, all rows in the model's table will be returned.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     * @private\n     */\n    static _findDatabaseRows(lookupObj) {\n        const querySpec = {\n            table: this.modelName,\n        };\n        if (lookupObj) {\n            querySpec.clauses = [\n                {\n                    type: FILTER,\n                    payload: lookupObj,\n                },\n            ];\n        }\n        return this.session.query(querySpec).rows;\n    }\n\n    /**\n     * Returns a string representation of the {@link Model} instance.\n     *\n     * @return {string} A string representation of this {@link Model} instance.\n     */\n    toString() {\n        const ThisModel = this.getClass();\n        const className = ThisModel.modelName;\n        const fieldNames = Object.keys(ThisModel.fields);\n        const fields = fieldNames.map((fieldName) => {\n            const field = ThisModel.fields[fieldName];\n            if (field instanceof ManyToMany) {\n                const ids = this[fieldName].toModelArray().map(\n                    (model) => model.getId()\n                );\n                return `${fieldName}: [${ids.join(', ')}]`;\n            }\n            const val = this._fields[fieldName];\n            return `${fieldName}: ${val}`;\n        }).join(', ');\n        return `${className}: {${fields}}`;\n    }\n\n    /**\n     * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n     * Equality is determined by shallow comparing their attributes.\n     *\n     * This equality is used when you call {@link Model#update}.\n     * You can prevent model updates by returning `true` here.\n     * However, a model will always be updated if its relationships are changed.\n     *\n     * @param  {Model} otherModel - a {@link Model} instance to compare\n     * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n     */\n    equals(otherModel) {\n        // eslint-disable-next-line no-underscore-dangle\n        return objectShallowEquals(this._fields, otherModel._fields);\n    }\n\n    /**\n     * Updates a property name to given value for this {@link Model} instance.\n     * The values are immediately committed to the database.\n     *\n     * @param {string} propertyName - name of the property to set\n     * @param {*} value - value assigned to the property\n     * @return {undefined}\n     */\n    set(propertyName, value) {\n        this.update({\n            [propertyName]: value,\n        });\n    }\n\n    /**\n     * Assigns multiple fields and corresponding values to this {@link Model} instance.\n     * The updates are immediately committed to the database.\n     *\n     * @param  {Object} userMergeObj - an object that will be merged with this instance.\n     * @return {undefined}\n     */\n    update(userMergeObj) {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === 'undefined') {\n            throw new Error([\n                `Tried to update a ${ThisModel.modelName} model instance without a session. `,\n                'You cannot call `.update` on an instance that you did not receive from the database.',\n            ].join(''));\n        }\n\n        const mergeObj = { ...userMergeObj };\n\n        const { fields, virtualFields } = ThisModel;\n\n        const m2mRelations = {};\n\n        // If an array of entities or id's is supplied for a\n        // many-to-many related field, clear the old relations\n        // and add the new ones.\n        for (const mergeKey in mergeObj) { // eslint-disable-line no-restricted-syntax, guard-for-in\n            const isRealField = fields.hasOwnProperty(mergeKey);\n\n            if (isRealField) {\n                const field = fields[mergeKey];\n\n                if (field instanceof ForeignKey || field instanceof OneToOne) {\n                    // update one-one/fk relations\n                    mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n                } else if (field instanceof ManyToMany) {\n                    // field is forward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n\n                    if (!field.as) {\n                        /**\n                         * The relationship does not have an accessor\n                         * Discard the value from props as the field will be populated later with instances\n                         * from the target models when refreshing the M2M relations.\n                         * If the relationship does have an accessor (`as`) field then we do want to keep this\n                         * original value in the props to expose the raw list of IDs from the instance.\n                         */\n                        delete mergeObj[mergeKey];\n                    }\n                }\n            } else if (virtualFields.hasOwnProperty(mergeKey)) {\n                const field = virtualFields[mergeKey];\n                if (field instanceof ManyToMany) {\n                    // field is backward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n                    delete mergeObj[mergeKey];\n                }\n            }\n        }\n\n        const mergedFields = {\n            ...this._fields,\n            ...mergeObj,\n        };\n\n        const updatedModel = new ThisModel(mergedFields);\n        // only update fields if they have changed (referentially)\n        if (!this.equals(updatedModel)) {\n            this._initFields(mergedFields);\n            ThisModel.session.applyUpdate({\n                action: UPDATE,\n                query: getByIdQuery(this),\n                payload: mergeObj,\n            });\n        }\n\n        // update virtual fields\n        this._refreshMany2Many(m2mRelations);\n    }\n\n    /**\n     * Updates {@link Model} instance attributes to reflect the\n     * database state in the current session.\n     * @return {undefined}\n     */\n    refreshFromState() {\n        this._initFields(this.ref);\n    }\n\n    /**\n     * Deletes the record for this {@link Model} instance.\n     * You'll still be able to access fields and values on the instance.\n     *\n     * @return {undefined}\n     */\n    delete() {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === 'undefined') {\n            throw new Error([\n                `Tried to delete a ${ThisModel.modelName} model instance without a session. `,\n                'You cannot call `.delete` on an instance that you did not receive from the database.',\n            ].join(''));\n        }\n\n        this._onDelete();\n        ThisModel.session.applyUpdate({\n            action: DELETE,\n            query: getByIdQuery(this),\n        });\n    }\n\n    /**\n     * Update many-many relations for model.\n     * @param relations\n     * @return undefined\n     * @private\n     */\n    _refreshMany2Many(relations) {\n        const ThisModel = this.getClass();\n        const { fields, virtualFields, modelName } = ThisModel;\n\n        Object.keys(relations).forEach((name) => {\n            const reverse = !fields.hasOwnProperty(name);\n            const field = virtualFields[name];\n            const values = relations[name];\n\n            if (!Array.isArray(values)) {\n                throw new TypeError(`Failed to resolve many-to-many relationship: ${modelName}[${name}] must be an array (passed: ${values})`);\n            }\n\n            const normalizedNewIds = values.map(normalizeEntity);\n            const uniqueIds = [...new Set(normalizedNewIds)];\n\n            if (normalizedNewIds.length !== uniqueIds.length) {\n                throw new Error(`Found duplicate id(s) when passing \"${normalizedNewIds}\" to ${ThisModel.modelName}.${name} value`);\n            }\n\n            const throughModelName = field.through || m2mName(ThisModel.modelName, name);\n            const ThroughModel = ThisModel.session[throughModelName];\n\n            let fromField;\n            let toField;\n\n            if (!reverse) {\n                ({ from: fromField, to: toField } = field.throughFields);\n            } else {\n                ({ from: toField, to: fromField } = field.throughFields);\n            }\n\n            const currentIds = ThroughModel.filter((through) => through[fromField] === this[ThisModel.idAttribute]\n            ).toRefArray().map((ref) => ref[toField]);\n\n            const diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n\n            if (diffActions) {\n                const {\n                    delete: idsToDelete,\n                    add: idsToAdd,\n                } = diffActions;\n                if (idsToDelete.length > 0) {\n                    this[field.as || name].remove(...idsToDelete);\n                }\n\n                if (idsToAdd.length > 0) {\n                    this[field.as || name].add(...idsToAdd);\n                }\n            }\n        });\n    }\n\n    /**\n     * @return {undefined}\n     * @private\n     */\n    _onDelete() {\n        const { virtualFields } = this.getClass();\n        for (const key in virtualFields) { // eslint-disable-line\n            const field = virtualFields[key];\n            if (field instanceof ManyToMany) {\n                // Delete any many-to-many rows the entity is included in.\n                this[key].clear();\n            } else if (field instanceof ForeignKey) {\n                const relatedQs = this[key];\n                if (relatedQs.exists()) {\n                    relatedQs.update({ [field.relatedName]: null });\n                }\n            } else if (field instanceof OneToOne) {\n                // Set null to any foreign keys or one to ones pointed to\n                // this instance.\n                if (this[key] !== null) {\n                    this[key][field.relatedName] = null;\n                }\n            }\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     * @deprecated Please use {@link Model.idExists} instead.\n     */\n    static hasId(id) {\n        console.warn('`Model.hasId` has been deprecated. Please use `Model.idExists` instead.');\n        return this.idExists(id);\n    }\n\n    /**\n     * @deprecated See the 0.9 migration guide on the GitHub repo.\n     * @throws {Error} Due to deprecation.\n     */\n    getNextState() {\n        throw new Error(\n            '`Model.prototype.getNextState` has been removed. See the 0.9 ' +\n            'migration guide on the GitHub repo.'\n        );\n    }\n};\n\nModel.fields = {\n    id: attr(),\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\n\nexport default Model;\n","import ops from 'immutable-ops';\nimport filter from 'lodash/filter';\nimport orderBy from 'lodash/orderBy';\nimport reject from 'lodash/reject';\nimport sortBy from 'lodash/sortBy';\n\nimport { EXCLUDE, FILTER, ORDER_BY } from '../constants';\nimport { clauseFiltersByAttribute, clauseReducesResultSetSize } from '../utils';\n\nconst DEFAULT_TABLE_OPTIONS = {\n    idAttribute: 'id',\n    arrName: 'items',\n    mapName: 'itemsById',\n    fields: {},\n};\n\n/**\n * @private\n * @param {*} _currMax - the current max id\n * @param {*} userPassedId - the new id passed to the create action\n *\n * Both may be undefined. The current max id in the case that this is the first Model\n * being created, and the new id if the id was not explicitly passed to the\n * database.\n *\n * @return {Array} the new max id and the id to use to create the new row\n *\n * If the id's are strings, the id must be passed explicitly every time.\n * In this case, the current max id will remain `NaN` due to `Math.max`, but that's fine.\n */\nfunction idSequencer(_currMax, userPassedId) {\n    let currMax = _currMax;\n    let newMax;\n    let newId;\n\n    if (currMax === undefined) {\n        currMax = -1;\n    }\n\n    if (userPassedId === undefined) {\n        newMax = currMax + 1;\n        newId = newMax;\n    } else {\n        newMax = Math.max(currMax + 1, userPassedId);\n        newId = userPassedId;\n    }\n\n    return [\n        newMax, // new max id\n        newId, // id to use for row creation\n    ];\n}\n\n/**\n * Adapt order directions array to @{lodash.orderBy} API.\n *\n * @private\n *\n * @param {Array<Boolean|'asc'|'desc'>} orders? - an array of optional order query directions as provided to {@Link {QuerySet.orderBy}}\n * @return {Array<'asc'|'desc'>|undefined} A normalized ordering array or null if non was provided.\n */\nfunction normalizeOrders(orders) {\n    if (orders === undefined) {\n        return undefined;\n    }\n    const convert = (order) => (order === false ? 'desc' : 'asc');\n    return Array.isArray(orders) ? orders.map(convert) : convert(orders);\n}\n\n/**\n * Handles the underlying data structure for a {@link Model} class.\n * @private\n */\nexport class Table {\n    /**\n     * Creates a new {@link Table} instance.\n     * @param  {Object} userOpts - options to use.\n     * @param  {string} [userOpts.idAttribute=id] - the id attribute of the entity.\n     * @param  {string} [userOpts.arrName=items] - the state attribute where an array of\n     *                                             entity id's are stored\n     * @param  {string} [userOpts.mapName=itemsById] - the state attribute where the entity objects\n     *                                                 are stored in a id to entity object\n     *                                                 map.\n     * @param  {string} [userOpts.fields={}] - mapping of field key to {@link Field} object\n     */\n    constructor(userOpts) {\n        Object.assign(this, DEFAULT_TABLE_OPTIONS, userOpts);\n    }\n\n    /**\n     * Returns a reference to the object at index `id`\n     * in state `branch`.\n     *\n     * @param  {Object} branch - the state\n     * @param  {Number} id - the id of the object to get\n     * @return {Object|undefined} A reference to the raw object in the state or\n     *                            `undefined` if not found.\n     */\n    accessId(branch, id) {\n        return branch[this.mapName][id];\n    }\n\n    accessIds(branch, ids) {\n        const map = branch[this.mapName];\n        return ids.map((id) => map[id]);\n    }\n\n    idExists(branch, id) {\n        return branch[this.mapName].hasOwnProperty(id);\n    }\n\n    accessIdList(branch) {\n        return branch[this.arrName];\n    }\n\n    accessList(branch) {\n        return this.accessIds(branch, this.accessIdList(branch));\n    }\n\n    getMaxId(branch) {\n        return this.getMeta(branch, 'maxId');\n    }\n\n    setMaxId(tx, branch, newMaxId) {\n        return this.setMeta(tx, branch, 'maxId', newMaxId);\n    }\n\n    nextId(id) {\n        return id + 1;\n    }\n\n    /**\n     * Returns the default state for the data structure.\n     * @return {Object} The default state for this {@link ORM} instance's data structure\n     */\n    getEmptyState() {\n        const pkIndex = {\n            [this.arrName]: [],\n            [this.mapName]: {},\n        };\n        const attrIndexes = Object.keys(this.fields)\n            .filter((attr) => attr !== this.idAttribute)\n            .filter((attr) => this.fields[attr].index)\n            .reduce((indexes, attr) => ({\n                ...indexes,\n                [attr]: {},\n            }), {});\n        return {\n            ...pkIndex,\n            indexes: attrIndexes,\n            meta: {},\n        };\n    }\n\n    setMeta(tx, branch, key, value) {\n        const { batchToken, withMutations } = tx;\n        if (withMutations) {\n            const res = ops.mutable.setIn(['meta', key], value, branch);\n            return res;\n        }\n\n        return ops.batch.setIn(batchToken, ['meta', key], value, branch);\n    }\n\n    getMeta(branch, key) {\n        return branch.meta[key];\n    }\n\n    query(branch, clauses) {\n        if (clauses.length === 0) {\n            return this.accessList(branch);\n        }\n\n        const { idAttribute } = this;\n\n        const optimallyOrderedClauses = sortBy(clauses, (clause) => {\n            if (clauseFiltersByAttribute(clause, idAttribute)) {\n                return 1;\n            }\n\n            if (clauseReducesResultSetSize(clause)) {\n                return 2;\n            }\n\n            return 3;\n        });\n\n        const reducer = (rows, clause) => {\n            const { type, payload } = clause;\n            if (!rows) {\n                /**\n                 * First time this reducer is called during query.\n                 * This is where we apply query optimizations.\n                 */\n                if (clauseFiltersByAttribute(clause, idAttribute)) {\n                    /**\n                     * Payload specified a primary key. Use PK index\n                     * to look up the single row identified by the PK.\n                     */\n                    const id = payload[idAttribute];\n                    const remainingPayload = Object.keys(payload)\n                        .reduce((withoutPkAttr, filterAttr) => {\n                            if (filterAttr !== idAttribute) {\n                                withoutPkAttr[filterAttr] = payload[filterAttr];\n                            }\n                            return withoutPkAttr;\n                        }, {});\n                    const ids = this.idExists(branch, id) ? [id] : [];\n                    if (Object.keys(remainingPayload).length) {\n                        /**\n                         * Payload has additional, non-PK columns.\n                         * Filter accessed row by remaining payload (if one was found).\n                         */\n                        return reducer(this.accessIds(branch, ids), {\n                            ...clause,\n                            payload: remainingPayload,\n                        });\n                    }\n                    /**\n                     * No need to filter these rows any further.\n                     * The primary key value satisfies this clause's conditions.\n                     */\n                    return this.accessIds(branch, ids);\n                }\n                if (type === FILTER && typeof payload === 'object') {\n                    const indexes = Object.entries(branch.indexes);\n                    const accessedIndexes = [];\n                    const indexAttrs = [];\n                    indexes.forEach(([attr, index]) => {\n                        if (clauseFiltersByAttribute(clause, attr)) {\n                            /**\n                             * Payload specified an indexed attribute. Use index\n                             * to potentially decrease amount of accessed rows.\n                             */\n                            if (index.hasOwnProperty(payload[attr])) {\n                                accessedIndexes.push(index[payload[attr]]);\n                                indexAttrs.push(attr);\n                            }\n                        }\n                    });\n                    /**\n                     * Calculate set of unique PK values corresponding to each\n                     * foreign key's attribute value. Then retrieve all those rows.\n                     */\n                    if (accessedIndexes.length) {\n                        const lastIndex = accessedIndexes.pop();\n                        const indexedIds = accessedIndexes.reduce((result, index) => {\n                            const indexSet = new Set(index);\n                            return result.filter(Set.prototype.has, indexSet);\n                        }, lastIndex);\n                        const remainingPayload = Object.keys(payload)\n                            .reduce((withoutIndexAttrs, filterAttr) => {\n                                if (!indexAttrs.includes(filterAttr)) {\n                                    withoutIndexAttrs[filterAttr] = payload[filterAttr];\n                                }\n                                return withoutIndexAttrs;\n                            }, {});\n                        if (Object.keys(remainingPayload).length) {\n                            /**\n                             * Payload has additional, non-indexed columns.\n                             * Filter indexed rows by remaining payload (if any were found).\n                             */\n                            return reducer(this.accessIds(branch, indexedIds), {\n                                ...clause,\n                                payload: remainingPayload,\n                            });\n                        }\n                        /**\n                         * No need to filter these rows any further.\n                         * The used indexes satisfy this clause's conditions.\n                         */\n                        return this.accessIds(branch, indexedIds);\n                    }\n                }\n\n                // Give up optimization: Retrieve all rows (full table scan).\n                return reducer(this.accessList(branch), clause);\n            }\n\n            switch (type) {\n            case FILTER: {\n                return filter(rows, payload);\n            }\n            case EXCLUDE: {\n                return reject(rows, payload);\n            }\n            case ORDER_BY: {\n                const [iteratees, orders] = payload;\n                return orderBy(rows, iteratees, normalizeOrders(orders));\n            }\n            default:\n                return rows;\n            }\n        };\n\n        return optimallyOrderedClauses.reduce(reducer, undefined);\n    }\n\n    /**\n     * Returns the data structure including a new object `entry`\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object} entry - the object to insert\n     * @return {Object} an object with two keys: `state` and `created`.\n     *                  `state` is the new table state and `created` is the\n     *                  row that was created.\n     */\n    insert(tx, branch, entry) {\n        const { batchToken, withMutations } = tx;\n\n        const hasId = entry.hasOwnProperty(this.idAttribute);\n\n        let workingState = branch;\n\n        // This will not affect string id's.\n        const [newMaxId, id] = idSequencer(this.getMaxId(branch), entry[this.idAttribute]);\n        workingState = this.setMaxId(tx, branch, newMaxId);\n\n        const finalEntry = hasId\n            ? entry\n            : ops.batch.set(batchToken, this.idAttribute, id, entry);\n\n        const indexesToAppendTo = Object.keys(workingState.indexes)\n            .filter((fkAttr) => (\n                entry.hasOwnProperty(fkAttr) &&\n                entry[fkAttr] !== null\n            ))\n            .map((fkAttr) => ([fkAttr, entry[fkAttr]]));\n\n        if (withMutations) {\n            ops.mutable.push(id, workingState[this.arrName]);\n            ops.mutable.set(id, finalEntry, workingState[this.mapName]);\n            // add id to indexes\n            indexesToAppendTo.forEach(([attr, value]) => {\n                const attrIndex = workingState.indexes[attr];\n                if (attrIndex.hasOwnProperty(value)) {\n                    ops.mutable.push(id, attrIndex[value]);\n                } else {\n                    ops.mutable.set(value, [id], attrIndex);\n                }\n            });\n            return {\n                state: workingState,\n                created: finalEntry,\n            };\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            indexesToAppendTo\n                .reduce((indexMap, [attr, value]) => {\n                    indexMap[attr] = ops.batch.merge(\n                        batchToken,\n                        {\n                            [value]: ops.batch.push(\n                                batchToken,\n                                id,\n                                indexMap[attr][value] || []\n                            ),\n                        },\n                        indexMap[attr]\n                    );\n                    return indexMap;\n                }, { ...workingState.indexes }),\n            workingState.indexes\n        );\n\n        const nextState = ops.batch.merge(batchToken, {\n            [this.arrName]: ops.batch.push(batchToken, id, workingState[this.arrName]),\n            [this.mapName]: ops.batch.merge(batchToken, {\n                [id]: finalEntry,\n            }, workingState[this.mapName]),\n            indexes: nextIndexes,\n        }, workingState);\n\n        return {\n            state: nextState,\n            created: finalEntry,\n        };\n    }\n\n    /**\n     * Returns the data structure with objects where `rows`\n     * are merged with `mergeObj`.\n     *\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @param  {Object} mergeObj - The object to merge with each row.\n     * @return {Object}\n     */\n    update(tx, branch, rows, mergeObj) {\n        const { batchToken, withMutations } = tx;\n\n        const mergeObjInto = (row) => {\n            const merge = withMutations ? ops.mutable.merge : ops.batch.merge(batchToken);\n            return merge(mergeObj, row);\n        };\n\n        const set = withMutations ? ops.mutable.set : ops.batch.set(batchToken);\n\n        const indexedAttrs = Object.keys(branch.indexes)\n            .filter((attr) => mergeObj.hasOwnProperty(attr));\n        const indexIdsToAdd = [];\n        const indexIdsToDelete = [];\n\n        const nextMap = rows.reduce((map, row) => {\n            const prevAttrValues = indexedAttrs.reduce((valueMap, attr) => ({\n                ...valueMap,\n                [attr]: row[attr],\n            }), {});\n            const result = mergeObjInto(row);\n            const nextAttrValues = indexedAttrs.reduce((valueMap, attr) => ({\n                ...valueMap,\n                [attr]: result[attr],\n            }), {});\n            const id = result[this.idAttribute];\n            const nextRow = set(id, result, map);\n            indexedAttrs.forEach((attr) => {\n                const { [attr]: prevValue } = prevAttrValues;\n                const { [attr]: nextValue } = nextAttrValues;\n                if (prevValue === nextValue) {\n                    // attribute has not changed, no need to update any index\n                    return;\n                }\n                if (prevValue !== null) {\n                    // remove id from attribute's index for its old value\n                    indexIdsToDelete.push([attr, prevValue, id]);\n                }\n                if (nextValue !== null) {\n                    // add id to attribute's index for its new value\n                    indexIdsToAdd.push([attr, nextValue, id]);\n                }\n            });\n            return nextRow;\n        }, branch[this.mapName]);\n\n        let nextIndexes = branch.indexes;\n        if (withMutations) {\n            indexIdsToDelete.forEach(([attr, value, id]) => {\n                const arr = nextIndexes[attr][value];\n                const idx = arr.indexOf(id);\n                if (idx !== -1) {\n                    ops.mutable.splice(idx, 1, [], arr);\n                }\n            });\n            indexIdsToAdd.forEach(([attr, value, id]) => {\n                ops.mutable.push(id, nextIndexes[attr][value]);\n            });\n        } else {\n            if (indexIdsToAdd.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToAdd.reduce((indexMap, [attr, value, id]) => {\n                        indexMap[attr] = ops.batch.merge(\n                            batchToken,\n                            {\n                                [value]: ops.batch.push(\n                                    batchToken,\n                                    id,\n                                    indexMap[attr][value] || []\n                                ),\n                            },\n                            indexMap[attr]\n                        );\n                        return indexMap;\n                    }, { ...nextIndexes }),\n                    nextIndexes\n                );\n            }\n            if (indexIdsToDelete.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToDelete.reduce((indexMap, [attr, value, id]) => {\n                        indexMap[attr] = ops.batch.merge(\n                            batchToken,\n                            {\n                                [value]: ops.batch.filter(\n                                    batchToken,\n                                    (rowId) => rowId !== id,\n                                    indexMap[attr][value] || []\n                                ),\n                            },\n                            indexMap[attr]\n                        );\n                        return indexMap;\n                    }, { ...nextIndexes }),\n                    nextIndexes\n                );\n            }\n        }\n\n        return ops.batch.merge(batchToken, {\n            [this.mapName]: nextMap,\n            indexes: nextIndexes,\n        }, branch);\n    }\n\n    /**\n     * Returns the data structure without rows `rows`.\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @return {Object} the data structure without ids in `idsToDelete`.\n     */\n    delete(tx, branch, rows) {\n        const { batchToken, withMutations } = tx;\n\n        const { arrName, mapName } = this;\n        const arr = branch[arrName];\n\n        const idsToDelete = rows.map((row) => row[this.idAttribute]);\n        if (withMutations) {\n            idsToDelete.forEach((id) => {\n                const idx = arr.indexOf(id);\n                if (idx !== -1) {\n                    ops.mutable.splice(idx, 1, [], arr);\n                }\n\n                ops.mutable.omit(id, branch[mapName]);\n            });\n            // delete ids from all indexes\n            Object.values(branch.indexes).forEach((attrIndex) => (\n                Object.values(attrIndex).forEach((valueIndex) => (\n                    idsToDelete.forEach((id) => {\n                        const idx = valueIndex.indexOf(id);\n                        if (idx !== -1) {\n                            ops.mutable.splice(idx, 1, [], valueIndex);\n                        }\n                    })\n                ))\n            ));\n            return branch;\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            Object.entries(branch.indexes).reduce((indexMap, [attr, attrIndex]) => {\n                indexMap[attr] = ops.batch.merge(\n                    batchToken,\n                    Object.entries(attrIndex).reduce((attrIndexMap, [value, valueIndex]) => {\n                        attrIndexMap[value] = ops.batch.filter(\n                            batchToken,\n                            (id) => !idsToDelete.includes(id),\n                            valueIndex\n                        );\n                        return attrIndexMap;\n                    }, { ...indexMap[attr] }),\n                    indexMap[attr]\n                );\n                return indexMap;\n            }, { ...branch.indexes }),\n            branch.indexes\n        );\n\n        return ops.batch.merge(batchToken, {\n            [arrName]: ops.batch.filter(\n                batchToken,\n                (id) => !idsToDelete.includes(id),\n                branch[arrName],\n            ),\n            [mapName]: ops.batch.omit(\n                batchToken,\n                idsToDelete,\n                branch[mapName],\n            ),\n            indexes: ops.batch.merge(\n                batchToken,\n                nextIndexes,\n                branch.indexes,\n            ),\n        }, branch);\n    }\n}\n\nexport default Table;\n","import ops from 'immutable-ops';\n\nimport {\n    CREATE, UPDATE, DELETE, SUCCESS,\n    STATE_FLAG,\n} from '../constants';\n\nimport Table from './Table';\n\nconst BASE_EMPTY_STATE = {};\nObject.defineProperty(BASE_EMPTY_STATE, STATE_FLAG, {\n    enumerable: true,\n    value: STATE_FLAG,\n});\n\n/** @private */\nfunction replaceTableState(tableName, newTableState, tx, state) {\n    const { batchToken, withMutations } = tx;\n\n    if (withMutations) {\n        state[tableName] = newTableState;\n        return state;\n    }\n\n    return ops.batch.set(batchToken, tableName, newTableState, state);\n}\n\n/** @private */\nfunction query(tables, querySpec, state) {\n    const { table: tableName, clauses } = querySpec;\n    const table = tables[tableName];\n    const rows = table.query(state[tableName], clauses);\n    return {\n        rows,\n    };\n}\n\n/** @private */\nfunction update(tables, updateSpec, tx, state) {\n    const { action, payload } = updateSpec;\n\n    let tableName;\n    let nextTableState;\n    let resultPayload;\n\n    if (action === CREATE) {\n        ({ table: tableName } = updateSpec);\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n        const result = table.insert(tx, currTableState, payload);\n        nextTableState = result.state;\n        resultPayload = result.created;\n    } else {\n        const { query: querySpec } = updateSpec;\n        ({ table: tableName } = querySpec);\n        const { rows } = query(tables, querySpec, state);\n\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n\n        if (action === UPDATE) {\n            nextTableState = table.update(tx, currTableState, rows, payload);\n            // return updated rows\n            resultPayload = query(tables, querySpec, state).rows;\n        } else if (action === DELETE) {\n            nextTableState = table.delete(tx, currTableState, rows);\n            // return original rows that we just deleted\n            resultPayload = rows;\n        } else {\n            throw new Error(`Database received unknown update type: ${action}`);\n        }\n    }\n\n    const nextDBState = replaceTableState(tableName, nextTableState, tx, state);\n    return {\n        status: SUCCESS,\n        state: nextDBState,\n        payload: resultPayload,\n    };\n}\n\n/**\n * @memberof db\n * @param {Object} schemaSpec\n * @return Object database\n */\nexport function createDatabase(schemaSpec) {\n    const { tables: tableSpecs } = schemaSpec;\n    const tables = Object.entries(tableSpecs)\n        .reduce((map, [tableName, tableSpec]) => ({\n            ...map,\n            [tableName]: new Table(tableSpec),\n        }), {});\n\n    const getEmptyState = () => (\n        Object.entries(tables)\n            .reduce((map, [tableName, table]) => ({\n                ...map,\n                [tableName]: table.getEmptyState(),\n            }), BASE_EMPTY_STATE)\n    );\n\n    return {\n        getEmptyState,\n        query: query.bind(null, tables),\n        update: update.bind(null, tables),\n        // Used to inspect the schema.\n        describe: (tableName) => tables[tableName],\n    };\n}\n\nexport default createDatabase;\n","import { ID_ARG_KEY_SELECTOR } from '../constants';\n\nexport default class SelectorSpec {\n    constructor({ parent, orm }) {\n        this._parent = parent;\n        this._orm = orm;\n        this.keySelector = ID_ARG_KEY_SELECTOR;\n    }\n\n    get cachePath() {\n        const basePath = this._parent ? this._parent.cachePath : [];\n        return [...basePath, this.key];\n    }\n}\n","import SelectorSpec from './SelectorSpec';\n\nexport default class ModelBasedSelectorSpec extends SelectorSpec {\n    constructor({\n        model, ...other\n    }) {\n        super(other);\n        this._model = model;\n    }\n\n    get resultFunc() {\n        return (session, idArg, ...other) => {\n            const { [this._model.modelName]: ModelClass } = session;\n            if (typeof idArg === 'undefined') {\n                return ModelClass.all().toModelArray()\n                    .map((instance) => this.valueForInstance(instance, session, ...other));\n            }\n            if (Array.isArray(idArg)) {\n                return idArg.map((id) => (\n                    this.valueForInstance(ModelClass.withId(id), session, ...other)\n                ));\n            }\n            return this.valueForInstance(ModelClass.withId(idArg), session, ...other);\n        };\n    }\n}\n","export default function idArgSelector(state, idArg) {\n    return idArg;\n}\n","import ModelBasedSelectorSpec from './ModelBasedSelectorSpec';\nimport idArgSelector from './idArgSelector';\n\nexport default class MapSelectorSpec extends ModelBasedSelectorSpec {\n    constructor({\n        field, accessorName, selector, ...other\n    }) {\n        super(other);\n        this._field = field;\n        this._accessorName = accessorName;\n        this._selector = selector;\n    }\n\n    get key() {\n        return this._selector;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector, (state) => state];\n    }\n\n    valueForInstance(instance, session, state) {\n        if (!instance) return null;\n        const {\n            [this._accessorName]: value,\n        } = instance;\n        if (!value) return null;\n        const {\n            [this._field.toModelName]: {\n                idAttribute: mapIdAttribute,\n            },\n        } = session;\n        return value.toRefArray()\n            .map((ref) => this._selector(state, ref[mapIdAttribute]));\n    }\n}\n","import SelectorSpec from './SelectorSpec';\nimport idArgSelector from './idArgSelector';\n\nexport default class ModelSelectorSpec extends SelectorSpec {\n    constructor({ model, ...other }) {\n        super(other);\n        this._model = model;\n    }\n\n    get key() {\n        return this._model.modelName;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector];\n    }\n\n    get resultFunc() {\n        return ({ [this._model.modelName]: ModelClass }, idArg) => {\n            if (typeof idArg === 'undefined') {\n                return ModelClass.all().toRefArray();\n            }\n            if (Array.isArray(idArg)) {\n                return idArg.map((id) => {\n                    const instance = ModelClass.withId(id);\n                    return instance ? instance.ref : null;\n                });\n            }\n            const instance = ModelClass.withId(idArg);\n            return instance ? instance.ref : null;\n        };\n    }\n}\n","import MapSelectorSpec from './MapSelectorSpec';\nimport ModelSelectorSpec from './ModelSelectorSpec';\nimport ModelBasedSelectorSpec from './ModelBasedSelectorSpec';\nimport idArgSelector from './idArgSelector';\n\nimport QuerySet from '../QuerySet';\nimport Model from '../Model';\n\nimport ForeignKey from '../fields/ForeignKey';\nimport ManyToMany from '../fields/ManyToMany';\n\nexport default class FieldSelectorSpec extends ModelBasedSelectorSpec {\n    constructor({\n        field, fieldModel, accessorName, isVirtual, ...other\n    }) {\n        super(other);\n        this._field = field;\n        this._fieldModel = fieldModel;\n        this._accessorName = accessorName;\n        this._isVirtual = isVirtual;\n    }\n\n    get key() {\n        return this._accessorName;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector];\n    }\n\n    valueForInstance(instance, session) {\n        if (!instance) return null;\n        let value;\n        if (this._parent instanceof ModelSelectorSpec) {\n            value = instance[this._accessorName];\n        } else if (this._parent instanceof FieldSelectorSpec) {\n            const {\n                [this._parent.toModelName]: ParentToModel,\n            } = session;\n            const parentRef = this._parent.valueForInstance(instance, session);\n            const parentInstance = parentRef ? new ParentToModel(parentRef) : null;\n            value = parentInstance ? parentInstance[this._accessorName] : null;\n        }\n        if (value instanceof Model) {\n            return value.ref;\n        }\n        if (value instanceof QuerySet) {\n            return value.toRefArray();\n        }\n        return value;\n    }\n\n    map(selector) { /* eslint-disable no-underscore-dangle */\n        if (selector instanceof ModelSelectorSpec) {\n            if (this.toModelName === selector._model.modelName) {\n                throw new Error(`Cannot select models in a \\`map()\\` call. If you just want the \\`${this._accessorName}\\` as a ref array then you can simply drop the \\`map()\\`. Otherwise make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`);\n            } else {\n                throw new Error(`Cannot select \\`${selector._model.modelName}\\` models in this \\`map()\\` call. Make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`);\n            }\n        } else if (selector instanceof FieldSelectorSpec) {\n            if (this.toModelName !== selector._model.modelName) {\n                throw new Error(`Cannot select fields of the \\`${selector._model.modelName}\\` model in this \\`map()\\` call. Make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`);\n            }\n        } else if (\n            !selector ||\n            typeof selector !== 'function' ||\n            !selector.recomputations\n        ) {\n            throw new Error(`\\`map()\\` requires a selector as an input. Received: ${JSON.stringify(selector)} of type ${typeof selector}`);\n        }\n        if (\n            !(this._field instanceof ForeignKey) &&\n            !(this._field instanceof ManyToMany)\n        ) {\n            throw new Error('Cannot map selectors for non-collection fields');\n        }\n        return new MapSelectorSpec({\n            parent: this,\n            model: this._model,\n            orm: this._orm,\n            field: this._field,\n            accessorName: this._accessorName,\n            selector,\n        });\n    }\n\n    get toModelName() {\n        return (this._field.toModelName === 'this')\n            ? this._fieldModel.modelName\n            : this._field.toModelName;\n    }\n}\n","import ForeignKey from '../fields/ForeignKey';\nimport ManyToMany from '../fields/ManyToMany';\nimport RelationalField from '../fields/RelationalField';\n\nimport FieldSelectorSpec from './FieldSelectorSpec';\nimport ModelSelectorSpec from './ModelSelectorSpec';\n\n/**\n * @module selectors\n * @private\n */\n\nexport function createFieldSelectorSpec({\n    parent, model, field, accessorName, orm, isVirtual,\n}) {\n    const fieldSelectorSpec = new FieldSelectorSpec({\n        parent,\n        model,\n        orm,\n        field,\n        accessorName,\n        isVirtual,\n    });\n    /* Do not even try to create field selectors below attributes. */\n    if (!(field instanceof RelationalField)) {\n        // \"orm.Author.name.publisher\" would be nonsense\n        return fieldSelectorSpec;\n    }\n    /* Prevent field selectors below collections. */\n    if (parent instanceof FieldSelectorSpec) { /* eslint-disable no-underscore-dangle */\n        if (\n            // \"orm.Author.books.publisher\" would be nonsense\n            (parent._field instanceof ForeignKey && parent._isVirtual) ||\n            // \"orm.Genre.books.publisher\" would be nonsense\n            (parent._field instanceof ManyToMany)\n        ) {\n            throw new Error(`Cannot create a selector for \\`${parent._accessorName}.${accessorName}\\` because \\`${parent._accessorName}\\` is a collection field.`);\n        }\n    }\n    const { toModelName } = field;\n    if (!toModelName) return fieldSelectorSpec;\n    const toModel = orm.get(\n        toModelName === 'this' ? model.modelName : toModelName\n    );\n    Object.entries(toModel.fields).forEach(([relatedFieldName, relatedField]) => {\n        const fieldAccessorName = relatedField.as || relatedFieldName;\n        Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: fieldSelectorSpec,\n                model,\n                fieldModel: toModel,\n                field: relatedField,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: false,\n            }),\n        });\n    });\n    Object.entries(toModel.virtualFields).forEach(([relatedFieldName, relatedField]) => {\n        const fieldAccessorName = relatedField.as || relatedFieldName;\n        if (fieldSelectorSpec.hasOwnProperty(fieldAccessorName)) {\n            return;\n        }\n        Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: fieldSelectorSpec,\n                model,\n                fieldModel: toModel,\n                field: relatedField,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: true,\n            }),\n        });\n    });\n    return fieldSelectorSpec;\n}\n\nexport function createModelSelectorSpec({ model, orm }) {\n    const modelSelectorSpec = new ModelSelectorSpec({\n        parent: null,\n        orm,\n        model,\n    });\n\n    Object.entries(model.fields).forEach(([fieldName, field]) => {\n        const fieldAccessorName = field.as || fieldName;\n        Object.defineProperty(modelSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: modelSelectorSpec,\n                model,\n                fieldModel: model,\n                field,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: false,\n            }),\n        });\n    });\n\n    Object.entries(model.virtualFields).forEach(([fieldName, field]) => {\n        const fieldAccessorName = field.as || fieldName;\n        if (modelSelectorSpec.hasOwnProperty(fieldAccessorName)) {\n            return;\n        }\n        Object.defineProperty(modelSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: modelSelectorSpec,\n                model,\n                fieldModel: model,\n                field,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: true,\n            }),\n        });\n    });\n\n    return modelSelectorSpec;\n}\n","/* eslint-disable max-classes-per-file */\nimport Session from './Session';\nimport Model from './Model';\nimport { createDatabase as defaultCreateDatabase } from './db';\nimport { attr } from './fields';\nimport ForeignKey from './fields/ForeignKey';\nimport ManyToMany from './fields/ManyToMany';\n\nimport { createModelSelectorSpec } from './selectors';\n\nimport {\n    m2mName,\n    attachQuerySetMethods,\n    m2mToFieldName,\n    m2mFromFieldName,\n    warnDeprecated,\n} from './utils';\n\nconst ORM_DEFAULTS = {\n    createDatabase: defaultCreateDatabase,\n};\n\nconst RESERVED_TABLE_OPTIONS = [\n    'indexes',\n    'meta',\n];\nconst isReservedTableOption = (word) => RESERVED_TABLE_OPTIONS.includes(word);\n\n/**\n * ORM - the Object Relational Mapper.\n *\n * Use instances of this class to:\n *\n * - Register your {@link Model} classes using {@link ORM#register}\n * - Get the empty state for the underlying database with {@link ORM#getEmptyState}\n * - Start an immutable database session with {@link ORM#session}\n * - Start a mutating database session with {@link ORM#mutableSession}\n *\n * Internally, this class handles generating a schema specification from models\n * to the database.\n */\nexport class ORM {\n    /**\n     * Creates a new ORM instance.\n     *\n     * @param {Object} [opts]\n     * @param {Function} [opts.stateSelector] - function that given a Redux state tree\n     *                                          will return the ORM state's subtree,\n     *                                          e.g. `state => state.orm`\n     *                                          (necessary if you want to use selectors)\n     * @param {Function} [opts.createDatabase] - function that creates a database\n     */\n    constructor(opts) {\n        const { createDatabase } = { ...ORM_DEFAULTS, ...(opts || {}) };\n        this.createDatabase = createDatabase;\n        this.registry = [];\n        this.implicitThroughModels = [];\n        this.installedFields = {};\n        this.stateSelector = opts ? opts.stateSelector : null;\n    }\n\n    /**\n     * Registers a {@link Model} class to the ORM.\n     *\n     * If the model has declared any ManyToMany fields, their\n     * through models will be generated and registered with\n     * this call, unless a custom through model has been specified.\n     *\n     * @param  {...Model} model - a {@link Model} class to register\n     * @return {undefined}\n     */\n    register(...models) {\n        models.forEach((model) => {\n            if (model.modelName === undefined) {\n                throw new Error('A model was passed that doesn\\'t have a modelName set');\n            }\n\n            model.invalidateClassCache();\n\n            this.registerManyToManyModelsFor(model);\n            this.registry.push(model);\n\n            Object.defineProperty(this, model.modelName, {\n                get: () => {\n                    // make sure virtualFields are set up\n                    this._setupModelPrototypes(this.registry);\n\n                    return createModelSelectorSpec({\n                        model,\n                        orm: this,\n                    });\n                },\n            });\n        });\n    }\n\n    registerManyToManyModelsFor(model) {\n        const { fields } = model;\n        const thisModelName = model.modelName;\n\n        Object.entries(fields).forEach(([fieldName, fieldInstance]) => {\n            if (!(fieldInstance instanceof ManyToMany)) {\n                return;\n            }\n\n            let toModelName;\n            if (fieldInstance.toModelName === 'this') {\n                toModelName = thisModelName;\n            } else {\n                toModelName = fieldInstance.toModelName; // eslint-disable-line prefer-destructuring\n            }\n\n            const selfReferencing = thisModelName === toModelName;\n            const fromFieldName = m2mFromFieldName(thisModelName);\n            const toFieldName = m2mToFieldName(toModelName);\n\n            if (fieldInstance.through) {\n                if (selfReferencing && !fieldInstance.throughFields) {\n                    throw new Error(\n                        'Self-referencing many-to-many relationship at ' +\n                        `\"${thisModelName}.${fieldName}\" using custom ` +\n                        `model \"${fieldInstance.through}\" has no ` +\n                        'throughFields key. Cannot determine which ' +\n                        'fields reference the instances partaking ' +\n                        'in the relationship.'\n                    );\n                }\n            } else {\n                const Through = class ThroughModel extends Model {};\n\n                Through.modelName = m2mName(thisModelName, fieldName);\n\n                const PlainForeignKey = class PlainForeignKey extends ForeignKey {\n                    get installsBackwardsVirtualField() {\n                        return false;\n                    }\n\n                    get installsBackwardsDescriptor() {\n                        return false;\n                    }\n                };\n                const ForeignKeyClass = selfReferencing\n                    ? PlainForeignKey\n                    : ForeignKey;\n                Through.fields = {\n                    id: attr(),\n                    [fromFieldName]: new ForeignKeyClass(thisModelName),\n                    [toFieldName]: new ForeignKeyClass(toModelName),\n                };\n\n                Through.invalidateClassCache();\n                this.implicitThroughModels.push(Through);\n            }\n        });\n    }\n\n    /**\n     * Gets a {@link Model} class by its name from the registry.\n     * @param  {string} modelName - the name of the {@link Model} class to get\n     * @throws If {@link Model} class is not found.\n     * @return {Model} the {@link Model} class, if found\n     */\n    get(modelName) {\n        const allModels = this.registry.concat(this.implicitThroughModels);\n        const found = Object.values(allModels).find(\n            (model) => model.modelName === modelName\n        );\n\n        if (typeof found === 'undefined') {\n            throw new Error(`Did not find model ${modelName} from registry.`);\n        }\n        return found;\n    }\n\n    getModelClasses() {\n        this._setupModelPrototypes(this.registry);\n        this._setupModelPrototypes(this.implicitThroughModels);\n        return this.registry.concat(this.implicitThroughModels);\n    }\n\n    generateSchemaSpec() {\n        const models = this.getModelClasses();\n        const tables = models.reduce((spec, modelClass) => {\n            const tableName = modelClass.modelName;\n            const tableSpec = modelClass.tableOptions();\n            Object.keys(tableSpec).filter(isReservedTableOption).forEach((key) => {\n                throw new Error(`Reserved keyword \\`${key}\\` used in ${tableName}.options.`);\n            });\n            spec[tableName] = {\n                fields: { ...modelClass.fields },\n                ...tableSpec,\n            };\n            return spec;\n        }, {});\n        return { tables };\n    }\n\n    getDatabase() {\n        if (!this.db) {\n            this.db = this.createDatabase(this.generateSchemaSpec());\n        }\n        return this.db;\n    }\n\n    /**\n     * Returns the empty database state.\n     * @return {Object} the empty state\n     */\n    getEmptyState() {\n        return this.getDatabase().getEmptyState();\n    }\n\n    /**\n     * Begins an immutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    session(state) {\n        return new Session(this, this.getDatabase(), state);\n    }\n\n    /**\n     * Begins a mutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    mutableSession(state) {\n        return new Session(this, this.getDatabase(), state, true);\n    }\n\n    /**\n     * @private\n     */\n    _setupModelPrototypes(models) {\n        models.filter((model) => !model.isSetUp).forEach((model) => {\n            const { fields, modelName, querySetClass } = model;\n            Object.entries(fields).forEach(([fieldName, field]) => {\n                if (!this._isFieldInstalled(modelName, fieldName)) {\n                    this._installField(field, fieldName, model);\n                    this._setFieldInstalled(modelName, fieldName);\n                }\n            });\n            attachQuerySetMethods(model, querySetClass);\n            model.isSetUp = true;\n        });\n    }\n\n    /**\n     * @private\n     */\n    _isFieldInstalled(modelName, fieldName) {\n        return this.installedFields.hasOwnProperty(modelName)\n            ? !!this.installedFields[modelName][fieldName]\n            : false;\n    }\n\n    /**\n     * @private\n     */\n    _setFieldInstalled(modelName, fieldName) {\n        if (!this.installedFields.hasOwnProperty(modelName)) {\n            this.installedFields[modelName] = {};\n        }\n        this.installedFields[modelName][fieldName] = true;\n    }\n\n    /**\n     * Installs a field on a model and its related models if necessary.\n     * @private\n     */\n    _installField(field, fieldName, model) {\n        const FieldInstaller = field.installerClass;\n        (new FieldInstaller({\n            field,\n            fieldName,\n            model,\n            orm: this,\n        })).run();\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Use {@link ORM#mutableSession} instead.\n     */\n    withMutations(state) {\n        warnDeprecated(\n            '`ORM.prototype.withMutations` has been deprecated. ' +\n            'Use `ORM.prototype.mutableSession` instead.'\n        );\n        return this.mutableSession(state);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#session} instead.\n     */\n    from(state) {\n        warnDeprecated(\n            '`ORM.prototype.from` has been deprecated. ' +\n            'Use `ORM.prototype.session` instead.'\n        );\n        return this.session(state);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#getEmptyState} instead.\n     */\n    getDefaultState() {\n        warnDeprecated(\n            '`ORM.prototype.getDefaultState` has been deprecated. Use ' +\n            '`ORM.prototype.getEmptyState` instead.'\n        );\n        return this.getEmptyState();\n    }\n\n    /**\n     * @deprecated Define a Model class instead.\n     */\n    define() {\n        throw new Error(\n            '`ORM.prototype.define` has been removed. Please define a Model class.'\n        );\n    }\n}\n\nexport function DeprecatedSchema() {\n    throw new Error(\n        'Schema has been renamed to ORM. Please import ORM instead of Schema ' +\n        'from Redux-ORM.'\n    );\n}\n\nexport default ORM;\n","import { STATE_FLAG } from './constants';\n\nconst defaultEqualityCheck = (a, b) => a === b;\nexport const eqCheck = defaultEqualityCheck;\n\nconst isOrmState = (arg) => (\n    arg &&\n    typeof arg === 'object' &&\n    arg.hasOwnProperty(STATE_FLAG)\n);\n\nconst argsAreEqual = (lastArgs, nextArgs, equalityCheck) => (\n    nextArgs.every((arg, index) => (\n        (isOrmState(arg) && isOrmState(lastArgs[index])) ||\n        equalityCheck(arg, lastArgs[index])\n    ))\n);\n\nconst rowsAreEqual = (ids, rowsA, rowsB) => (\n    ids.every((id) => rowsA[id] === rowsB[id])\n);\n\nconst accessedModelInstancesAreEqual = (previous, ormState, orm) => {\n    const {\n        accessedInstances,\n    } = previous;\n\n    return Object.entries(accessedInstances).every(([modelName, instances]) => {\n        // if the entire table has not been changed, we have nothing to do\n        if (previous.ormState[modelName] === ormState[modelName]) {\n            return true;\n        }\n\n        const { mapName } = orm.getDatabase().describe(modelName);\n\n        const { [mapName]: previousRows } = previous.ormState[modelName];\n        const { [mapName]: rows } = ormState[modelName];\n\n        const accessedIds = Object.keys(instances);\n        return rowsAreEqual(accessedIds, previousRows, rows);\n    });\n};\n\nconst accessedIndexesAreEqual = (previous, ormState) => {\n    const {\n        accessedIndexes,\n    } = previous;\n\n    return Object.entries(accessedIndexes).every(([modelName, indexes]) => (\n        Object.entries(indexes).every(([column, values]) => (\n            values.every((value) => (\n                previous.ormState[modelName].indexes[column][value]\n                    === ormState[modelName].indexes[column][value]\n            ))\n        ))\n    ));\n};\n\nconst fullTableScannedModelsAreEqual = (previous, ormState) => (\n    previous.fullTableScannedModels.every((modelName) => (\n        previous.ormState[modelName]\n            === ormState[modelName]\n    ))\n);\n\n/**\n * A memoizer to use with redux-orm\n * selectors. When the memoized function is first run,\n * the memoizer will remember the models that are accessed\n * during that function run.\n *\n * On subsequent runs, the memoizer will check if those\n * models' states have changed compared to the previous run.\n *\n * Memoization algorithm operates like this:\n *\n * 1. Has the selector been run before? If not, go to 6.\n *\n * 2. If the selector has other input selectors in addition to the\n *    ORM state selector, check their results for equality with the previous results.\n *    If they aren't equal, go to 6.\n *\n * 3. Some filter queries may have required scanning entire tables during the last run.\n *    If any of those tables have changed, go to 6.\n *\n * 4. Check which foreign key indexes the database has used to speed up queries\n *    during the last run. If any have changed, go to 6.\n *\n * 5. Check which Model's instances the selector has accessed during the last run.\n *    Check for equality with each of those states versus their states in the\n *    previous ORM state. If all of them are equal, return the previous result.\n *\n * 6. Run the selector. Check the Session object used by the selector for\n *    which Model's states were accessed, and merge them with the previously\n *    saved information about accessed models (if-else branching can change\n *    which models are accessed on different inputs). Save the ORM state and\n *    other arguments the selector was called with, overriding previously\n *    saved values. Save the selector result. Return the selector result.\n *\n * @private\n * @param  {Function} func - function to memoize\n * @param  {Function} argEqualityCheck - equality check function to use with normal\n *                                       selector args\n * @param  {ORM} orm - a redux-orm ORM instance\n * @return {Function} `func` memoized.\n */\nexport function memoize(func, argEqualityCheck = defaultEqualityCheck, orm) {\n    let previous = {\n        /* Result of the previous function call */\n        result: null,\n        /* Arguments to the previous function call (excluding ORM state) */\n        args: null,\n        /**\n         * Snapshot of the previous database.\n         *\n         * Lets us know how the tables looked like\n         * during the previous function call.\n         */\n        ormState: null,\n        /**\n         * Names of models whose tables have been scanned completely\n         * during previous function call (contains only model names)\n         * Format example: ['Book']\n         */\n        fullTableScannedModels: [],\n        /**\n         * Map of which model instances have been accessed\n         * during previous function call.\n         * Contains only PKs of accessed instances.\n         * Format example: { Book: { 1: true, 3: true } }\n         */\n        accessedInstances: {},\n        /**\n         * Map of which attribute indexes have been accessed\n         * during previous function call.\n         * Contains only attributes that were actually filtered on.\n         * Author.withId(3).books would add 3 to the authorId index below.\n         * Format example: { Book: { authorId: [1, 2], publisherId: [5] } }\n         */\n        accessedIndexes: {},\n    };\n\n    return (...stateAndArgs) => {\n        /**\n         * The first argument to this function needs to be\n         * the ORM's reducer state in the user's Redux store.\n         */\n        const [ormState, ...args] = stateAndArgs;\n\n        const selectorWasCalledBefore = Boolean(previous.args);\n        if (\n            selectorWasCalledBefore &&\n            argsAreEqual(previous.args, args, argEqualityCheck) &&\n            fullTableScannedModelsAreEqual(previous, ormState) &&\n            accessedIndexesAreEqual(previous, ormState) &&\n            accessedModelInstancesAreEqual(previous, ormState, orm)\n        ) {\n            /**\n             * None of this selector's dependencies have changed\n             * since the last time that we called it.\n             */\n            return previous.result;\n        }\n\n        /**\n         * Start a session so that the selector can access the database.\n         * Make this session immutable. This way we can find out if\n         * the operations that the selector performs are cacheable.\n         */\n        const session = orm.session(ormState);\n        /* Replace all ORM state arguments by the session above */\n        const argsWithSession = args.map((arg) => (isOrmState(arg) ? session : arg));\n\n        /* This is where we call the actual function */\n        const result = func.apply(null, argsWithSession); // eslint-disable-line prefer-spread\n\n        /**\n         * The metadata for the previous call are no longer valid.\n         * Update cached values.\n         */\n        previous = {\n            /* Arguments that were passed to the selector */\n            args,\n            /* Selector result */\n            result,\n            /* Redux state slice for session.state */\n            ormState,\n            /* Rows retrieved by resolved primary key */\n            accessedInstances: session.accessedModelInstances,\n            /* Foreign key indexes that were used to speed up queries */\n            accessedIndexes: session.accessedIndexes,\n            /* Tables that had to be scanned completely */\n            fullTableScannedModels: session.fullTableScannedModels,\n        };\n\n        return result;\n    };\n}\n","import { createSelectorCreator } from 'reselect';\nimport createCachedSelector, { FlatMapCache } from 're-reselect';\n\nimport { memoize } from './memoize';\n\nimport { ORM } from './ORM';\nimport SelectorSpec from './selectors/SelectorSpec';\nimport MapSelectorSpec from './selectors/MapSelectorSpec';\n\n/**\n * @module redux\n * @desc Provides functions for integration with Redux.\n * @private\n */\n\n/**\n * Calls all models' reducers if they exist.\n *\n * @return {undefined}\n * @global\n */\nexport function defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach((modelClass) => {\n        if (typeof modelClass.reducer === 'function') {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\n/**\n * Call the returned function to pass actions to Redux-ORM.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance.\n * @param {Function} [updater] - the function updating the ORM state based on the given action.\n * @return {Function} reducer that will update the ORM state.\n */\nexport function createReducer(orm, updater = defaultUpdater) {\n    return (state, action) => {\n        const session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n}\n\n/**\n * @private\n * @param {SelectorSpec} spec\n */\nfunction createSelectorFromSpec(spec) {\n    return createCachedSelector(\n        spec.dependencies,\n        spec.resultFunc\n    )({\n        keySelector: spec.keySelector,\n        cacheObject: new FlatMapCache(),\n        selectorCreator: createSelector, // eslint-disable-line no-use-before-define\n    });\n}\n\n/**\n * Tries to find ORM instance using the argument.\n * @private\n * @param {*} arg\n */\nfunction toORM(arg) { /* eslint-disable no-underscore-dangle */\n    if (arg instanceof ORM) {\n        return arg;\n    }\n    if (arg instanceof SelectorSpec) {\n        return arg._orm;\n    }\n    return false;\n}\n\nconst selectorCache = new Map();\nconst SELECTOR_KEY = Symbol('REDUX_ORM_SELECTOR');\n\n/**\n * @private\n * @param {function|ORM|SelectorSpec} arg\n */\nfunction toSelector(arg) { /* eslint-disable no-underscore-dangle */\n    if (typeof arg === 'function') {\n        return arg;\n    }\n    if (arg instanceof ORM) {\n        return arg.stateSelector;\n    }\n    if (arg instanceof MapSelectorSpec) {\n        arg._selector = toSelector(arg._selector);\n    }\n    if (arg instanceof SelectorSpec) {\n        const { _orm: orm, cachePath } = arg;\n        let ormSelectors;\n        let level;\n        if (cachePath && cachePath.length) {\n            // the selector cache for the spec's ORM\n            if (!selectorCache.has(orm)) {\n                selectorCache.set(orm, new Map());\n            }\n            ormSelectors = selectorCache.get(orm);\n\n            /**\n             * Drill down into selector map by cachePath.\n             *\n             * The selector itself is stored under a special SELECTOR_KEY\n             * so that we can store selectors below it as well.\n             * @private\n             */\n            level = ormSelectors;\n            for (let i = 0; i < cachePath.length; ++i) {\n                if (!level.has(cachePath[i])) {\n                    level.set(cachePath[i], new Map());\n                }\n                level = level.get(cachePath[i]);\n            }\n            if (level && level.has(SELECTOR_KEY)) {\n                // Cache hit: the selector has been created before\n                return level.get(SELECTOR_KEY);\n            }\n        }\n\n        const selector = createSelectorFromSpec(arg);\n\n        if (cachePath && cachePath.length) {\n            // Save the selector at the cachePath position\n            level.set(SELECTOR_KEY, selector);\n        }\n\n        return selector;\n    }\n    throw new Error(`Failed to interpret selector argument: ${JSON.stringify(arg)} of type ${typeof arg}`);\n}\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, any of the arguments\n * you pass first will be considered selectors and mapped\n * to their outputs, like in `reselect`.\n *\n * Here are some example selectors:\n *\n * ```javascript\n * // orm is an instance of ORM\n * // reduxState is the state of a Redux store\n * const books = createSelector(orm.Book);\n * books(reduxState) // array of book refs\n *\n * const bookAuthors = createSelector(orm.Book.authors);\n * bookAuthors(reduxState) // two-dimensional array of author refs for each book\n * ```\n * Selectors can easily be applied to related models:\n * ```javascript\n * const bookAuthorNames = createSelector(\n *     orm.Book.authors.map(orm.Author.name),\n * );\n * bookAuthorNames(reduxState, 8) // names of all authors of book with ID 8\n * bookAuthorNames(reduxState, [8, 9]) // 2D array of names of all authors of books with IDs 8 and 9\n * ```\n * Also note that `orm.Author.name` did not need to be wrapped in another `createSelector` call,\n * although that would be possible.\n *\n * For more complex calculations you can access\n * entire session objects by passing an ORM instance.\n * ```javascript\n * const freshBananasCost = createSelector(\n *     orm,\n *     session => {\n *        const banana = session.Product.get({\n *            name: \"Banana\",\n *        });\n *        // amount of fresh bananas in shopping cart\n *        const amount = session.ShoppingCart.filter({\n *            product_id: banana.id,\n *            is_fresh: true,\n *        }).count();\n *        return `USD ${amount * banana.price}`;\n *     }\n * );\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n *\n * Everytime a selector runs, this function records which instances\n * of your `Model`s were accessed.<br>\n * On subsequent runs, the selector first checks if the previously\n * accessed instances or `args` have changed in any way:\n * <ul>\n *     <li>If yes, the selector calls the function you passed to it.</li>\n *     <li>If not, it just returns the previous result\n *         (unless you call it for the first time).</li>\n * </ul>\n *\n * This way you can use pure rendering in your React components\n * for performance gains.\n *\n * @global\n *\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nexport function createSelector(...args) {\n    if (!args.length) {\n        throw new Error('Cannot create a selector without arguments.');\n    }\n\n    const resultArg = args.pop();\n    const dependencies = Array.isArray(args[0]) ? args[0] : args;\n\n    const orm = dependencies.map(toORM).find(Boolean);\n    const inputFuncs = dependencies.map(toSelector);\n\n    if (typeof resultArg === 'function') {\n        if (!orm) {\n            throw new Error('Failed to resolve the current ORM database state. Please pass an ORM instance or an ORM selector as an argument to `createSelector()`.');\n        } else if (!orm.stateSelector) {\n            throw new Error('Failed to resolve the current ORM database state. Please pass an object to the ORM constructor that specifies a `stateSelector` function.');\n        } else if (typeof orm.stateSelector !== 'function') {\n            throw new Error(`Failed to resolve the current ORM database state. Please pass a function when specifying the ORM's \\`stateSelector\\`. Received: ${JSON.stringify(orm.stateSelector)} of type ${typeof orm.stateSelector}`);\n        }\n\n        return createSelectorCreator(memoize, undefined, orm)(\n            [orm.stateSelector, ...inputFuncs],\n            resultArg\n        );\n    }\n\n    if (resultArg instanceof ORM) {\n        throw new Error('ORM instances cannot be the result function of selectors. You can access your models in the last function that you pass to `createSelector()`.');\n    }\n    if (inputFuncs.length) {\n        console.warn('Your input selectors will be ignored: the passed result function does not require any input.');\n    }\n\n    return toSelector(resultArg);\n}\n","import QuerySet from './QuerySet';\nimport Model from './Model';\nimport { DeprecatedSchema, ORM } from './ORM';\nimport Session from './Session';\nimport {\n    createReducer,\n    createSelector,\n} from './redux';\nimport ForeignKey from './fields/ForeignKey';\nimport ManyToMany from './fields/ManyToMany';\nimport OneToOne from './fields/OneToOne';\nimport Attribute from './fields/Attribute';\nimport {\n    fk,\n    many,\n    oneToOne,\n    attr,\n} from './fields';\n\nconst Schema = DeprecatedSchema;\n\nconst Backend = function RemovedBackend() {\n    throw new Error(\n        'Having a custom Backend instance is now unsupported. ' +\n        'Documentation for database customization is upcoming, for now ' +\n        'please look at the db folder in the source.'\n    );\n};\n\nexport {\n    Attribute,\n    QuerySet,\n    Model,\n    ORM,\n    Schema,\n    Backend,\n    Session,\n    ForeignKey,\n    ManyToMany,\n    OneToOne,\n    fk,\n    many,\n    attr,\n    oneToOne,\n    createReducer,\n    createSelector,\n};\n\nexport default Model;\n"],"sourceRoot":""}