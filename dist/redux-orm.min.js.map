{"version":3,"sources":["webpack://ReduxOrm/webpack/universalModuleDefinition","webpack://ReduxOrm/webpack/bootstrap","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/createClass.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/inheritsLoose.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/typeof.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://ReduxOrm/./node_modules/reselect/lib/index.js","webpack://ReduxOrm/./node_modules/re-reselect/dist/index.js","webpack://ReduxOrm/./node_modules/lodash/_baseIteratee.js","webpack://ReduxOrm/./node_modules/lodash/isArray.js","webpack://ReduxOrm/./node_modules/lodash/_baseOrderBy.js","webpack://ReduxOrm/./node_modules/lodash/identity.js","webpack://ReduxOrm/./node_modules/lodash/reject.js","webpack://ReduxOrm/./node_modules/lodash/filter.js","webpack://ReduxOrm/./node_modules/lodash/orderBy.js","webpack://ReduxOrm/./node_modules/lodash/sortBy.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://ReduxOrm/./node_modules/lodash/_arrayFilter.js","webpack://ReduxOrm/./node_modules/lodash/_baseFilter.js","webpack://ReduxOrm/./node_modules/lodash/negate.js","webpack://ReduxOrm/./node_modules/lodash/_arrayMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseSortBy.js","webpack://ReduxOrm/./node_modules/lodash/_baseUnary.js","webpack://ReduxOrm/./node_modules/lodash/_compareMultiple.js","webpack://ReduxOrm/./node_modules/lodash/_compareAscending.js","webpack://ReduxOrm/./node_modules/lodash/isSymbol.js","webpack://ReduxOrm/./node_modules/lodash/_baseFlatten.js","webpack://ReduxOrm/./node_modules/lodash/_baseRest.js","webpack://ReduxOrm/./node_modules/lodash/_overRest.js","webpack://ReduxOrm/./node_modules/lodash/_apply.js","webpack://ReduxOrm/./node_modules/lodash/_setToString.js","webpack://ReduxOrm/./node_modules/lodash/_isIterateeCall.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry1.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_arity.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry2.js","webpack://ReduxOrm/./node_modules/ramda/es/curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/curry.js","webpack://ReduxOrm/./node_modules/ramda/es/__.js","webpack://ReduxOrm/./node_modules/immutable-ops/es/index.js","webpack://ReduxOrm/./src/constants.js","webpack://ReduxOrm/./src/utils.js","webpack://ReduxOrm/./src/QuerySet.js","webpack://ReduxOrm/./src/Session.js","webpack://ReduxOrm/./src/descriptors.js","webpack://ReduxOrm/./src/fields.js","webpack://ReduxOrm/./src/Model.js","webpack://ReduxOrm/./src/db/Table.js","webpack://ReduxOrm/./src/db/Database.js","webpack://ReduxOrm/./src/selectors.js","webpack://ReduxOrm/./src/ORM.js","webpack://ReduxOrm/./src/memoize.js","webpack://ReduxOrm/./src/redux.js","webpack://ReduxOrm/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","subClass","superClass","constructor","__proto__","_typeof2","obj","iterator","_typeof","arrayWithoutHoles","iterableToArray","nonIterableSpread","arr","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheck","arguments","undefined","lastArgs","lastResult","prev","next","areArgumentsShallowlyEqual","apply","createSelectorCreator","memoize","_len","memoizeOptions","Array","_key","_len2","funcs","_key2","recomputations","resultFunc","pop","dependencies","isArray","every","dep","dependencyTypes","map","join","Error","getDependencies","memoizedResultFunc","concat","selector","params","push","resetRecomputations","createStructuredSelector","selectors","selectorCreator","createSelector","objectKeys","keys","_len3","values","_key3","reduce","composition","index","reselect","isStringOrNumber","FlatObjectCache","this","_cache","_proto","set","selectorFn","remove","clear","isValidCacheKey","cacheKey","validateCacheSize","cacheSize","Number","isInteger","FifoObjectCache","_temp","_ref","_cacheOrdering","_cacheSize","earliest","indexOf","splice","LruObjectCache","_registerCacheHit","_deleteCacheHit","FlatMapCache","Map","delete","FifoMapCache","size","LruMapCache","has","defaultCacheCreator","defaultCacheKeyValidator","default","keySelector","options","cache","cacheObject","cacheResponse","console","warn","getMatchingSelector","removeMatchingSelector","clearCache","FlatCacheObject","FifoCacheObject","LruCacheObject","arrayMap","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","collection","iteratees","orders","result","criteria","iteratee","other","arrayFilter","baseFilter","negate","predicate","array","resIndex","baseOrderBy","guard","baseFlatten","baseRest","isIterateeCall","sortBy","arr2","iter","toString","from","TypeError","FUNC_ERROR_TEXT","args","comparer","sort","compareAscending","objCriteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","overRest","setToString","start","nativeMax","Math","max","transform","otherArgs","thisArg","_isPlaceholder","_curry1","fn","f1","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","_curry2","f2","_b","_a","es_curryN","_curryN","received","combined","argsIdx","left","combinedIdx","es_curry","_","@@functional/placeholder","forOwn","OWNER_ID_TAG","canMutate","ownerID","getBatchToken","prepareNewObject","instance","addOwnerID","forceArray","arg","PATH_SEPARATOR","normalizePath","pathArg","split","mutableSet","mutableMerge","isDeep","_mergeObjs","baseObj","mergeObjs","forEach","mergeObj","assignValue","typeof_default","assign","toConsumableArray_default","mutableShallowMerge","mutableDeepMerge","mutableOmit","_keys","shouldMergeKey","immutableMerge","hasChanges","nextObject","willChange","mergeValue","currentValue","recursiveMergeResult","immutableDeepMerge","immutableArrSet","newArr","copied","fastArrayCopy","mutableArrFilter","currIndex","originalIndex","mutableArrSplice","deleteCount","_vals","vals","mutableArrInsert","immutableArrSplice","slice","immutableArrInsert","immutableOperations","merge","deepMerge","omit","keysInObj","filter","newObj","setIn","_pathArg","acc","currRef","valueInPath","pathLen","rootObj","curr","idx","currType","_newObj","pathRepr","insert","isArrayLike","mutableOperations","originalPathArg","done","es","immutableOps","mutableOps","batchOps","mutable","batch","batched","_token","_fn","token","immutableOpsBoundToToken","__","getImmutableOps","UPDATE","DELETE","CREATE","FILTER","EXCLUDE","SUCCESS","STATE_FLAG","warnDeprecated","msg","log","m2mName","declarationModelName","fieldName","string","charAt","toUpperCase","m2mFromFieldName","m2mToFieldName","otherModelName","querySetDelegatorFactory","methodName","getQuerySet","querySetGetterDelegatorFactory","getterName","attachQuerySetMethods","modelClass","querySetClass","leftToDefine","sharedMethods","currClass","Function","getPrototypeOf","forEachSuperClass","cls","defined","getOwnPropertyDescriptor","normalizeEntity","entity","getId","ops","clauseFiltersByAttribute","type","payload","attribute","attributeValue","mapValues","entries","newObject","QuerySet","clauses","opts","_opts","addSharedMethod","_new","userOpts","_evaluate","rows","id","withId","toRefArray","toModelArray","ModelClass","count","exists","Boolean","at","first","last","all","lookupObj","normalizedLookupObj","filterDescriptor","exclude","excludeDescriptor","session","modelName","_evaluated","table","querySpec","query","orderBy","orderByDescriptor","update","applyUpdate","action","model","_onDelete","createClass_default","Session","schema","db","state","withMutations","batchToken","getEmptyState","initialState","modelData","models","getModelClasses","sessionBoundModels","SessionBoundModel","Reflect","construct","setPrototypeOf","connect","getDataForModel","markAccessed","modelIds","data","accessedInstances","markFullTableScanned","fullTableScanned","markAccessedIndexes","indexes","attr","accessedIndexes","updateSpec","tx","_getTransaction","status","_markAccessedByQuery","includes","idAttribute","accessedIds","Set","row","anyClauseFilteredByPk","some","clause","add","getNextState","[object Object]","forwardsManyToOneDescriptor","declaredToModelName","DeclaredToModel","getClass","toId","_fields","manyToManyDescriptor","declaredFromModelName","throughModelName","throughFields","reverse","DeclaredFromModel","ThroughModel","ThisModel","OtherModel","thisReferencingField","to","otherReferencingField","thisId","throughQs","referencedOtherIds","qs","otherModelInstance","entities","idsToAdd","existingQs","through","existingIds","idsToRemove","entitiesToDelete","entitiesToDeleteIds","unexistingIds","DefaultFieldInstaller","installForwardsDescriptor","field","createForwardsDescriptor","toModel","throughModel","installForwardsVirtualField","virtualFields","createForwardsVirtualField","installBackwardsDescriptor","backwardsFieldName","toModelName","createBackwardsDescriptor","installBackwardsVirtualField","createBackwardsVirtualField","FieldInstallerTemplate","orm","references","run","installsForwardsDescriptor","installsForwardsVirtualField","installsBackwardsDescriptor","installsBackwardsVirtualField","_toModel","_throughModel","getThroughModelName","getBackwardsFieldName","Field","Attribute","_Field","_this","getDefault","inheritsLoose_default","attrDescriptor","RelationalField","_Field2","_this2","relatedName","as","_proto5","toLowerCase","_DefaultFieldInstalle","AliasedForwardsDescriptorInstaller","ForeignKey","_RelationalField","_this3","_proto7","declaredFieldName","ManyToMany","_RelationalField2","_proto8","getThroughFields","fieldAName","fieldBName","fieldA","fields","throughModelFieldReferencing","otherModel","find","someFieldName","OneToOne","_RelationalField3","_proto9","forwardsOneToOneDescriptor","fk","many","oneToOne","getByIdQuery","modelInstance","Model","_initFields","propsObj","ids","_session","QuerySetClass","invalidateClassCache","isSetUp","tableOptions","backend","userProps","m2mRelations","declaredFieldNames","declaredVirtualFieldNames","valuePassed","_refreshMany2Many","upsert","idExists","_findDatabaseRows","equals","keysInA","objectShallowEquals","propertyName","userMergeObj","mergeKey","mergedFields","updatedModel","refreshFromState","ref","relations","normalizedNewIds","uniqueIds","fromField","toField","diffActions","sourceArr","targetArr","itemsInBoth","item","deleteItems","addItems","arrayDiffActions","idsToDelete","relatedQs","hasId","describe","DEFAULT_TABLE_OPTIONS","arrName","mapName","Table","accessId","branch","accessIds","accessIdList","accessList","getMaxId","getMeta","setMaxId","newMaxId","setMeta","nextId","meta","optimallyOrderedClauses","clauseReducesResultSetSize","reducer","remainingPayload","withoutPkAttr","filterAttr","indexAttrs","lastIndex","indexedIds","indexSet","withoutIndexAttrs","reject","entry","workingState","_currMax","userPassedId","newMax","newId","currMax","idSequencer","finalEntry","indexesToAppendTo","fkAttr","attrIndex","created","nextIndexes","indexMap","indexedAttrs","indexIdsToAdd","indexIdsToDelete","nextMap","prevAttrValues","valueMap","mergeObjInto","nextAttrValues","nextRow","prevValue","nextValue","rowId","valueIndex","attrIndexMap","BASE_EMPTY_STATE","tables","tableName","nextTableState","resultPayload","currTableState","nextDBState","newTableState","replaceTableState","createDatabase","schemaSpec","tableSpecs","tableSpec","ALL_INSTANCES","idArgSelector","idArg","SelectorSpec","parent","_parent","_orm","cachePath","ModelSelectorSpec","_SelectorSpec","_model","ModelBasedSelectorSpec","_SelectorSpec2","valueForInstance","MapSelectorSpec","_ModelBasedSelectorSp","accessorName","_field","_accessorName","_selector","mapIdAttribute","FieldSelectorSpec","_ModelBasedSelectorSp2","fieldModel","isVirtual","_this4","_fieldModel","_isVirtual","_proto2","ParentToModel","parentRef","parentInstance","JSON","stringify","createFieldSelectorSpec","fieldSelectorSpec","relatedFieldName","relatedField","fieldAccessorName","ORM_DEFAULTS","defaultCreateDatabase","RESERVED_TABLE_OPTIONS","isReservedTableOption","word","ORM","registry","implicitThroughModels","installedFields","stateSelector","register","registerManyToManyModelsFor","_setupModelPrototypes","modelSelectorSpec","createModelSelectorSpec","thisModelName","fieldInstance","selfReferencing","fromFieldName","toFieldName","Through","_Model","PlainForeignKey","_ForeignKey","ThroughForeignKeyField","ForeignKeyClass","allModels","found","generateSchemaSpec","spec","getDatabase","mutableSession","_isFieldInstalled","_installField","_setFieldInstalled","FieldInstaller","installerClass","getDefaultState","isOrmState","argsAreEqual","nextArgs","accessedModelInstancesAreEqual","previous","ormState","instances","previousRows","rowsA","rowsB","rowsAreEqual","accessedIndexesAreEqual","column","fullTableScannedModelsAreEqual","fullTableScannedModels","argEqualityCheck","stateAndArgs","argsWithSession","accessedModelInstances","createReducer","updater","toORM","selectorCache","SELECTOR_KEY","toSelector","ormSelectors","level","createCachedSelector","resultArg","inputFuncs","__webpack_exports__","Schema","Backend","fields_Attribute","src_QuerySet","src_Model","ORM_ORM","src_Session","fields_ForeignKey","fields_ManyToMany","fields_OneToOne","fields_attr"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,OAAA,cAAAH,GACA,iBAAAC,QACAA,QAAA,SAAAD,IAEAD,EAAA,SAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oBClFA,SAAAC,EAAAC,EAAAC,GACA,QAAAlC,EAAA,EAAiBA,EAAAkC,EAAAC,OAAkBnC,IAAA,CACnC,IAAAoC,EAAAF,EAAAlC,GACAoC,EAAAxB,WAAAwB,EAAAxB,aAAA,EACAwB,EAAAC,cAAA,EACA,UAAAD,MAAAE,UAAA,GACA5B,OAAAC,eAAAsB,EAAAG,EAAAb,IAAAa,IAUA3C,EAAAD,QANA,SAAA+C,EAAAC,EAAAC,GAGA,OAFAD,GAAAR,EAAAO,EAAAX,UAAAY,GACAC,GAAAT,EAAAO,EAAAE,GACAF,kBCPA9C,EAAAD,QANA,SAAAkD,EAAAC,GACAD,EAAAd,UAAAlB,OAAAY,OAAAqB,EAAAf,WACAc,EAAAd,UAAAgB,YAAAF,EACAA,EAAAG,UAAAF,kBCHA,SAAAG,EAAAC,GAA6U,OAA1OD,EAA3E,mBAAA/B,QAAA,iBAAAA,OAAAiC,SAA2E,SAAAD,GAAoC,cAAAA,GAA+B,SAAAA,GAAoC,OAAAA,GAAA,mBAAAhC,QAAAgC,EAAAH,cAAA7B,QAAAgC,IAAAhC,OAAAa,UAAA,gBAAAmB,IAAmIA,GAE7U,SAAAE,EAAAF,GAWA,MAVA,mBAAAhC,QAAA,WAAA+B,EAAA/B,OAAAiC,UACAvD,EAAAD,QAAAyD,EAAA,SAAAF,GACA,OAAAD,EAAAC,IAGAtD,EAAAD,QAAAyD,EAAA,SAAAF,GACA,OAAAA,GAAA,mBAAAhC,QAAAgC,EAAAH,cAAA7B,QAAAgC,IAAAhC,OAAAa,UAAA,SAAAkB,EAAAC,IAIAE,EAAAF,GAGAtD,EAAAD,QAAAyD,mBChBA,IAAAC,EAAwBpD,EAAQ,IAEhCqD,EAAsBrD,EAAQ,IAE9BsD,EAAwBtD,EAAQ,IAMhCL,EAAAD,QAJA,SAAA6D,GACA,OAAAH,EAAAG,IAAAF,EAAAE,IAAAD,mCCDA,SAAAE,EAAAC,EAAAC,GACA,OAAAD,IAAAC,EAmBA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,UAAAzB,OAAA,QAAA0B,IAAAD,UAAA,GAAAA,UAAA,GAAAN,EAEAQ,EAAA,KACAC,EAAA,KAEA,kBAOA,OA7BA,SAAAJ,EAAAK,EAAAC,GACA,UAAAD,GAAA,OAAAC,GAAAD,EAAA7B,SAAA8B,EAAA9B,OACA,SAKA,IADA,IAAAA,EAAA6B,EAAA7B,OACAnC,EAAA,EAAiBA,EAAAmC,EAAYnC,IAC7B,IAAA2D,EAAAK,EAAAhE,GAAAiE,EAAAjE,IACA,SAIA,SAUAkE,CAAAP,EAAAG,EAAAF,aAEAG,EAAAL,EAAAS,MAAA,KAAAP,YAGAE,EAAAF,UACAG,GAmBA,SAAAK,EAAAC,GACA,QAAAC,EAAAV,UAAAzB,OAAAoC,EAAAC,MAAAF,EAAA,EAAAA,EAAA,KAAAG,EAAA,EAA8FA,EAAAH,EAAaG,IAC3GF,EAAAE,EAAA,GAAAb,UAAAa,GAGA,kBACA,QAAAC,EAAAd,UAAAzB,OAAAwC,EAAAH,MAAAE,GAAAE,EAAA,EAAuEA,EAAAF,EAAeE,IACtFD,EAAAC,GAAAhB,UAAAgB,GAGA,IAAAC,EAAA,EACAC,EAAAH,EAAAI,MACAC,EA3BA,SAAAL,GACA,IAAAK,EAAAR,MAAAS,QAAAN,EAAA,IAAAA,EAAA,GAAAA,EAEA,IAAAK,EAAAE,MAAA,SAAAC,GACA,yBAAAA,IACG,CACH,IAAAC,EAAAJ,EAAAK,IAAA,SAAAF,GACA,cAAAA,IACKG,KAAA,MACL,UAAAC,MAAA,wGAAAH,EAAA,KAGA,OAAAJ,EAeAQ,CAAAb,GAEAc,EAAApB,EAAAF,WAAAN,EAAA,YAGA,OAFAgB,IAEAC,EAAAX,MAAA,KAAAP,aACK8B,OAAAnB,IAGLoB,EAAAlC,EAAA,WAIA,IAHA,IAAAmC,EAAA,GACAzD,EAAA6C,EAAA7C,OAEAnC,EAAA,EAAqBA,EAAAmC,EAAYnC,IAEjC4F,EAAAC,KAAAb,EAAAhF,GAAAmE,MAAA,KAAAP,YAIA,OAAA6B,EAAAtB,MAAA,KAAAyB,KAUA,OAPAD,EAAAb,aACAa,EAAAd,eAAA,WACA,OAAAA,GAEAc,EAAAG,oBAAA,WACA,OAAAjB,EAAA,GAEAc,GAjGAnG,EAAA4B,YAAA,EACA5B,EAAAiE,iBACAjE,EAAA4E,wBACA5E,EAAAuG,yBAoGA,SAAAC,GACA,IAAAC,EAAArC,UAAAzB,OAAA,QAAA0B,IAAAD,UAAA,GAAAA,UAAA,GAAAsC,EAEA,oBAAAF,EACA,UAAAT,MAAA,gIAAAS,GAEA,IAAAG,EAAAzF,OAAA0F,KAAAJ,GACA,OAAAC,EAAAE,EAAAd,IAAA,SAAA9D,GACA,OAAAyE,EAAAzE,KACG,WACH,QAAA8E,EAAAzC,UAAAzB,OAAAmE,EAAA9B,MAAA6B,GAAAE,EAAA,EAAwEA,EAAAF,EAAeE,IACvFD,EAAAC,GAAA3C,UAAA2C,GAGA,OAAAD,EAAAE,OAAA,SAAAC,EAAAxF,EAAAyF,GAEA,OADAD,EAAAN,EAAAO,IAAAzF,EACAwF,GACK,OAnBL,IAAAP,EAAA1G,EAAA0G,eAAA9B,EAAAX,qBCnGC,SAAAjE,EAAAmH,GAAqC,aAEtC,SAAAC,EAAA3F,GACA,uBAAAA,GAAA,iBAAAA,EAGA,IAAA4F,EAEA,WACA,SAAAA,IACAC,KAAAC,OAAA,GAGA,IAAAC,EAAAH,EAAAjF,UAsBA,OApBAoF,EAAAC,IAAA,SAAA1F,EAAA2F,GACAJ,KAAAC,OAAAxF,GAAA2F,GAGAF,EAAAnG,IAAA,SAAAU,GACA,OAAAuF,KAAAC,OAAAxF,IAGAyF,EAAAG,OAAA,SAAA5F,UACAuF,KAAAC,OAAAxF,IAGAyF,EAAAI,MAAA,WACAN,KAAAC,OAAA,IAGAC,EAAAK,gBAAA,SAAAC,GACA,OAAAV,EAAAU,IAGAT,EA3BA,GA8BA,SAAAU,EAAAC,GACA,QAAA3D,IAAA2D,EACA,UAAAjC,MAAA,8CAGA,IAAAkC,OAAAC,UAAAF,OAAA,EACA,UAAAjC,MAAA,8DAIA,IAAAoC,EAEA,WACA,SAAAA,EAAAC,GACA,IAAAC,OAAA,IAAAD,EAAA,GAAsCA,EACtCJ,EAAAK,EAAAL,UAEAD,EAAAC,GACAV,KAAAC,OAAA,GACAD,KAAAgB,eAAA,GACAhB,KAAAiB,WAAAP,EAGA,IAAAR,EAAAW,EAAA/F,UAoCA,OAlCAoF,EAAAC,IAAA,SAAA1F,EAAA2F,GAKA,GAJAJ,KAAAC,OAAAxF,GAAA2F,EAEAJ,KAAAgB,eAAAjC,KAAAtE,GAEAuF,KAAAgB,eAAA3F,OAAA2E,KAAAiB,WAAA,CACA,IAAAC,EAAAlB,KAAAgB,eAAA,GACAhB,KAAAK,OAAAa,KAIAhB,EAAAnG,IAAA,SAAAU,GACA,OAAAuF,KAAAC,OAAAxF,IAGAyF,EAAAG,OAAA,SAAA5F,GACA,IAAAmF,EAAAI,KAAAgB,eAAAG,QAAA1G,GAEAmF,GAAA,GACAI,KAAAgB,eAAAI,OAAAxB,EAAA,UAGAI,KAAAC,OAAAxF,IAGAyF,EAAAI,MAAA,WACAN,KAAAC,OAAA,GACAD,KAAAgB,eAAA,IAGAd,EAAAK,gBAAA,SAAAC,GACA,OAAAV,EAAAU,IAGAK,EA/CA,GAkDAQ,EAEA,WACA,SAAAA,EAAAP,GACA,IAAAC,OAAA,IAAAD,EAAA,GAAsCA,EACtCJ,EAAAK,EAAAL,UAEAD,EAAAC,GACAV,KAAAC,OAAA,GACAD,KAAAgB,eAAA,GACAhB,KAAAiB,WAAAP,EAGA,IAAAR,EAAAmB,EAAAvG,UAgDA,OA9CAoF,EAAAC,IAAA,SAAA1F,EAAA2F,GAKA,GAJAJ,KAAAC,OAAAxF,GAAA2F,EAEAJ,KAAAsB,kBAAA7G,GAEAuF,KAAAgB,eAAA3F,OAAA2E,KAAAiB,WAAA,CACA,IAAAC,EAAAlB,KAAAgB,eAAA,GACAhB,KAAAK,OAAAa,KAIAhB,EAAAnG,IAAA,SAAAU,GAGA,OAFAuF,KAAAsB,kBAAA7G,GAEAuF,KAAAC,OAAAxF,IAGAyF,EAAAG,OAAA,SAAA5F,GACAuF,KAAAuB,gBAAA9G,UAEAuF,KAAAC,OAAAxF,IAGAyF,EAAAI,MAAA,WACAN,KAAAC,OAAA,GACAD,KAAAgB,eAAA,IAGAd,EAAAoB,kBAAA,SAAA7G,GACAuF,KAAAuB,gBAAA9G,GAEAuF,KAAAgB,eAAAjC,KAAAtE,IAGAyF,EAAAqB,gBAAA,SAAA9G,GACA,IAAAmF,EAAAI,KAAAgB,eAAAG,QAAA1G,GAEAmF,GAAA,GACAI,KAAAgB,eAAAI,OAAAxB,EAAA,IAIAM,EAAAK,gBAAA,SAAAC,GACA,OAAAV,EAAAU,IAGAa,EA3DA,GA8DAG,EAEA,WACA,SAAAA,IACAxB,KAAAC,OAAA,IAAAwB,IAGA,IAAAvB,EAAAsB,EAAA1G,UAkBA,OAhBAoF,EAAAC,IAAA,SAAA1F,EAAA2F,GACAJ,KAAAC,OAAAE,IAAA1F,EAAA2F,IAGAF,EAAAnG,IAAA,SAAAU,GACA,OAAAuF,KAAAC,OAAAlG,IAAAU,IAGAyF,EAAAG,OAAA,SAAA5F,GACAuF,KAAAC,OAAAyB,OAAAjH,IAGAyF,EAAAI,MAAA,WACAN,KAAAC,OAAAK,SAGAkB,EAvBA,GA0BAG,EAEA,WACA,SAAAA,EAAAb,GACA,IAAAC,OAAA,IAAAD,EAAA,GAAsCA,EACtCJ,EAAAK,EAAAL,UAEAD,EAAAC,GACAV,KAAAC,OAAA,IAAAwB,IACAzB,KAAAiB,WAAAP,EAGA,IAAAR,EAAAyB,EAAA7G,UAwBA,OAtBAoF,EAAAC,IAAA,SAAA1F,EAAA2F,GAGA,GAFAJ,KAAAC,OAAAE,IAAA1F,EAAA2F,GAEAJ,KAAAC,OAAA2B,KAAA5B,KAAAiB,WAAA,CACA,IAAAC,EAAAlB,KAAAC,OAAAX,OAAAnC,OAAAhD,MAEA6F,KAAAK,OAAAa,KAIAhB,EAAAnG,IAAA,SAAAU,GACA,OAAAuF,KAAAC,OAAAlG,IAAAU,IAGAyF,EAAAG,OAAA,SAAA5F,GACAuF,KAAAC,OAAAyB,OAAAjH,IAGAyF,EAAAI,MAAA,WACAN,KAAAC,OAAAK,SAGAqB,EAlCA,GAqCAE,EAEA,WACA,SAAAA,EAAAf,GACA,IAAAC,OAAA,IAAAD,EAAA,GAAsCA,EACtCJ,EAAAK,EAAAL,UAEAD,EAAAC,GACAV,KAAAC,OAAA,IAAAwB,IACAzB,KAAAiB,WAAAP,EAGA,IAAAR,EAAA2B,EAAA/G,UAiCA,OA/BAoF,EAAAC,IAAA,SAAA1F,EAAA2F,GAGA,GAFAJ,KAAAC,OAAAE,IAAA1F,EAAA2F,GAEAJ,KAAAC,OAAA2B,KAAA5B,KAAAiB,WAAA,CACA,IAAAC,EAAAlB,KAAAC,OAAAX,OAAAnC,OAAAhD,MAEA6F,KAAAK,OAAAa,KAIAhB,EAAAnG,IAAA,SAAAU,GACA,IAAAN,EAAA6F,KAAAC,OAAAlG,IAAAU,GASA,OANAuF,KAAAC,OAAA6B,IAAArH,KACAuF,KAAAK,OAAA5F,GAEAuF,KAAAC,OAAAE,IAAA1F,EAAAN,IAGAA,GAGA+F,EAAAG,OAAA,SAAA5F,GACAuF,KAAAC,OAAAyB,OAAAjH,IAGAyF,EAAAI,MAAA,WACAN,KAAAC,OAAAK,SAGAuB,EA3CA,GA8CAE,EAAAhC,EAEAiC,EAAA,WACA,UAoFAtJ,EAAAuJ,QAjFA,WACA,QAAAzE,EAAAV,UAAAzB,OAAAwC,EAAA,IAAAH,MAAAF,GAAAG,EAAA,EAAwEA,EAAAH,EAAaG,IACrFE,EAAAF,GAAAb,UAAAa,GAGA,gBAAAuE,EAAAC,GAMA,QALA,IAAAA,IACAA,EAAA,IAIA,mBAAAA,EACA,UAAA1D,MAAA,wIAIA,IAAAV,EAAA,EACAC,EAAAH,EAAAI,MACAC,EAAAR,MAAAS,QAAAN,EAAA,IAAAA,EAAA,GAAAA,EAAAe,SAOAf,EAAAkB,KALA,WAEA,OADAhB,IACAC,EAAAX,WAAA,EAAAP,aAIA,IAAAsF,EAAAD,EAAAE,aAAA,IAAAN,EACA5C,EAAAgD,EAAAhD,iBAAAU,EAAAT,eACAmB,EAAA6B,EAAA7B,iBAAAyB,EAEAnD,EAAA,WACA,IAAA2B,EAAA0B,EAAA7E,WAAA,EAAAP,WAEA,GAAAyD,EAAAC,GAAA,CACA,IAAA8B,EAAAF,EAAArI,IAAAyG,GAOA,YALAzD,IAAAuF,IACAA,EAAAnD,EAAA9B,WAAA,EAAAQ,GACAuE,EAAAjC,IAAAK,EAAA8B,IAGAA,EAAAjF,WAAA,EAAAP,WAGAyF,QAAAC,KAAA,oCAAAhC,EAAA,iDAiCA,OA5BA3B,EAAA4D,oBAAA,WACA,IAAAjC,EAAA0B,EAAA7E,WAAA,EAAAP,WAEA,OAAAsF,EAAArI,IAAAyG,IAGA3B,EAAA6D,uBAAA,WACA,IAAAlC,EAAA0B,EAAA7E,WAAA,EAAAP,WACAsF,EAAA/B,OAAAG,IAGA3B,EAAA8D,WAAA,WACAP,EAAA9B,SAGAzB,EAAAb,aACAa,EAAAX,eACAW,EAAAuD,QAEAvD,EAAAd,eAAA,WACA,OAAAA,GAGAc,EAAAG,oBAAA,WACA,OAAAjB,EAAA,GAGAc,EAAAqD,cACArD,IAKAnG,EAAAqH,kBACArH,EAAAkK,gBAAA7C,EACArH,EAAAmI,kBACAnI,EAAA2I,iBACA3I,EAAA8I,eACA9I,EAAAiJ,eACAjJ,EAAAmJ,cACAnJ,EAAAmK,gBAAAhC,EACAnI,EAAAoK,eAAAjB,EAEAjI,OAAAC,eAAAnB,EAAA,cAAgDyB,OAAA,IA5Xc1B,CAAAC,EAAoBM,EAAQ,mBCmB1FL,EAAAD,QAJA,SAAAyB,GACA,OAAAA,kBCMA,IAAAgE,EAAAT,MAAAS,QAEAxF,EAAAD,QAAAyF,mBCzBA,IAAA4E,EAAe/J,EAAQ,IACvBgK,EAAmBhK,EAAQ,GAC3BiK,EAAcjK,EAAQ,IACtBkK,EAAiBlK,EAAQ,IACzBmK,EAAgBnK,EAAQ,IACxBoK,EAAsBpK,EAAQ,IAC9BqK,EAAerK,EAAQ,GA2BvBL,EAAAD,QAhBA,SAAA4K,EAAAC,EAAAC,GACA,IAAA5D,GAAA,EACA2D,EAAAR,EAAAQ,EAAAlI,OAAAkI,EAAA,CAAAF,GAAAF,EAAAH,IAEA,IAAAS,EAAAR,EAAAK,EAAA,SAAAnJ,EAAAM,EAAA6I,GAIA,OAAYI,SAHZX,EAAAQ,EAAA,SAAAI,GACA,OAAAA,EAAAxJ,KAEYyF,UAAAzF,WAGZ,OAAA+I,EAAAO,EAAA,SAAA7I,EAAAgJ,GACA,OAAAR,EAAAxI,EAAAgJ,EAAAJ,qBCTA7K,EAAAD,QAJA,SAAAyB,GACA,OAAAA,oBCjBA,IAAA0J,EAAkB7K,EAAQ,IAC1B8K,EAAiB9K,EAAQ,IACzBgK,EAAmBhK,EAAQ,GAC3BmF,EAAcnF,EAAQ,GACtB+K,EAAa/K,EAAQ,IAyCrBL,EAAAD,QALA,SAAA4K,EAAAU,GAEA,OADA7F,EAAAmF,GAAAO,EAAAC,GACAR,EAAAS,EAAAf,EAAAgB,EAAA,qBClBArL,EAAAD,QAfA,SAAAuL,EAAAD,GAMA,IALA,IAAApE,GAAA,EACAvE,EAAA,MAAA4I,EAAA,EAAAA,EAAA5I,OACA6I,EAAA,EACAT,EAAA,KAEA7D,EAAAvE,GAAA,CACA,IAAAlB,EAAA8J,EAAArE,GACAoE,EAAA7J,EAAAyF,EAAAqE,KACAR,EAAAS,KAAA/J,GAGA,OAAAsJ,oBCrBA,IAAAU,EAAkBnL,EAAQ,GAC1BmF,EAAcnF,EAAQ,GA6CtBL,EAAAD,QAdA,SAAA4K,EAAAC,EAAAC,EAAAY,GACA,aAAAd,EACA,IAEAnF,EAAAoF,KACAA,EAAA,MAAAA,EAAA,IAAAA,IAGApF,EADAqF,EAAAY,OAAArH,EAAAyG,KAEAA,EAAA,MAAAA,EAAA,IAAAA,IAEAW,EAAAb,EAAAC,EAAAC,sBC3CA,IAAAa,EAAkBrL,EAAQ,IAC1BmL,EAAkBnL,EAAQ,GAC1BsL,EAAetL,EAAQ,IACvBuL,EAAqBvL,EAAQ,IA+B7BwL,EAAAF,EAAA,SAAAhB,EAAAC,GACA,SAAAD,EACA,SAEA,IAAAjI,EAAAkI,EAAAlI,OAMA,OALAA,EAAA,GAAAkJ,EAAAjB,EAAAC,EAAA,GAAAA,EAAA,IACAA,EAAA,GACGlI,EAAA,GAAAkJ,EAAAhB,EAAA,GAAAA,EAAA,GAAAA,EAAA,MACHA,EAAA,CAAAA,EAAA,KAEAY,EAAAb,EAAAe,EAAAd,EAAA,SAGA5K,EAAAD,QAAA8L,iBCrCA7L,EAAAD,QAVA,SAAA6D,GACA,GAAAmB,MAAAS,QAAA5B,GAAA,CACA,QAAArD,EAAA,EAAAuL,EAAA,IAAA/G,MAAAnB,EAAAlB,QAAiDnC,EAAAqD,EAAAlB,OAAgBnC,IACjEuL,EAAAvL,GAAAqD,EAAArD,GAGA,OAAAuL,mBCFA9L,EAAAD,QAJA,SAAAgM,GACA,GAAAzK,OAAAiC,YAAAtC,OAAA8K,IAAA,uBAAA9K,OAAAkB,UAAA6J,SAAAtL,KAAAqL,GAAA,OAAAhH,MAAAkH,KAAAF,mBCGA/L,EAAAD,QAJA,WACA,UAAAmM,UAAA,mECuBAlM,EAAAD,QAfA,SAAAuL,EAAAD,GAMA,IALA,IAAApE,GAAA,EACAvE,EAAA,MAAA4I,EAAA,EAAAA,EAAA5I,OACA6I,EAAA,EACAT,EAAA,KAEA7D,EAAAvE,GAAA,CACA,IAAAlB,EAAA8J,EAAArE,GACAoE,EAAA7J,EAAAyF,EAAAqE,KACAR,EAAAS,KAAA/J,GAGA,OAAAsJ,kBCGA9K,EAAAD,QAfA,SAAAuL,EAAAD,GAMA,IALA,IAAApE,GAAA,EACAvE,EAAA,MAAA4I,EAAA,EAAAA,EAAA5I,OACA6I,EAAA,EACAT,EAAA,KAEA7D,EAAAvE,GAAA,CACA,IAAAlB,EAAA8J,EAAArE,GACAoE,EAAA7J,EAAAyF,EAAAqE,KACAR,EAAAS,KAAA/J,GAGA,OAAAsJ,kBCpBA,IAAAqB,EAAA,sBAsCAnM,EAAAD,QAhBA,SAAAsL,GACA,sBAAAA,EACA,UAAAa,UAAAC,GAEA,kBACA,IAAAC,EAAAjI,UACA,OAAAiI,EAAA1J,QACA,cAAA2I,EAAA3K,KAAA2G,MACA,cAAAgE,EAAA3K,KAAA2G,KAAA+E,EAAA,IACA,cAAAf,EAAA3K,KAAA2G,KAAA+E,EAAA,GAAAA,EAAA,IACA,cAAAf,EAAA3K,KAAA2G,KAAA+E,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,OAAAf,EAAA3G,MAAA2C,KAAA+E,oBCfApM,EAAAD,QAXA,SAAAuL,EAAAN,GAKA,IAJA,IAAA/D,GAAA,EACAvE,EAAA,MAAA4I,EAAA,EAAAA,EAAA5I,OACAoI,EAAA/F,MAAArC,KAEAuE,EAAAvE,GACAoI,EAAA7D,GAAA+D,EAAAM,EAAArE,KAAAqE,GAEA,OAAAR,kBCGA9K,EAAAD,QAXA,SAAAuL,EAAAN,GAKA,IAJA,IAAA/D,GAAA,EACAvE,EAAA,MAAA4I,EAAA,EAAAA,EAAA5I,OACAoI,EAAA/F,MAAArC,KAEAuE,EAAAvE,GACAoI,EAAA7D,GAAA+D,EAAAM,EAAArE,KAAAqE,GAEA,OAAAR,kBCGA9K,EAAAD,QAVA,SAAAuL,EAAAe,GACA,IAAA3J,EAAA4I,EAAA5I,OAGA,IADA4I,EAAAgB,KAAAD,GACA3J,KACA4I,EAAA5I,GAAA4I,EAAA5I,GAAAlB,MAEA,OAAA8J,kBCJAtL,EAAAD,QANA,SAAAkE,GACA,gBAAAzC,GACA,OAAAyC,EAAAzC,sBCTA,IAAA+K,EAAuBlM,EAAQ,IA2C/BL,EAAAD,QA3BA,SAAAkC,EAAAgJ,EAAAJ,GAOA,IANA,IAAA5D,GAAA,EACAuF,EAAAvK,EAAA8I,SACA0B,EAAAxB,EAAAF,SACArI,EAAA8J,EAAA9J,OACAgK,EAAA7B,EAAAnI,SAEAuE,EAAAvE,GAAA,CACA,IAAAoI,EAAAyB,EAAAC,EAAAvF,GAAAwF,EAAAxF,IACA,GAAA6D,EACA,OAAA7D,GAAAyF,EACA5B,EAGAA,GAAA,QADAD,EAAA5D,IACA,KAUA,OAAAhF,EAAAgF,MAAAgE,EAAAhE,wBCxCA,IAAA0F,EAAetM,EAAQ,IAwCvBL,EAAAD,QA9BA,SAAAyB,EAAAyJ,GACA,GAAAzJ,IAAAyJ,EAAA,CACA,IAAA2B,OAAAxI,IAAA5C,EACAqL,EAAA,OAAArL,EACAsL,EAAAtL,KACAuL,EAAAJ,EAAAnL,GAEAwL,OAAA5I,IAAA6G,EACAgC,EAAA,OAAAhC,EACAiC,EAAAjC,KACAkC,EAAAR,EAAA1B,GAEA,IAAAgC,IAAAE,IAAAJ,GAAAvL,EAAAyJ,GACA8B,GAAAC,GAAAE,IAAAD,IAAAE,GACAN,GAAAG,GAAAE,IACAN,GAAAM,IACAJ,EACA,SAEA,IAAAD,IAAAE,IAAAI,GAAA3L,EAAAyJ,GACAkC,GAAAP,GAAAE,IAAAD,IAAAE,GACAE,GAAAL,GAAAE,IACAE,GAAAF,IACAI,EACA,SAGA,yBCpBAlN,EAAAD,QAJA,WACA,yBCQAC,EAAAD,QAJA,SAAAuL,GACA,OAAAA,KAAA5I,OAAA4I,EAAA,QAAAlH,oBCnBA,IAAAsG,EAAerK,EAAQ,GACvB+M,EAAe/M,EAAQ,IACvBgN,EAAkBhN,EAAQ,IAc1BL,EAAAD,QAJA,SAAAkE,EAAAqJ,GACA,OAAAD,EAAAD,EAAAnJ,EAAAqJ,EAAA5C,GAAAzG,EAAA,sBCbA,IAAAS,EAAYrE,EAAQ,IAGpBkN,EAAAC,KAAAC,IAgCAzN,EAAAD,QArBA,SAAAkE,EAAAqJ,EAAAI,GAEA,OADAJ,EAAAC,OAAAnJ,IAAAkJ,EAAArJ,EAAAvB,OAAA,EAAA4K,EAAA,GACA,WAMA,IALA,IAAAlB,EAAAjI,UACA8C,GAAA,EACAvE,EAAA6K,EAAAnB,EAAA1J,OAAA4K,EAAA,GACAhC,EAAAvG,MAAArC,KAEAuE,EAAAvE,GACA4I,EAAArE,GAAAmF,EAAAkB,EAAArG,GAEAA,GAAA,EAEA,IADA,IAAA0G,EAAA5I,MAAAuI,EAAA,KACArG,EAAAqG,GACAK,EAAA1G,GAAAmF,EAAAnF,GAGA,OADA0G,EAAAL,GAAAI,EAAApC,GACA5G,EAAAT,EAAAoD,KAAAsG,oBCXA3N,EAAAD,QAVA,SAAAkE,EAAA2J,EAAAxB,GACA,OAAAA,EAAA1J,QACA,cAAAuB,EAAAvD,KAAAkN,GACA,cAAA3J,EAAAvD,KAAAkN,EAAAxB,EAAA,IACA,cAAAnI,EAAAvD,KAAAkN,EAAAxB,EAAA,GAAAA,EAAA,IACA,cAAAnI,EAAAvD,KAAAkN,EAAAxB,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,OAAAnI,EAAAS,MAAAkJ,EAAAxB,mBCGApM,EAAAD,QAJA,SAAAyB,GACA,OAAAA,kBCAAxB,EAAAD,QAJA,WACA,mGCde,SAAA8N,EAAA/J,GACf,aAAAA,GAAA,iBAAAA,IAAA,IAAAA,EAAA,4BCSe,SAAAgK,EAAAC,GACf,gBAAAC,EAAAlK,GACA,WAAAK,UAAAzB,QAAkCmL,EAAc/J,GAChDkK,EAEAD,EAAArJ,MAAA2C,KAAAlD,YCfe,SAAA8J,EAAAjM,EAAA+L,GAEf,OAAA/L,GACA,OACA,kBACA,OAAA+L,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,GACA,OAAAH,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,GACA,OAAAJ,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,EAAAC,GACA,OAAAL,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,EAAAC,EAAAC,GACA,OAAAN,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAP,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAR,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAT,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAV,EAAArJ,MAAA2C,KAAAlD,YAEA,OACA,gBAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAX,EAAArJ,MAAA2C,KAAAlD,YAEA,QACA,gBAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAZ,EAAArJ,MAAA2C,KAAAlD,YAEA,QACA,UAAA2B,MAAA,gFCrCe,SAAA8I,EAAAb,GACf,gBAAAc,EAAA/K,EAAAC,GACA,OAAAI,UAAAzB,QACA,OACA,OAAAmM,EACA,OACA,OAAehB,EAAc/J,GAAA+K,EAAWf,EAAO,SAAAgB,GAC/C,OAAAf,EAAAjK,EAAAgL,KAEA,QACA,OAAejB,EAAc/J,IAAO+J,EAAc9J,GAAA8K,EAAWhB,EAAc/J,GAAMgK,EAAO,SAAAiB,GACxF,OAAAhB,EAAAgB,EAAAhL,KACa8J,EAAc9J,GAAM+J,EAAO,SAAAgB,GACxC,OAAAf,EAAAjK,EAAAgL,KACSf,EAAAjK,EAAAC,KCsBT,IAMeiL,EANWJ,EAAO,SAAAlM,EAAAqL,GACjC,WAAArL,EACWoL,EAAOC,GAETE,EAAMvL,ECtCA,SAAAuM,EAAAvM,EAAAwM,EAAAnB,GACf,kBAKA,IAJA,IAAAoB,EAAA,GACAC,EAAA,EACAC,EAAA3M,EACA4M,EAAA,EACAA,EAAAJ,EAAAxM,QAAA0M,EAAAjL,UAAAzB,QAAA,CACA,IAAAoI,EACAwE,EAAAJ,EAAAxM,UAA6CmL,EAAcqB,EAAAI,KAAAF,GAAAjL,UAAAzB,QAC3DoI,EAAAoE,EAAAI,IAEAxE,EAAA3G,UAAAiL,GACAA,GAAA,GAEAD,EAAAG,GAAAxE,EACW+C,EAAc/C,KACzBuE,GAAA,GAEAC,GAAA,EAEA,OAAAD,GAAA,EAAAtB,EAAArJ,MAAA2C,KAAA8H,GAAkDlB,EAAMoB,EAAAJ,EAAAvM,EAAAyM,EAAApB,KDkBhCkB,CAAOvM,EAAA,GAAAqL,MEJhBwB,EAHUzB,EAAO,SAAAC,GAChC,OAASiB,EAAMjB,EAAArL,OAAAqL,KClBAyB,EAAA,CAACC,4BAAA,GCvBhB,SAAAC,EAAApM,EAAAyK,GACA,QAAAjM,KAAAwB,EACAA,EAAAlB,eAAAN,IACAiM,EAAAzK,EAAAxB,MASA,IAAA6N,EAAA,+BAYO,SAAAC,EAAAtM,EAAAuM,GACP,QAAAA,GACAvM,EAAAqM,KAAAE,EAEA,IAKOC,EALP,mBAAAxO,OAAA,WACA,OAAAA,OAAA,YACC,WACD,UAaA,SAAAyO,EAAAC,EAAAH,GAKA,OAJAA,GAVA,SAAAvM,EAAAuM,GACA5O,OAAAC,eAAAoC,EAAAqM,EAAA,CACAnO,MAAAqO,EACAjN,cAAA,EACAzB,YAAA,IAOA8O,CAAAD,EAAAH,GAGAG,EAGA,SAAAE,EAAAC,GACA,OAAAA,aAAApL,MAIAoL,EAHA,CAAAA,GAMA,IAAAC,EAAA,IAEA,SAAAC,EAAAC,GACA,uBAAAA,GACA,IAAAA,EAAA9H,QAAA4H,GACA,CAAAE,GAGAA,EAAAC,MAAAH,GAGAE,EAGA,SAAAE,EAAA1O,EAAAN,EAAA8B,GAEA,OADAA,EAAAxB,GAAAN,EACA8B,EA4GA,SAAAmN,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAX,EAAAS,GAwBA,OAtBAD,EACAG,EAAAC,QAAA,SAAAC,GACArB,EAAAqB,EAAA,SAAAvP,EAAAM,GAEA,IAAAkP,EADAN,GAAAE,EAAAxO,eAAAN,IAIAkP,EADqB,WAAPC,IAAOzP,GACrBiP,EAAAC,EAAA,CAAAlP,GAAAoP,EAAA9O,IAEAN,EAGAoP,EAAA9O,GAAAkP,GAEAJ,EAAA9O,GAAAN,MAKAP,OAAAiQ,OAAAxM,MAAAzD,OAAA,CAAA2P,GAAA3K,OAAiDkL,IAAkBN,KAGnED,EAGA,IAAAQ,EAAAX,EAAA1O,KAAA,SACAsP,EAAAZ,EAAA1O,KAAA,SAEA,SAAAuP,EAAAC,EAAAjO,GAKA,OAJA4M,EAAAqB,GACAT,QAAA,SAAAhP,UACAwB,EAAAxB,KAEAwB,EAGA,SAAAkO,EAAAlO,EAAA2H,EAAAnJ,GACA,OAAAwB,EAAAxB,KAAAmJ,EAAAnJ,GAGA,SAAA2P,EAAAf,EAAAb,EAAAc,EAAArN,GACA,GAAAsM,EAAAtM,EAAAuM,GAAA,OAAAY,EAAAC,EAAAC,EAAArN,GACA,IAAAuN,EAAAX,EAAAS,GACAe,GAAA,EACAC,EAAArO,EAEAsO,EAAA,WACAF,IACAA,GAAA,EAEA3B,EADA4B,EAAA1Q,OAAAiQ,OAAA,GAAmC5N,GACnCuM,KA+BA,OA3BAgB,EAAAC,QAAA,SAAAC,GACArB,EAAAqB,EAAA,SAAAc,EAAA/P,GACA,GAAA4O,GAAApN,EAAAlB,eAAAN,GAAA,CACA,IAAAgQ,EAAAH,EAAA7P,GAEA,GAAmB,WAAPmP,IAAOY,mBAAA9M,OAAA,CACnB,GAAAyM,EAAAG,EAAAZ,EAAAjP,GAAA,CACA,IAAAiQ,EAAAN,EAAAf,EAAAb,EAAAgC,EAAAC,GAEAC,IAAAD,IACAF,IACAD,EAAA7P,GAAAiQ,GAIA,UAIAP,EAAAG,EAAAZ,EAAAjP,KACA8P,IACAD,EAAA7P,GAAA+P,OAMAF,EAGA,IAAAK,EAAAP,EAAA1P,KAAA,SAGA,SAAAkQ,EAAApC,EAAA5I,EAAAzF,EAAAoC,GACA,GAAAgM,EAAAhM,EAAAiM,GAAA,OAAAW,EAAAvJ,EAAAzF,EAAAoC,GACA,GAAAA,EAAAqD,KAAAzF,EAAA,OAAAoC,EACA,IAAAsO,EAvQA,SAAAtO,GAGA,IAFA,IAAAuO,EAAA,IAAApN,MAAAnB,EAAAlB,QAEAnC,EAAA,EAAiBA,EAAAqD,EAAAlB,OAAgBnC,IACjC4R,EAAA5R,GAAAqD,EAAArD,GAGA,OAAA4R,EAgQAC,CAAAxO,GAGA,OAFAsO,EAAAjL,GAAAzF,EACAuO,EAAAmC,EAAArC,GACAqC,EAmCA,SAAAG,EAAApO,EAAAL,GAIA,IAHA,IAAA0O,EAAA,EACAC,EAAA,EAEAD,EAAA1O,EAAAlB,QAAA,CAGAuB,EAFAL,EAAA0O,GAEAC,GAGAD,IAFA1O,EAAA6E,OAAA6J,EAAA,GAKAC,IAGA,OAAA3O,EAGA,SAAA4O,EAAAvL,EAAAwL,EAAAC,EAAA9O,GACA,IAAA+O,EAAAzC,EAAAwC,GAEA,OADA9O,EAAA6E,OAAA/D,MAAAd,EAAA,CAAAqD,EAAAwL,GAAAxM,OAAoDkL,IAAkBwB,KACtE/O,EAGA,SAAAgP,EAAA3L,EAAAyL,EAAA9O,GACA,OAAA4O,EAAAvL,EAAA,EAAAyL,EAAA9O,GAGA,SAAAiP,EAAAhD,EAAA5I,EAAAwL,EAAAC,EAAA9O,GACA,GAAAgM,EAAAhM,EAAAiM,GAAA,OAAA2C,EAAAvL,EAAAwL,EAAAC,EAAA9O,GACA,IAAA+O,EAAAzC,EAAAwC,GACAR,EAAAtO,EAAAkP,QAGA,OAFA/C,EAAAmC,EAAArC,GACAqC,EAAAzJ,OAAA/D,MAAAwN,EAAA,CAAAjL,EAAAwL,GAAAxM,OAA0DkL,IAAkBwB,KAC5ET,EAGA,SAAAa,EAAAlD,EAAA5I,EAAAyL,EAAA9O,GACA,OAAAgM,EAAAhM,EAAAiM,GAAA+C,EAAA3L,EAAAyL,EAAA9O,GACAiP,EAAAhD,EAAA5I,EAAA,EAAAyL,EAAA9O,GAeA,IAAAoP,EAAA,CAEAC,MApGAxB,EAAA1P,KAAA,SAqGAmR,UAAAlB,EACAmB,KAjFA,SAAAtD,EAAA0B,EAAAjO,GACA,GAAAsM,EAAAtM,EAAAuM,GAAA,OAAAyB,EAAAC,EAAAjO,GACA,IACA8P,EADAlD,EAAAqB,GACA8B,OAAA,SAAAvR,GACA,OAAAwB,EAAAlB,eAAAN,KAGA,OAAAsR,EAAA1Q,OAAA,OAAAY,EACA,IAAAgQ,EAAArS,OAAAiQ,OAAA,GAA+B5N,GAK/B,OAJA8P,EAAAtC,QAAA,SAAAhP,UACAwR,EAAAxR,KAEAiO,EAAAuD,EAAAzD,GACAyD,GAqEAC,MAjPA,SAAA1D,EAAA2D,EAAAhS,EAAA8B,GACA,IAAAgN,EAAAD,EAAAmD,GACA1B,EAxBA,SAAA0B,EAAAlQ,GAIA,IAHA,IAAAgN,EAAAD,EAAAmD,GACAC,EAAAnQ,EAEA/C,EAAA,EAAiBA,EAAA+P,EAAA5N,OAAoBnC,IAAA,CACrC,IACAmT,EAAAD,EADAnD,EAAA/P,IAGA,GAAAA,IAAA+P,EAAA5N,OAAA,EACA,OAAAgR,EAGA,GAAe,WAAPzC,IAAOyC,GAGf,OAFAD,EAAAC,GAWAC,CAAArD,EAAAhN,GACA,GAAA9B,IAAAsQ,EAAA,OAAAxO,EACA,IACAmQ,EADAG,EAAAtD,EAAA5N,OASAmR,EALAJ,EADA7D,EAAAtM,EAAAuM,GACAvM,EAEArC,OAAAiQ,OAAAnB,EAAA,GAA2CF,GAAAvM,GAqC3C,OAjCAgN,EAAAQ,QAAA,SAAAgD,EAAAC,GACA,GAAAA,IAAAH,EAAA,GAKA,IAAAF,EAAAD,EAAAK,GAEAE,EAAmB/C,IAAOyC,GAE1B,cAAAM,EAAA,CAYA,iBAAAA,EAAA,CACA,IAAAC,EAAAlE,EAAA,GAAuCF,GAIvC,OAFA4D,EAAAK,GAAAG,OACAR,EAAAQ,GAIA,IAAAC,EAAA,GAAAjO,OAAAqK,EAAAyD,EAAA,QAAA9N,OAAA6N,GACA,UAAAhO,MAAA,oEAAAG,OAAAiO,EAAA,MApBA,GAAAtE,EAAA8D,EAAA7D,GACA4D,EAAAC,MACO,CACP,IAAAJ,EAAAvD,EAAA,GAAwCF,GACxC4D,EAAAK,GAAA7S,OAAAiQ,OAAAoC,EAAAI,GACAD,EAAAH,QAdAG,EAAAK,GAAAtS,IA+BAqS,GAoMAM,OAAApB,EACA3M,KApBA,SAAAyJ,EAAA8C,EAAA/O,GACA,OAAAmP,EAAAlD,EAAAjM,EAAAlB,OAAAiQ,EAAA/O,IAoBAyP,OAjBA,SAAAxD,EAAA5L,EAAAL,GACA,GAAAgM,EAAAhM,EAAAiM,GAAA,OAAAwC,EAAApO,EAAAL,GACA,IAAAsO,EAAAtO,EAAAyP,OAAApP,GACA,OAAAiO,EAAAxP,SAAAkB,EAAAlB,OAAAkB,GACAmM,EAAAmC,EAAArC,GACAqC,IAaAzJ,OAAAoK,EAEArL,IAnGA,SAAAqI,EAAA/N,EAAAN,EAAA8B,GACA,GApRA,SAAA9B,GACA,OAAAA,GAAyB,WAAPyP,IAAOzP,IAAA,iBAAAA,EAAAkB,QAAAlB,EAAAkB,QAAA,GAAAlB,EAAAkB,OAAA,KAmRzB0R,CAAA9Q,GAAA,OAAA2O,EAAApC,EAAA/N,EAAAN,EAAA8B,GACA,GAAAsM,EAAAtM,EAAAuM,GAAA,OAAAW,EAAA1O,EAAAN,EAAA8B,GACA,GAAAA,EAAAxB,KAAAN,EAAA,OAAA8B,EACA,IAAAgQ,EAAArS,OAAAiQ,OAAA,GAA+B5N,GAG/B,OAFAyM,EAAAuD,EAAAzD,GACAyD,EAAAxR,GAAAN,EACA8R,IA8FAe,EAAA,CAEApB,MAAA7B,EACA8B,UAAA7B,EACA8B,KAAA7B,EACAiC,MAtTA,SAAAC,EAAAhS,EAAA8B,GAQA,IAPA,IAAAgR,EAAAjE,EAAAmD,GACAI,EAAAU,EAAA5R,OACA6R,GAAA,EACAR,EAAA,EACAN,EAAAnQ,EACAwQ,EAAAQ,EAAAP,IAEAQ,GACA,GAAAR,IAAAH,EAAA,EACAH,EAAAK,GAAAtS,EACA+S,GAAA,MACK,CACL,IAAAP,EAAqB/C,IAAOwC,EAAAK,IAE5B,iBAAAE,EAAA,CACA,IAAAV,EAAA,GACAvD,EAAAuD,EAAA,MACAG,EAAAK,GAAAR,OACO,cAAAU,EAAA,CACP,IAAAE,EAAA,GAAAjO,OAAAqO,EAAAP,EAAA,QAAA9N,OAAA6N,GACA,UAAAhO,MAAA,oEAAAG,OAAAiO,EAAA,MAGAT,IAAAK,GAEAA,EAAAQ,IADAP,GAKA,OAAAzQ,GA0RA6Q,OAAAvB,EACAxM,KAnFA,SAAAsM,EAAA9O,GACA,IAAA+O,EAAAzC,EAAAwC,GAEA,OADA9O,EAAAwC,KAAA1B,MAAAd,EAAsBuN,IAAkBwB,IACxC/O,GAiFAyP,OAAAhB,EACA5J,OAAA+J,EAEAhL,IAAAgJ,GA2CO,IACQgE,EA1CR,WACP,IAAAC,EAAAxT,OAAAiQ,OAAA,GAAqC8B,GACrCtD,EAAA+E,EAAA,SAAAjT,EAAAM,GACA2S,EAAA3S,GAAwByN,EAAK/N,EAAAO,KAAA,cAE7B,IAAA2S,EAAAzT,OAAAiQ,OAAA,GAAmCmD,GACnC3E,EAAAgF,EAAA,SAAAlT,EAAAM,GACA4S,EAAA5S,GAAsByN,EAAK/N,KAE3B,IAAAmT,EAAA1T,OAAAiQ,OAAA,GAAiC8B,GAwBjC,OAvBAtD,EAAAiF,EAAA,SAAAnT,EAAAM,GACA6S,EAAA7S,GAAoByN,EAAK/N,KAsBzBP,OAAAiQ,OAAAuD,EAAA,CACAG,QAAAF,EACAG,MAAAF,EACAG,QAtBA,SAAAC,EAAAC,GACA,IAAAC,EACAlH,EAEA,mBAAAgH,GACAhH,EAAAgH,EACAE,EAAAnF,MAEAmF,EAAAF,EACAhH,EAAAiH,GAGA,IAAAE,EAAAjU,OAAAiQ,OAAA,GAAmD8B,GAInD,OAHAtD,EAAAwF,EAAA,SAAA1T,EAAAM,GACAoT,EAAApT,GAAsCyN,EAAK/N,EAAAO,KAAA,KAAAkT,MAE3ClH,EAAAmH,IAOAC,GAAQ3F,EACRM,kBAGOsF,GC3bA,MAAMC,EAAS,mBACTC,EAAS,mBACTC,EAAS,mBAETC,EAAS,mBACTC,EAAU,oBAGVC,EAAU,UAGVC,EAAarU,OAAO,wBCJjC,SAASsU,EAAeC,GAIpB,OAHuC,mBAAjBjM,QAAQC,KACxBD,QAAQC,KAAK9H,KAAK6H,SAClBA,QAAQkM,IAAI/T,KAAK6H,UACTiM,GAmBlB,SAASE,EAAQC,EAAsBC,GACnC,OAAOD,IAjBSE,EAiByBD,GAhB3BE,OAAO,GAAGC,cAAgBF,EAAOpD,MAAM,IADzD,IAAoBoD,EA8BpB,SAASG,EAAiBL,GACtB,aAAcA,MAalB,SAASM,EAAeC,GACpB,WAAYA,MAOhB,SAASC,EAAyBC,GAC9B,OAAO,YAA8BrK,GACjC,OAAO/E,KAAKqP,cAAcD,MAAerK,IAIjD,SAASuK,EAA+BC,GACpC,OAAO,WAEH,OADWvP,KAAKqP,cACNE,IAYlB,SAASC,GAAsBC,EAAYC,GACvC,MAAMC,EAAeD,EAAcE,cAAcnE,SATrD,SAA2B7P,EAAUgB,GACjC,IAAIiT,EAAYjU,EAChB,KAAOiU,IAAcC,SAAShV,WAC1B8B,EAAKiT,GACLA,EAAYjW,OAAOmW,eAAeF,GAUtCG,CAAkBN,EAAgBO,IAC9B,IAAK,IAAI/W,EAAI,EAAGA,EAAIyW,EAAatU,OAAQnC,IAAK,CAC1C,IAAIgX,GAAU,EACd,MAAMd,EAAaO,EAAazW,GAC1BoC,EAAa1B,OAAOuW,yBAAyBF,EAAInV,UAAWsU,QACxC,IAAf9T,SACuB,IAAnBA,EAAWvB,KAClBuB,EAAWvB,IAAMuV,EAA+BF,GAChDxV,OAAOC,eAAe4V,EAAYL,EAAY9T,GAC9C4U,GAAU,GACyB,mBAArB5U,EAAWnB,QACzBsV,EAAWL,GAAcD,EAAyBC,GAClDc,GAAU,IAGdA,GACAP,EAAavO,OAAOlI,IAAK,MAazC,SAASkX,GAAgBC,GACrB,OAAIA,SAE4B,mBAAjBA,EAAOC,MACXD,EAAOC,QAEXD,EAuCX,MAAQ5H,cAAaA,IAAK8H,EAE1B,SAASC,IAAyBC,KAAEA,EAAFC,QAAQA,GAAWC,GACjD,GAAIF,IAAStC,EAAQ,OAAO,EAE5B,GAAuB,iBAAZuC,EAMP,OAAO,EAGX,IAAKA,EAAQ3V,eAAe4V,GAAY,OAAO,EAC/C,MAAMC,EAAiBF,EAAQC,GAC/B,OAAuB,OAAnBC,QACmB7T,IAAnB6T,EASR,SAASC,GAAUjW,EAAQgC,GACvB,OAAOhD,OAAOkX,QAAQlW,GACjB8E,OAAO,CAACqR,GAAYtW,EAAKN,MACtB4W,EAAUtW,GAAOmC,EAAKzC,GACf4W,GACR,ICnKX,MAAMC,GAAQ,WASV,SAAAA,EAAYvB,EAAYwB,EAASC,GAC7BtX,OAAOiQ,OAAO7J,KAAM,CAChByP,aACAwB,QAASA,GAAW,KAGxBjR,KAAKmR,MAAQD,EAfPF,EAkBHI,gBAAP,SAAuBhC,GACnBpP,KAAK4P,cAAgB5P,KAAK4P,cAAchR,OAAOwQ,IAnBzC,IAAAlP,EAAA8Q,EAAAlW,UAAA,OAAAoF,EAsBVmR,KAAA,SAAKJ,EAASK,GACV,MAAMJ,EAAOtX,OAAOiQ,OAAO,GAAI7J,KAAKmR,MAAOG,GAC3C,OAAO,IAAItR,KAAKlE,YAAYkE,KAAKyP,WAAYwB,EAASC,IAxBhDhR,EA2BVyE,SAAA,WAII,OAHA3E,KAAKuR,yCACYvR,KAAKwR,KAAKjT,IAAI,EAAGkT,QAASzR,KAAKyP,WAAWiC,OAAOD,GAAI9M,YACpEnG,KAAK,eA9BD0B,EAyCVyR,WAAA,WACI,OAAO3R,KAAKuR,aA1CNrR,EAiDV0R,aAAA,WACI,MAAQnC,WAAYoC,GAAe7R,KACnC,OAAOA,KAAKuR,YAAYhT,IACpBnD,GAAS,IAAIyW,EAAWzW,KApDtB8E,EA6DV4R,MAAA,WAEI,OADA9R,KAAKuR,YACEvR,KAAKwR,KAAKnW,QA/DX6E,EAwEV6R,OAAA,WACI,OAAOC,QAAQhS,KAAK8R,UAzEd5R,EAsFV+R,GAAA,SAAGrS,GACC,MAAQ6P,WAAYoC,GAAe7R,KAE7BwR,EAAOxR,KAAKuR,YAClB,GAAI3R,GAAS,GAAKA,EAAQ4R,EAAKnW,OAC3B,OAAO,IAAIwW,EAAWL,EAAK5R,KA3FzBM,EAqGVgS,MAAA,WACI,OAAOlS,KAAKiS,GAAG,IAtGT/R,EA6GViS,KAAA,WACI,MAAMX,EAAOxR,KAAKuR,YAClB,OAAOvR,KAAKiS,GAAGT,EAAKnW,OAAS,IA/GvB6E,EAsHVkS,IAAA,WACI,OAAOpS,KAAKqR,KAAKrR,KAAKiR,UAvHhB/Q,EAgIV8L,OAAA,SAAOqG,GAKH,MAAMC,EAA2C,iBAAdD,EAC7BxB,GAAUwB,EAAWjC,IACrBiC,EAEAE,EAAmB,CACrB9B,KAAMtC,EACNuC,QAAS4B,GAMb,OAAOtS,KAAKqR,KACRrR,KAAKiR,QAAQrS,OAAO2T,KAlJlBrS,EA6JVsS,QAAA,SAAQH,GAKJ,MAAMC,EAA2C,iBAAdD,EAC7BxB,GAAUwB,EAAWjC,IACrBiC,EACAI,EAAoB,CACtBhC,KAAMrC,EACNsC,QAAS4B,GAOb,OAAOtS,KAAKqR,KACRrR,KAAKiR,QAAQrS,OAAO6T,KA/KlBvS,EAwLVqR,UAAA,WACI,QAAuC,IAA5BvR,KAAKyP,WAAWiD,QACvB,MAAM,IAAIjU,MAAM,uBACUuB,KAAKyP,WAAWkD,8CACtC,0EACc3S,KAAKyP,WAAWkD,uCAChCnU,KAAK,KAEX,IAAKwB,KAAK4S,WAAY,CAClB,MAAMF,QACFA,EACAC,UAAWE,GACX7S,KAAKyP,WACHqD,EAAY,CACdD,QACA5B,QAASjR,KAAKiR,SAElBjR,KAAKwR,KAAOkB,EAAQK,MAAMD,GAAWtB,KACrCxR,KAAK4S,YAAa,EAEtB,OAAO5S,KAAKwR,MA5MNtR,EA8NV8S,QAAA,SAAQzP,EAAWC,GACf,MAAMyP,EAAoB,CACtBxC,KF7PY,qBE8PZC,QAAS,CAACnN,EAAWC,IAOzB,OAAOxD,KAAKqR,KACRrR,KAAKiR,QAAQrS,OAAOqU,KAzOlB/S,EAqPVgT,OAAA,SAAOxJ,GACH,MAAMgJ,QACFA,EACAC,UAAWE,GACX7S,KAAKyP,WAETiD,EAAQS,YAAY,CAChBC,OAAQpF,EACR+E,MAAO,CACHF,QACA5B,QAASjR,KAAKiR,SAElBP,QAAShH,IAGb1J,KAAK4S,YAAa,GApQZ1S,EA2QVwB,OAAA,WACI,MAAMgR,QACFA,EACAC,UAAWE,GACX7S,KAAKyP,WAETzP,KAAK4R,eAAenI,QAChB4J,GAASA,EAAMC,aAGnBZ,EAAQS,YAAY,CAChBC,OAAQnF,EACR8E,MAAO,CACHF,QACA5B,QAASjR,KAAKiR,WAItBjR,KAAK4S,YAAa,GA7RZ1S,EA8TV3B,IAAA,WACI,MAAM,IAAIE,MACN,uGAhUEyB,EAyUVuJ,QAAA,WACI,MAAM,IAAIhL,MACN,+GA3UE8U,IAAAvC,EAAA,EAAAvW,IAAA,aAAAV,IAAA,WAwSN,MAAM,IAAI0E,MACN,8JAzSE,CAAAhE,IAAA,WAAAV,IAAA,WAmTNwU,EACI,oGApTEyC,EAAA,GAiVdA,GAASpB,cAAgB,CACrB,QACA,KACA,MACA,OACA,QACA,SACA,UACA,UACA,SACA,UAGWoB,UChKAwC,OA5NF,WAUT,SAAAA,EAAYC,EAAQC,EAAIC,EAAOC,EAAeC,GAC1C7T,KAAKyT,OAASA,EACdzT,KAAK0T,GAAKA,EACV1T,KAAK2T,MAAQA,GAASD,EAAGI,gBACzB9T,KAAK+T,aAAe/T,KAAK2T,MAEzB3T,KAAK4T,cAAgB5B,QAAQ4B,GAC7B5T,KAAK6T,WAAaA,GAAcpL,IAEhCzI,KAAKgU,UAAY,GAEjBhU,KAAKiU,OAASR,EAAOS,kBAErBlU,KAAKmU,mBAAqBnU,KAAKiU,OAAO1V,IAAKkR,IACvC,SAAS2E,IACL,OAAOC,QAAQC,UAAU7E,EAAY3S,UAAWsX,GAUpD,OARAC,QAAQE,eAAeH,EAAkBtZ,UAAW2U,EAAW3U,WAC/DuZ,QAAQE,eAAeH,EAAmB3E,GAE1C7V,OAAOC,eAAemG,KAAMyP,EAAWkD,UAAW,CAC9C5Y,IAAK,IAAMqa,IAGfA,EAAkBI,QAAQxU,MACnBoU,IAnCN,IAAAlU,EAAAsT,EAAA1Y,UAAA,OAAAoF,EAuCTuU,gBAAA,SAAgB9B,GAIZ,OAHK3S,KAAKgU,UAAUrB,KAChB3S,KAAKgU,UAAUrB,GAAa,IAEzB3S,KAAKgU,UAAUrB,IA3CjBzS,EA8CTwU,aAAA,SAAa/B,EAAWgC,GACpB,MAAMC,EAAO5U,KAAKyU,gBAAgB9B,GAC7BiC,EAAKC,oBACND,EAAKC,kBAAoB,IAE7BF,EAASlL,QAASgI,IACdmD,EAAKC,kBAAkBpD,IAAM,KApD5BvR,EAkET4U,qBAAA,SAAqBnC,GACJ3S,KAAKyU,gBAAgB9B,GAC7BoC,kBAAmB,GApEnB7U,EA6ET8U,oBAAA,SAAoBC,GAChBA,EAAQxL,QAAQ,EAAEoJ,EAAOqC,EAAM/a,MAC3B,MAAMya,EAAO5U,KAAKyU,gBAAgB5B,GAC7B+B,EAAKO,kBACNP,EAAKO,gBAAkB,IAE3BP,EAAKO,gBAAgBD,GAAQ,IACrBN,EAAKO,gBAAgBD,IAAS,GAClC/a,MArFH+F,EA0GTiT,YAAA,SAAYiC,GACR,MAAMC,EAAKrV,KAAKsV,gBAAgBF,GAC1B3R,EAASzD,KAAK0T,GAAGR,OAAOkC,EAAYC,EAAIrV,KAAK2T,QAC7C4B,OAAEA,EAAF5B,MAAUA,EAAVjD,QAAiBA,GAAYjN,EAEnC,GAAI8R,IAAWlH,EACX,MAAM,IAAI5P,4CAA4C8W,eAAoB7E,KAK9E,OAFA1Q,KAAK2T,MAAQA,EAENjD,GArHFxQ,EAwHT6S,MAAA,SAAMD,GACF,MAAMrP,EAASzD,KAAK0T,GAAGX,MAAMD,EAAW9S,KAAK2T,OAI7C,OAFA3T,KAAKwV,qBAAqB1C,EAAWrP,GAE9BA,GA7HFvD,EAgIToV,gBAAA,SAAgBF,GACZ,MAAMxB,cAAEA,GAAkB5T,MACpBoT,OAAEA,GAAWgC,EACnB,IAAIvB,WAAEA,GAAe7T,KAIrB,MAHI,CAACgO,EAAQC,GAAQwH,SAASrC,KAC1BS,EAAapL,KAEV,CAAEoL,aAAYD,kBAvIhB1T,EA0ITsV,qBAAA,SAAqB1C,EAAWrP,GAC5B,MAAMoP,MAAEA,EAAF5B,QAASA,GAAY6B,GACrBtB,KAAEA,GAAS/N,GAEXiS,YAAEA,GAAgB1V,KAAK6S,GACvB8C,EAAc,IAAIC,IAAIpE,EAAKjT,IAC7BsX,GAAOA,EAAIH,KAGTI,EAAwB7E,EAAQ8E,KAAMC,IACxC,IAAKxF,GAAyBwF,EAAQN,GAClC,OAAO,EAEX,MAAMjE,EAAKuE,EAAOtF,QAAQgF,GAC1B,OAAW,OAAPjE,IAKJkE,EAAYM,IAAIxE,IACT,KAGL0D,EAAkB,IAClBF,QAAEA,GAAYjV,KAAK2T,MAAMd,GAC/B5B,EAAQxH,QAASuM,IACbpc,OAAO0F,KAAK2V,GAASxL,QAASyL,IAC1B,IAAK1E,GAAyBwF,EAAQd,GAAO,OAC7C,MAAM/a,EAAQ6b,EAAOtF,QAAQwE,GAC7BC,EAAgBpW,KAAK,CAAC8T,EAAOqC,EAAM/a,QAIvC2b,EAMA9V,KAAK0U,aAAa7B,EAAO8C,GAClBR,EAAgB9Z,QAIvB2E,KAAK0U,aAAa7B,EAAO8C,GACzB3V,KAAKgV,oBAAoBG,IAMzBnV,KAAK8U,qBAAqBjC,IA7LzB3S,EAsMTgW,aAAA,WAKI,OAJA3H,EACI,gHAGGvO,KAAK2T,OA3MPzT,EAmNTR,OAAA,WACI,MAAM,IAAIjB,MACN,mKArNC8U,IAAAC,EAAA,EAAA/Y,IAAA,yBAAAV,IAAA,WAyDL,OAAOiG,KAAKmU,mBACPnI,OAAO,EAAG2G,eAAgB3S,KAAKyU,gBAAgB9B,GAAWkC,mBAC1DnV,OACG,CAAC+D,GAAUkP,gBAAX,IACOlP,EACH0S,CAACxD,GAAY3S,KAAKyU,gBAAgB9B,GAAWkC,oBAC7C,MA/DP,CAAApa,IAAA,yBAAAV,IAAA,WAwEL,OAAOiG,KAAKmU,mBACPnI,OAAO,EAAG2G,eAAgB3S,KAAKyU,gBAAgB9B,GAAWoC,kBAC1DxW,IAAI,EAAGoU,eAAgBA,KA1EvB,CAAAlY,IAAA,kBAAAV,IAAA,WA2FL,OAAOiG,KAAKmU,mBACPnI,OAAO,EAAG2G,eAAgB3S,KAAKyU,gBAAgB9B,GAAWwC,iBAC1DzV,OAAO,CAAC+D,GAAUkP,gBAAX,IACDlP,EACH0S,CAACxD,GAAY3S,KAAKyU,gBAAgB9B,GAAWwC,kBAC7C,QAhGH3B,EAAA,sBCqCb,SAAS4C,GAA4BxH,EAAWyH,GAC5C,MAAO,CACHtc,MACI,MACI2Y,SACIyD,CAACE,GAAsBC,IAE3BtW,KAAKuW,YAELJ,CAACvH,GAAY4H,GACbxW,KAAKyW,QAET,OAAOH,EAAgB5E,OAAO8E,IAElCrW,IAAIhG,GACA6F,KAAKkT,OAAO,CACRiD,CAACvH,GAAYwB,GAAgBjW,OA8E7C,SAASuc,GACLC,EACAN,EACAO,EACAC,EACAC,GAEA,MAAO,CACH/c,MACI,MACI2Y,SACIyD,CAACQ,GAAwBI,EACzBZ,CAACE,GAAsBC,EACvBH,CAACS,GAAmBI,IAExBhX,KAAKuW,WAEHU,EAAYH,EACZR,EACAS,EACAG,EAAaJ,EACbC,EACAT,EAEAa,EAAuBL,EACvBD,EAAcO,GACdP,EAAcjS,KACdyS,EAAwBP,EACxBD,EAAcjS,KACdiS,EAAcO,GAEdE,EAAStX,KAAKsQ,QAEdiH,EAAYP,EAAahL,OAAO,CAClCmK,CAACgB,GAAuBG,IAOtBE,EAAqB,IAAI5B,IAC3B2B,EACK5F,aACApT,IAAItC,GAAOA,EAAIob,KAOlBI,EAAKP,EAAWlL,OAAO0L,GACzBF,EAAmB1V,IACf4V,EAAmBR,EAAWxB,eAkFtC,OAtEA+B,EAAGxB,IAAM,YAAgB0B,GACrB,MAAMC,EAAW,IAAIhC,IACjB+B,EAASpZ,IAAI6R,KAGXyH,EAAaN,EAAUvL,OAAO8L,GAChCF,EAAS9V,IAAIgW,EAAQT,KAGzB,GAAIQ,EAAW9F,SAAU,CACrB,MAAMgG,EAAcF,EACflG,aACApT,IAAIuZ,GAAWA,EAAQT,IAE5B,MAAM,IAAI5Y,uCAAuCyY,EAAWvE,mBAAmBoF,YAAsBd,EAAUtE,8BAA8B2E,KAGjJM,EAASnO,QAASgI,IACduF,EAAaxc,OAAO,CAChB2b,CAACkB,GAAwB5F,EACzB0E,CAACgB,GAAuBG,OAapCG,EAAGnX,MAAQ,WACPiX,EAAU7V,UAWd+V,EAAGpX,OAAS,YAAmBsX,GAC3B,MAAMK,EAAc,IAAIpC,IACpB+B,EAASpZ,IAAI6R,KAGX6H,EAAmBV,EAAUvL,OAC/B8L,GAAWE,EAAYlW,IAAIgW,EAAQT,KAGvC,GAAIY,EAAiBnG,UAAYkG,EAAYpW,KAAM,CAE/C,MAAMsW,EAAsBD,EACvBtG,aACApT,IAAIuZ,GAAWA,EAAQT,IAEtBc,EAAgB,IAAIH,GAAahM,OACnCyF,IAAOyG,EAAoBzC,SAAShE,IAGxC,MAAM,IAAIhT,sCAAsCyY,EAAWvE,mBAAmBwF,cAA0BlB,EAAUtE,8BAA8B2E,KAGpJW,EAAiBvW,UAGd+V,GAGXtX,MACI,MAAM,IAAI1B,MAAM,mGCxKtB2Z,sGACFC,0BAAA,WACIze,OAAOC,eACHmG,KAAKqT,MAAMvY,UACXkF,KAAK4O,UACL5O,KAAKsY,MAAMC,yBACPvY,KAAK4O,UACL5O,KAAKqT,MACLrT,KAAKwY,QACLxY,KAAKyY,kBAKjBC,4BAAA,WACI1Y,KAAKqT,MAAMsF,cAAc3Y,KAAK4O,WAAa5O,KAAKsY,MAAMM,2BAClD5Y,KAAK4O,UACL5O,KAAKqT,MACLrT,KAAKwY,QACLxY,KAAKyY,iBAIbI,2BAAA,WAKI,GAJ4Bjf,OAAOuW,yBAC/BnQ,KAAKwY,QAAQ1d,UACbkF,KAAK8Y,oBAGL,MAAM,IAAIra,OJLYkU,EIMlB3S,KAAKqT,MAAMV,UJNkB/D,EIO7B5O,KAAK4O,UJPmCmK,EIQxC/Y,KAAKwY,QAAQ7F,UJPlB,kBIQK3S,KAAK8Y,kDJNAC,8CACDpG,KAAa/D,MAC3BpQ,KAAK,MALX,IAAkCmU,EAAW/D,EAAWmK,EIchDnf,OAAOC,eACHmG,KAAKwY,QAAQ1d,UACbkF,KAAK8Y,mBACL9Y,KAAKsY,MAAMU,0BACPhZ,KAAK4O,UACL5O,KAAKqT,MACLrT,KAAKwY,QACLxY,KAAKyY,kBAKjBQ,6BAAA,WACIjZ,KAAKwY,QAAQG,cAAc3Y,KAAK8Y,oBAAsB9Y,KAAKsY,MAAMY,4BAC7DlZ,KAAK4O,UACL5O,KAAKqT,MACLrT,KAAKwY,QACLxY,KAAKyY,6BAhIb,SAAAU,EAAYjI,GACRlR,KAAKsY,MAAQpH,EAAKoH,MAClBtY,KAAK4O,UAAYsC,EAAKtC,UACtB5O,KAAKqT,MAAQnC,EAAKmC,MAClBrT,KAAKoZ,IAAMlI,EAAKkI,IAOZpZ,KAAKsY,MAAMe,WAAWrZ,KAAKqT,SAC3BrT,KAAKsY,MAAMS,YAAc,2BAqCjCO,IAAA,WACQtZ,KAAKsY,MAAMiB,4BACXvZ,KAAKqY,4BAELrY,KAAKsY,MAAMkB,8BACXxZ,KAAK0Y,8BAML1Y,KAAKsY,MAAMmB,6BACXzZ,KAAK6Y,6BAEL7Y,KAAKsY,MAAMoB,+BACX1Z,KAAKiZ,qEA/CT,QAA6B,IAAlBjZ,KAAK2Z,SAA0B,CACtC,MAAMZ,YAAEA,GAAgB/Y,KAAKsY,MAIzBtY,KAAK2Z,SAHJZ,EAEsB,SAAhBA,EACS/Y,KAAKqT,MAELrT,KAAKoZ,IAAIrf,IAAIgf,GAJb,KAOxB,OAAO/Y,KAAK2Z,8CAIZ,QAAkC,IAAvB3Z,KAAK4Z,cAA+B,CAC3C,MAAMhD,EAAmB5W,KAAKsY,MAAMuB,oBAChC7Z,KAAK4O,UACL5O,KAAKqT,OAKLrT,KAAK4Z,cAHJhD,EAGoB5W,KAAKoZ,IAAIrf,IAAI6c,GAFb,KAK7B,OAAO5W,KAAK4Z,yDAIZ,OAAO5Z,KAAKsY,MAAMwB,sBAAsB9Z,KAAKqT,iBA0F/C0G,cACF,SAAAA,IACI/Z,KAAKJ,OAAQ,6BAOjB2W,SAAA,WACI,OAAOvW,KAAKlE,eAGhBud,WAAA,SAAWhG,GACP,OAAO,KAGXwG,oBAAA,SAAoBjL,EAAWyE,GAC3B,OAAO,kDAZP,OAAO+E,sDAgBP,OAAO,uDAIP,OAAO,sDAIP,OAAO,wDAIP,OAAO,WAOF4B,GAAb,SAAAC,GACI,SAAAD,EAAY9I,GAAM,IAAAgJ,EAAA,OACdA,EAAAD,EAAA5gB,KAAA2G,aACKkR,KAAOA,GAAQ,GAEhBgJ,EAAKhJ,KAAKnW,eAAe,gBACzBmf,EAAKC,WAAaD,EAAKhJ,KAAKiJ,YALlBD,EADtB,OAAAE,KAAAJ,EAAAC,GAAAD,EAAAlf,UAUIyd,yBAAA,SAAyB3J,EAAWyE,GAChC,OD5MR,SAAwBzE,GACpB,MAAO,CACH7U,MACI,OAAOiG,KAAKyW,QAAQ7H,IAGxBzO,IAAIhG,GACA,OAAO6F,KAAKG,IAAIyO,EAAWzU,IAG/BL,YAAY,EACZyB,cAAc,GCiMP8e,CAAezL,IAX9BoL,EAAA,CAA+BD,IAkBlBO,GAAb,SAAAC,GACI,SAAAD,KAAevV,GAAM,IAAAyV,EAEjB,GADAA,EAAAD,EAAAlhB,KAAA2G,YACoB,IAAhB+E,EAAK1J,QAAmC,iBAAZ0J,EAAK,GAAiB,CAClD,MAAMmM,EAAOnM,EAAK,GAClByV,EAAKzB,YAAc7H,EAAKkG,GACxBoD,EAAKC,YAAcvJ,EAAKuJ,YACxBD,EAAK1C,QAAU5G,EAAK4G,QACpB0C,EAAK3D,cAAgB3F,EAAK2F,cAC1B2D,EAAKE,GAAKxJ,EAAKwJ,QAEdF,EAAKzB,YAAayB,EAAKC,aAAe1V,EAV1B,OAAAyV,EADzBJ,KAAAE,EAAAC,GAAA,IAAAI,EAAAL,EAAAxf,UAAA,OAAA6f,EAeIb,sBAAA,SAAsBzG,GAClB,OACIrT,KAAKya,aACYpH,EAAMV,UJxLdiI,cAAgB,OIsKrCD,EAsBIzB,4BAAA,SAA4BtK,EAAWyE,EAAOmF,EAASC,GAEnD,OAAO,IADWzY,KAAKuW,WAChB,CAAclD,EAAMV,UAAW/D,IAxB9C+L,EAmCItB,WAAA,SAAWhG,GACP,OAAOrT,KAAK+Y,cAAgB1F,EAAMV,WApC1CY,IAAA+G,EAAA,EAAA7f,IAAA,gCAAAV,IAAA,WA4BQ,OAAO,IA5Bf,CAAAU,IAAA,8BAAAV,IAAA,WAgCQ,OAAO,IAhCf,CAAAU,IAAA,iBAAAV,IAAA,WAwCQ,gBAAA8gB,GAAA,SAAAC,IAAA,OAAAD,EAAAxd,MAAA2C,KAAAlD,YAAAkD,KAAA,OAAAoa,KAAAU,EAAAD,GAAAC,EAAAhgB,UACIud,0BAAA,WACIze,OAAOC,eACHmG,KAAKqT,MAAMvY,UACXkF,KAAKsY,MAAMoC,IAAM1a,KAAK4O,UACtB5O,KAAKsY,MAAMC,yBACPvY,KAAK4O,UACL5O,KAAKqT,MACLrT,KAAKwY,QACLxY,KAAKyY,gBATrBqC,EAAA,CAAwD1C,QAxChEkC,EAAA,CAAqCP,IA4DxBgB,GAAb,SAAAC,GACI,SAAAD,KAAehW,GAAM,IAAAkW,EAAA,OACjBA,EAAAD,EAAA3hB,KAAA2G,QAAS+E,IAAT/E,MACKJ,OAAQ,EAFIqb,EADzBb,KAAAW,EAAAC,GAAA,IAAAE,EAAAH,EAAAjgB,UAAA,OAAAogB,EAMI3C,yBAAA,SAAyB3J,EAAWyE,EAAOmF,EAASC,GAChD,OAAOrC,GAA4BxH,EAAW4J,EAAQ7F,YAP9DuI,EAUIlC,0BAAA,SAA0BpK,EAAWyE,EAAOmF,EAASC,GACjD,OD3L8B0C,EC2LMvM,ED3La+H,EC2LFtD,EAAMV,UD1LlD,CACH5Y,MACI,MACI2Y,SACIyD,CAACQ,GAAwBI,IAE7B/W,KAAKuW,WAET,OAAOQ,EAAkB/K,OAAO,CAC5BmK,CAACgF,GAAoBnb,KAAKsQ,WAGlCnQ,MACI,MAAM,IAAI1B,MAAM,kDAd5B,IAAsC0c,EAAmBxE,GCgLzDoE,EAAA,CAAgCT,IAkBnBc,GAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAhe,MAAA2C,KAAAlD,YAAAkD,KAAAoa,KAAAgB,EAAAC,GAAA,IAAAC,EAAAF,EAAAtgB,UAAA,OAAAwgB,EACInB,WAAA,WACI,MAAO,IAFfmB,EAKIzB,oBAAA,SAAoBjL,EAAWyE,GAC3B,OACIrT,KAAK8X,SACLpJ,EAAQ2E,EAAMV,UAAW/D,IARrC0M,EAYI/C,yBAAA,SAAyB3J,EAAWyE,EAAOmF,EAASC,GAChD,OAAO/B,GACHrD,EAAMV,UACN6F,EAAQ7F,UACR8F,EAAa9F,UACb3S,KAAKub,iBAAiB3M,EAAWyE,EAAOmF,EAASC,IACjD,IAlBZ6C,EAsBItC,0BAAA,SAA0BpK,EAAWyE,EAAOmF,EAASC,GACjD,OAAO/B,GACHrD,EAAMV,UACN6F,EAAQ7F,UACR8F,EAAa9F,UACb3S,KAAKub,iBAAiB3M,EAAWyE,EAAOmF,EAASC,IACjD,IA5BZ6C,EAgCIpC,4BAAA,SAA4BtK,EAAWyE,EAAOmF,EAASC,GAEnD,OAAO,IADWzY,KAAKuW,WAChB,CAAc,CACjBa,GAAI/D,EAAMV,UACV8H,YAAa7L,EACbkJ,QAASW,EAAa9F,UACtBkE,cAAe7W,KAAKub,iBAAiB3M,EAAWyE,EAAOmF,EAASC,MAtC5E6C,EA0CI1C,2BAAA,SAA2BhK,EAAWyE,EAAOmF,EAASC,GAElD,OAAO,IADWzY,KAAKuW,WAChB,CAAc,CACjBa,GAAIoB,EAAQ7F,UACZ8H,YAAa7L,EACbkJ,QAAS9X,KAAK8X,QACdjB,cAAe7W,KAAKub,iBAAiB3M,EAAWyE,EAAOmF,EAASC,MAhD5E6C,EAwDIC,iBAAA,SAAiB3M,EAAWyE,EAAOmF,EAASC,GACxC,GAAIzY,KAAK6W,cAAe,CACpB,MAAO2E,EAAYC,GAAczb,KAAK6W,cAChC6E,EAASjD,EAAakD,OAAOH,GACnC,MAAO,CACHpE,GAAIsE,EAAOrC,WAAWb,GAAWgD,EAAaC,EAC9C7W,KAAM8W,EAAOrC,WAAWb,GAAWiD,EAAaD,GAIxD,GAAInI,EAAMV,YAAc6F,EAAQ7F,UAO5B,MAAO,CACHyE,GAAInI,EAAeuJ,EAAQ7F,WAC3B/N,KAAMoK,EAAiBqE,EAAMV,YAQrC,MAAMiJ,EAA+BC,GACjCjiB,OAAO0F,KAAKmZ,EAAakD,QAAQG,KAAKC,GAClCtD,EAAakD,OAAOI,GAAe1C,WAAWwC,IAItD,MAAO,CACHzE,GAAIwE,EAA6BpD,GACjC5T,KAAMgX,EAA6BvI,KA3F/CE,IAAA6H,EAAA,EAAA3gB,IAAA,+BAAAV,IAAA,WAqDQ,OAAO,MArDfqhB,EAAA,CAAgCd,IAmGnB0B,GAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAA5e,MAAA2C,KAAAlD,YAAAkD,KAAAoa,KAAA4B,EAAAC,GAAA,IAAAC,EAAAF,EAAAlhB,UAAA,OAAAohB,EACIpC,sBAAA,SAAsBzG,GAClB,OACIrT,KAAKya,aACLpH,EAAMV,UAAUiI,eAJ5BsB,EAQI3D,yBAAA,SAAyB3J,EAAWyE,EAAOmF,EAASC,GAChD,ODpVR,YAAuC1T,GACnC,OAAOqR,MAA+BrR,GCmV3BoX,CAA2BvN,EAAW4J,EAAQ7F,YAT7DuJ,EAYIlD,0BAAA,SAA0BpK,EAAWyE,EAAOmF,EAASC,GACjD,OD5U6B0C,EC4UMvM,ED5Ua+H,EC4UFtD,EAAMV,UD3UjD,CACH5Y,MACI,MACI2Y,SACIyD,CAACQ,GAAwBI,IAE7B/W,KAAKuW,WAET,OAAOQ,EAAkBhd,IAAI,CACzBoc,CAACgF,GAAoBnb,KAAKsQ,WAGlCnQ,MACI,MAAM,IAAI1B,MAAM,iDAd5B,IAAqC0c,EAAmBxE,GC+TxDqF,EAAA,CAA8B1B,IA4CvB,SAASpF,GAAKhE,GACjB,OAAO,IAAI8I,GAAU9I,GA+ClB,SAASkL,MAAMrX,GAClB,OAAO,IAAIgW,MAAchW,GA2EtB,SAASsX,MAAQtX,GACpB,OAAO,IAAIqW,MAAcrW,GAuBtB,SAASuX,MAAYvX,GACxB,OAAO,IAAIiX,MAAYjX,GC5jB3B,SAASwX,GAAaC,GAClB,MAAM/M,EAAa+M,EAAcjG,YAC3Bb,YAAEA,EAAF/C,UAAeA,GAAclD,EAEnC,MAAO,CACHoD,MAAOF,EACP1B,QAAS,CACL,CACIR,KAAMtC,EACNuC,QAAS,CACLyF,CAACT,GAAc8G,EAAclM,YA0BjD,MAAMmM,GAAK,WAMP,SAAAA,EAAYrhB,GACR4E,KAAK0c,YAAYthB,GAPd,IAAA8E,EAAAuc,EAAA3hB,UAAA,OAAAoF,EAUPwc,YAAA,SAAYthB,GACR,MAAMuhB,EAAW/iB,OAAOwB,GACxB4E,KAAKyW,QAAU,IAAKkG,GAEpB/iB,OAAO0F,KAAKqd,GAAUlT,QAASmF,IAMrBA,KAAa5O,MACfpG,OAAOC,eAAemG,KAAM4O,EAAW,CACnC7U,IAAK,IAAMiG,KAAKyW,QAAQ7H,GACxBzO,IAAKhG,GAAS6F,KAAKG,IAAIyO,EAAWzU,GAClCoB,cAAc,EACdzB,YAAY,OAzBrB2iB,EA+BA9X,SAAP,WACI,qBAAsB3E,KAAK2S,aAhCxB8J,EA+CAta,QAAP,WACI,MAAO,IAhDJsa,EA0DA/H,aAAP,SAAoBkI,GAChB,QAA6B,IAAlB5c,KAAK6c,SACZ,MAAM,IAAIpe,MAAM,8BACiBuB,KAAK2S,kDAClC,2EACc3S,KAAK2S,uCACrBnU,KAAK,KAEXwB,KAAK0S,QAAQgC,aAAa1U,KAAK2S,UAAWiK,IAlEvCH,EA2EA3H,qBAAP,WACI,QAA6B,IAAlB9U,KAAK6c,SACZ,MAAM,IAAIpe,MAAM,sBACSuB,KAAK2S,4DAC1B,2EACc3S,KAAK2S,+CACrBnU,KAAK,KAEXwB,KAAK0S,QAAQoC,qBAAqB9U,KAAK2S,YAnFpC8J,EA6FAzH,oBAAP,SAA2BC,GACvB,QAA6B,IAAlBjV,KAAK6c,SACZ,MAAM,IAAIpe,MAAM,kCACqBuB,KAAK2S,kDACtC,2EACc3S,KAAK2S,8CACrBnU,KAAK,KAEXwB,KAAK0S,QAAQsC,oBACTC,EAAQ1W,IACJ,EAAEoS,EAAWxW,KAAW,CAAC6F,KAAK2S,UAAWhC,EAAWxW,MAvGzDsiB,EAkIAjI,QAAP,SAAe9B,GACX,KAAMA,aAAmBc,IACrB,MAAM,IAAI/U,MAAM,0DAEpBuB,KAAK6c,SAAWnK,GAtIb+J,EAyJApN,YAAP,WACI,MAAQK,cAAeoN,GAAkB9c,KACzC,OAAO,IAAI8c,EAAc9c,OA3JtByc,EAiKAM,qBAAP,WACI/c,KAAKgd,aAAUjgB,EACfiD,KAAK2Y,cAAgB,IAnKlB8D,EAkLAQ,aAAP,WACI,MAA4B,mBAAjBjd,KAAKkd,SACZ3O,EAAe,qEACRvO,KAAKkd,WAEZld,KAAKkd,SACL3O,EAAe,qEACRvO,KAAKkd,SAEY,mBAAjBld,KAAKmC,QACLnC,KAAKmC,UAETnC,KAAKmC,SA9LTsa,EA0MAjiB,OAAP,SAAc2iB,GACV,QAA6B,IAAlBnd,KAAK6c,SACZ,MAAM,IAAIpe,MAAM,sBACSuB,KAAK2S,+CAC1B,2EACc3S,KAAK2S,iCACrBnU,KAAK,KAEX,MAAMpD,EAAQ,IAAK+hB,GAEbC,EAAe,GAEfC,EAAqBzjB,OAAO0F,KAAKU,KAAK2b,QACtC2B,EAA4B1jB,OAAO0F,KAAKU,KAAK2Y,eAEnD0E,EAAmB5T,QAAShP,IACxB,MAAM6d,EAAQtY,KAAK2b,OAAOlhB,GACpB8iB,EAAcJ,EAAUpiB,eAAeN,GAC7C,GAAM6d,aAAiB8C,GAOZmC,IAGPH,EAAa3iB,GAAO0iB,EAAU1iB,UACvBW,EAAMX,SAVb,GAAI8iB,EAAa,CACb,MAAMpjB,EAAQgjB,EAAU1iB,GACxBW,EAAMX,GAAO2V,GAAgBjW,QACtBme,EAAM6B,aACb/e,EAAMX,GAAO6d,EAAM6B,gBAW/BmD,EAA0B7T,QAAShP,IAC/B,IAAK2iB,EAAariB,eAAeN,GAAM,CACnC,MAAM6d,EAAQtY,KAAK2Y,cAAcle,GAC7B0iB,EAAUpiB,eAAeN,IAAQ6d,aAAiB8C,KAGlDgC,EAAa3iB,GAAO0iB,EAAU1iB,UACvBW,EAAMX,OAKzB,MAOMkO,EAAW,IADC3I,KANDA,KAAK0S,QAAQS,YAAY,CACtCC,OAAQlF,EACR2E,MAAO7S,KAAK2S,UACZjC,QAAStV,KAMb,OADAuN,EAAS6U,kBAAkBJ,GACpBzU,GAjQJ8T,EA6QAgB,OAAP,SAAcN,GACV,QAA4B,IAAjBnd,KAAK0S,QACZ,MAAM,IAAIjU,MAAM,sBACSuB,KAAK2S,+CAC1B,2EACc3S,KAAK2S,iCACrBnU,KAAK,KAGX,MAAMkX,YAAEA,GAAgB1V,KACxB,GAAImd,EAAUpiB,eAAe2a,GAAc,CACvC,MAAMjE,EAAK0L,EAAUzH,GACrB,GAAI1V,KAAK0d,SAASjM,GAAK,CACnB,MAAM4B,EAAQrT,KAAK0R,OAAOD,GAE1B,OADA4B,EAAMH,OAAOiK,GACN9J,GAIf,OAAOrT,KAAKxF,OAAO2iB,IAhShBV,EA6SA/K,OAAP,SAAcD,GACV,OAAOzR,KAAKjG,IAAI,CACZoc,CAACnW,KAAK0V,aAAcjE,KA/SrBgL,EA4TAiB,SAAP,SAAgBjM,GACZ,OAAOzR,KAAK+R,OAAO,CACfoE,CAACnW,KAAK0V,aAAcjE,KA9TrBgL,EAyUA1K,OAAP,SAAcM,GACV,QAA4B,IAAjBrS,KAAK0S,QACZ,MAAM,IAAIjU,MAAM,wBACWuB,KAAK2S,sDAC5B,2EACc3S,KAAK2S,iCACrBnU,KAAK,KAGX,OAAOwT,QACHhS,KAAK2d,kBAAkBtL,GAAWhX,SAnVnCohB,EAgWA1iB,IAAP,SAAWsY,GACP,MAEMb,EAAOxR,KAAK2d,kBAAkBtL,GACpC,GAAoB,IAAhBb,EAAKnW,OACL,OAAO,KAEX,GAAImW,EAAKnW,OAAS,EACd,MAAM,IAAIoD,4CAA4CuB,KAAK2S,0BAA0BnB,EAAKnW,WAG9F,OAAO,IAVW2E,KAUGwR,EAAK,KA3WvBtR,EAqXPqW,SAAA,WACI,OAAOvW,KAAKlE,aAtXToE,EA6XPoQ,MAAA,WACI,OAAOtQ,KAAKyW,QAAQzW,KAAKuW,WAAWb,cA9XjC+G,EAwZAkB,kBAAP,SAAyBtL,GACrB,MAAMS,EAAY,CACdD,MAAO7S,KAAK2S,WAUhB,OARIN,IACAS,EAAU7B,QAAU,CAChB,CACIR,KAAMtC,EACNuC,QAAS2B,KAIdrS,KAAK0S,QAAQK,MAAMD,GAAWtB,MApalCtR,EA4aPyE,SAAA,WACI,MAAMsS,EAAYjX,KAAKuW,WAcvB,SAbkBU,EAAUtE,eACT/Y,OAAO0F,KAAK2X,EAAU0E,QACfpd,IAAKqQ,IAE3B,GADcqI,EAAU0E,OAAO/M,aACVwM,GAAY,CAI7B,SAAUxM,OAHE5O,KAAK4O,GAAWgD,eAAerT,IACvC8U,GAASA,EAAM/C,SAEU9R,KAAK,SAGtC,SAAUoQ,MADE5O,KAAKyW,QAAQ7H,OAE1BpQ,KAAK,UA1bL0B,EAycP0d,OAAA,SAAO/B,GAEH,OL/XR,SAA6Bpf,EAAGC,GAC5B,IAAImhB,EAAU,EAUd,OAPAjkB,OAAOkX,QAAQlX,OAAO6C,IAAIgN,QAAQ,EAAEhP,EAAKN,MACrC,IAAKuC,EAAE3B,eAAeN,IAAQiC,EAAEjC,KAASN,EACrC,OAAO,EAEX0jB,MAGGA,IAAYjkB,OAAO0F,KAAK5C,GAAGrB,OKoXvByiB,CAAoB9d,KAAKyW,QAASoF,EAAWpF,UA3cjDvW,EAsdPC,IAAA,SAAI4d,EAAc5jB,GACd6F,KAAKkT,OAAO,CACRiD,CAAC4H,GAAe5jB,KAxdjB+F,EAmePgT,OAAA,SAAO8K,GACH,MAAM/G,EAAYjX,KAAKuW,WACvB,QAAiC,IAAtBU,EAAUvE,QACjB,MAAM,IAAIjU,MAAM,sBACSwY,EAAUtE,+CAC/B,wFACFnU,KAAK,KAGX,MAAMkL,EAAW,IAAKsU,IAEhBrC,OAAEA,EAAFhD,cAAUA,GAAkB1B,EAE5BmG,EAAe,GAKrB,IAAK,MAAMa,KAAYvU,EAAU,CAG7B,GAFoBiS,EAAO5gB,eAAekjB,GAEzB,CACb,MAAM3F,EAAQqD,EAAOsC,GAEjB3F,aAAiByC,IAAczC,aAAiB0D,GAEhDtS,EAASuU,GAAY7N,GAAgB1G,EAASuU,IACvC3F,aAAiB8C,KAExBgC,EAAaa,GAAYvU,EAASuU,UAC3BvU,EAASuU,SAEjB,GAAItF,EAAc5d,eAAekjB,GAAW,CACjCtF,EAAcsF,aACP7C,KAEjBgC,EAAaa,GAAYvU,EAASuU,UAC3BvU,EAASuU,KAK5B,MAAMC,EAAe,IACdle,KAAKyW,WACL/M,GAGDyU,EAAe,IAAIlH,EAAUiH,GAE9Ble,KAAK4d,OAAOO,KACbne,KAAK0c,YAAYwB,GACjBjH,EAAUvE,QAAQS,YAAY,CAC1BC,OAAQpF,EACR+E,MAAOwJ,GAAavc,MACpB0Q,QAAShH,KAKjB1J,KAAKwd,kBAAkBJ,IA9hBpBld,EAsiBPke,iBAAA,WACIpe,KAAK0c,YAAY1c,KAAKqe,MAviBnBne,EAgjBPwB,OAAA,WACI,MAAMuV,EAAYjX,KAAKuW,WACvB,QAAiC,IAAtBU,EAAUvE,QACjB,MAAM,IAAIjU,MAAM,sBACSwY,EAAUtE,+CAC/B,wFACFnU,KAAK,KAGXwB,KAAKsT,YACL2D,EAAUvE,QAAQS,YAAY,CAC1BC,OAAQnF,EACR8E,MAAOwJ,GAAavc,SA5jBrBE,EAskBPsd,kBAAA,SAAkBc,GACd,MAAMrH,EAAYjX,KAAKuW,YACjBoF,OAAEA,EAAFhD,cAAUA,EAAVhG,UAAyBA,GAAcsE,EAE7Crd,OAAO0F,KAAKgf,GAAW7U,QAAShQ,IAC5B,MAAMqd,GAAW6E,EAAO5gB,eAAetB,GACjC6e,EAAQK,EAAclf,GACtB+F,EAAS8e,EAAU7kB,GAEzB,IAAKiE,MAAMS,QAAQqB,GACf,MAAM,IAAIqF,0DAA0D8N,KAAalZ,gCAAmC+F,MAGxH,MAAM+e,EAAmB/e,EAAOjB,IAAI6R,IAC9BoO,EAAY,IAAI,IAAI5I,IAAI2I,IAE9B,GAAIA,EAAiBljB,SAAWmjB,EAAUnjB,OACtC,MAAM,IAAIoD,6CAA6C8f,SAAwBtH,EAAUtE,aAAalZ,WAG1G,MAAMmd,EAAmB0B,EAAMR,SAAWpJ,EAAQuI,EAAUtE,UAAWlZ,GACjEud,EAAeC,EAAUvE,QAAQkE,GAEvC,IAAI6H,EACAC,EAEC5H,IAGElS,KAAM8Z,EAAStH,GAAIqH,GAAcnG,EAAMzB,iBAFvCjS,KAAM6Z,EAAWrH,GAAIsH,GAAYpG,EAAMzB,eAK9C,MAGM8H,EL/gBlB,SAA0BC,EAAWC,GACjC,MAAMC,EAAcF,EAAU5S,OAAO+S,GAAQF,EAAUpJ,SAASsJ,IAC1DC,EAAcJ,EAAU5S,OAAO+S,IAASD,EAAYrJ,SAASsJ,IAC7DE,EAAWJ,EAAU7S,OAAO+S,IAASD,EAAYrJ,SAASsJ,IAEhE,OAAIC,EAAY3jB,QAAU4jB,EAAS5jB,OACxB,CACHqG,OAAQsd,EACR/I,IAAKgJ,GAGN,KKogBqBC,CAHDlI,EAAahL,OAAO8L,GAAWA,EAAQ2G,KAAeze,KAAKiX,EAAUvB,cACtF/D,aAAapT,IAAI8f,GAAOA,EAAIK,IAEmBH,GAEjD,GAAII,EAAa,CACb,MACIjd,OAAQyd,EACRlJ,IAAK2B,GACL+G,EACAQ,EAAY9jB,OAAS,GACrB2E,KAAKvG,GAAM4G,UAAU8e,GAErBvH,EAASvc,OAAS,GAClB2E,KAAKvG,GAAMwc,OAAO2B,OApnB3B1X,EA8nBPoT,UAAA,WACI,MAAMqF,cAAEA,GAAkB3Y,KAAKuW,WAC/B,IAAK,MAAM9b,KAAOke,EAAe,CAC7B,MAAML,EAAQK,EAAcle,GAC5B,GAAI6d,aAAiB8C,GAEjBpb,KAAKvF,GAAK6F,aACP,GAAIgY,aAAiByC,GAAY,CACpC,MAAMqE,EAAYpf,KAAKvF,GACnB2kB,EAAUrN,UACVqN,EAAUlM,OAAO,CAAEiD,CAACmC,EAAMmC,aAAc,YAErCnC,aAAiB0D,IAGN,OAAdhc,KAAKvF,KACLuF,KAAKvF,GAAK6d,EAAMmC,aAAe,QA9oBxCgC,EA8pBA4C,MAAP,SAAa5N,GAET,OADAlP,QAAQC,KAAK,2EACNxC,KAAK0d,SAASjM,IAhqBlBvR,EAuqBPgW,aAAA,WACI,MAAM,IAAIzX,MACN,qGAzqBD8U,IAAAkJ,EAAA,EAAAhiB,IAAA,MAAAV,IAAA,WAwYH,MAAMkd,EAAYjX,KAAKuW,WAGvB,OAAOU,EAAU0G,kBAAkB,CAC/BxH,CAACc,EAAUvB,aAAc1V,KAAKsQ,UAC/B,MA7YA,EAAA7V,IAAA,cAAAV,IAAA,WAkHH,QAA6B,IAAlBiG,KAAK6c,SACZ,MAAM,IAAIpe,MAAM,qBACQuB,KAAK2S,qDACzB,6EACc3S,KAAK2S,sCACrBnU,KAAK,KAEX,OAAOwB,KAAK0S,QAAQgB,GAAG4L,SAAStf,KAAK2S,WAAW+C,cAzH7C,CAAAjb,IAAA,UAAAV,IAAA,WAgJH,OAAOiG,KAAK6c,WAhJT,CAAApiB,IAAA,QAAAV,IAAA,WA0KH,OAAOiG,KAAKqP,kBA1KToN,EAAA,GA+qBXA,GAAMd,OAAS,CACXlK,GAAIyD,MAERuH,GAAM9D,cAAgB,GACtB8D,GAAM/M,cAAgBsB,GAEPyL,0FCzuBf,MAAM8C,GAAwB,CAC1B7J,YAAa,KACb8J,QAAS,QACTC,QAAS,YACT9D,OAAQ,IA4hBG+D,OAvfJ,WAYP,SAAAA,EAAYpO,GACR1X,OAAOiQ,OAAO7J,KAAMuf,GAAuBjO,GAbxC,IAAApR,EAAAwf,EAAA5kB,UAAA,OAAAoF,EAyBPyf,SAAA,SAASC,EAAQnO,GACb,OAAOmO,EAAO5f,KAAKyf,SAAShO,IA1BzBvR,EA6BP2f,UAAA,SAAUD,EAAQhD,GACd,MAAMre,EAAMqhB,EAAO5f,KAAKyf,SACxB,OAAO7C,EAAIre,IAAIkT,GAAMlT,EAAIkT,KA/BtBvR,EAkCPwd,SAAA,SAASkC,EAAQnO,GACb,OAAOmO,EAAO5f,KAAKyf,SAAS1kB,eAAe0W,IAnCxCvR,EAsCP4f,aAAA,SAAaF,GACT,OAAOA,EAAO5f,KAAKwf,UAvChBtf,EA0CP6f,WAAA,SAAWH,GACP,OAAO5f,KAAK6f,UAAUD,EAAQ5f,KAAK8f,aAAaF,KA3C7C1f,EA8CP8f,SAAA,SAASJ,GACL,OAAO5f,KAAKigB,QAAQL,EAAQ,UA/CzB1f,EAkDPggB,SAAA,SAAS7K,EAAIuK,EAAQO,GACjB,OAAOngB,KAAKogB,QAAQ/K,EAAIuK,EAAQ,QAASO,IAnDtCjgB,EAsDPmgB,OAAA,SAAO5O,GACH,OAAOA,EAAK,GAvDTvR,EA8DP4T,cAAA,WAYI,MAAO,IAXS,CACZqC,CAACnW,KAAKwf,SAAU,GAChBrJ,CAACnW,KAAKyf,SAAU,IAWhBxK,QATgBrb,OAAO0F,KAAKU,KAAK2b,QAChC3P,OAAOkJ,GAAQA,IAASlV,KAAK0V,aAC7B1J,OAAOkJ,GAAQlV,KAAK2b,OAAOzG,GAAMtV,OACjCF,OAAO,CAACuV,EAASC,KAAV,IACDD,EACHkB,CAACjB,GAAO,KACR,IAIJoL,KAAM,KA7EPpgB,EAiFPkgB,QAAA,SAAQ/K,EAAIuK,EAAQnlB,EAAKN,GACrB,MAAM0Z,WAAEA,EAAFD,cAAcA,GAAkByB,EACtC,GAAIzB,EAAe,CAEf,OADYrD,EAAIhD,QAAQrB,MAAM,CAAC,OAAQzR,GAAMN,EAAOylB,GAIxD,OAAOrP,EAAI/C,MAAMtB,MAAM2H,EAAY,CAAC,OAAQpZ,GAAMN,EAAOylB,IAxFtD1f,EA2FP+f,QAAA,SAAQL,EAAQnlB,GACZ,OAAOmlB,EAAOU,KAAK7lB,IA5FhByF,EA+FP6S,MAAA,SAAM6M,EAAQ3O,GACV,GAAuB,IAAnBA,EAAQ5V,OACR,OAAO2E,KAAK+f,WAAWH,GAG3B,MAAMlK,YAAEA,GAAgB1V,KAElBugB,EAA0B/b,KAAOyM,EAAU+E,GACzCxF,GAAyBwF,EAAQN,GAC1B,ENiCvB,UAAoCjF,KAAEA,IAClC,MAAO,CAACtC,EAAQC,GAASqH,SAAShF,GM/BtB+P,CAA2BxK,GACpB,EAGJ,GAGLyK,EAAU,CAACjP,EAAMwE,KACnB,MAAMvF,KAAEA,EAAFC,QAAQA,GAAYsF,EAC1B,IAAKxE,EAAM,CAKP,GAAIhB,GAAyBwF,EAAQN,GAAc,CAK/C,MAAMjE,EAAKf,EAAQgF,GACbgL,EAAmB9mB,OAAO0F,KAAKoR,GAChChR,OAAO,CAACihB,EAAeC,KAChBA,IAAelL,IACfiL,EAAcC,GAAclQ,EAAQkQ,IAEjCD,GACR,IACD/D,EAAM5c,KAAK0d,SAASkC,EAAQnO,GAAM,CAACA,GAAM,GAC/C,OAAI7X,OAAO0F,KAAKohB,GAAkBrlB,OAKvBolB,EAAQzgB,KAAK6f,UAAUD,EAAQhD,GAAM,IACrC5G,EACHtF,QAASgQ,IAOV1gB,KAAK6f,UAAUD,EAAQhD,GAElC,GAAInM,IAAStC,GAA6B,iBAAZuC,EAAsB,CAChD,MAAMuE,EAAUrb,OAAOkX,QAAQ8O,EAAO3K,SAChCE,EAAkB,GAClB0L,EAAa,GAiBnB,GAhBA5L,EAAQxL,QAAQ,EAAEyL,EAAMtV,MAChB4Q,GAAyBwF,EAAQd,IAK7BtV,EAAM7E,eAAe2V,EAAQwE,MAC7BC,EAAgBpW,KAAKa,EAAM8Q,EAAQwE,KACnC2L,EAAW9hB,KAAKmW,MAQxBC,EAAgB9Z,OAAQ,CACxB,MAAMylB,EAAY3L,EAAgBlX,MAC5B8iB,EAAa5L,EAAgBzV,OAAO,CAAC+D,EAAQ7D,KAC/C,MAAMohB,EAAW,IAAIpL,IAAIhW,GACzB,OAAO6D,EAAOuI,OAAO4J,IAAI9a,UAAUgH,IAAKkf,IACzCF,GACGJ,EAAmB9mB,OAAO0F,KAAKoR,GAChChR,OAAO,CAACuhB,EAAmBL,KACnBC,EAAWpL,SAASmL,KACrBK,EAAkBL,GAAclQ,EAAQkQ,IAErCK,GACR,IACP,OAAIrnB,OAAO0F,KAAKohB,GAAkBrlB,OAKvBolB,EAAQzgB,KAAK6f,UAAUD,EAAQmB,GAAa,IAC5C/K,EACHtF,QAASgQ,IAOV1gB,KAAK6f,UAAUD,EAAQmB,IAKtC,OAAON,EAAQzgB,KAAK+f,WAAWH,GAAS5J,GAG5C,OAAQvF,GACR,KAAKtC,EACD,OAAOnC,KAAOwF,EAAMd,GAExB,KAAKtC,EACD,OAAO8S,KAAO1P,EAAMd,GAExB,IPnQY,qBOmQG,CACX,MAAOnN,EAAWC,GAAUkN,EAC5B,OAAOsC,KAAQxB,EAAMjO,EAAWC,GAEpC,QACI,OAAOgO,IAIf,OAAO+O,EAAwB7gB,OAAO+gB,OAAS1jB,IA9N5CmD,EA0OP4M,OAAA,SAAOuI,EAAIuK,EAAQuB,GACf,MAAMtN,WAAEA,EAAFD,cAAcA,GAAkByB,EAEhCgK,EAAQ8B,EAAMpmB,eAAeiF,KAAK0V,aAExC,IAAI0L,EAAexB,EAGnB,MAAOO,EAAU1O,GA5QzB,SAAqB4P,EAAUC,GAC3B,IACIC,EACAC,EAFAC,EAAUJ,EAgBd,YAZgBtkB,IAAZ0kB,IACAA,GAAW,QAGM1kB,IAAjBukB,EAEAE,EADAD,EAASE,EAAU,GAGnBF,EAASpb,KAAKC,IAAIqb,EAAU,EAAGH,GAC/BE,EAAQF,GAGL,CACHC,EACAC,GAyPuBE,CAAY1hB,KAAKggB,SAASJ,GAASuB,EAAMnhB,KAAK0V,cACrE0L,EAAephB,KAAKkgB,SAAS7K,EAAIuK,EAAQO,GAEzC,MAAMwB,EAAatC,EACb8B,EACA5Q,EAAI/C,MAAMrN,IAAI0T,EAAY7T,KAAK0V,YAAajE,EAAI0P,GAEhDS,EAAoBhoB,OAAO0F,KAAK8hB,EAAanM,SAASvV,OAAO,CAACF,EAAQqiB,IACnEV,EAAMpmB,eAAe8mB,GACJ,OAAlBV,EAAMU,GAAyBriB,GACnCA,EAAOT,KAAK,CAAC8iB,EAAQV,EAAMU,KACpBriB,GAHmCA,EAI3C,IAGH,GAAIoU,EAYA,OAXArD,EAAIhD,QAAQxO,KAAK0S,EAAI2P,EAAaphB,KAAKwf,UACvCjP,EAAIhD,QAAQpN,IAAIsR,EAAIkQ,EAAYP,EAAaphB,KAAKyf,UAElDmC,EAAkBnY,QAAQ,EAAEyL,EAAM/a,MAC9B,MAAM2nB,EAAYV,EAAanM,QAAQC,GACnC4M,EAAU/mB,eAAeZ,GACzBoW,EAAIhD,QAAQxO,KAAK0S,EAAIqQ,EAAU3nB,IAE/BoW,EAAIhD,QAAQpN,IAAIhG,EAAO,CAACsX,GAAKqQ,KAG9B,CACHnO,MAAOyN,EACPW,QAASJ,GAIjB,MAAMK,EAAczR,EAAI/C,MAAM5B,MAC1BiI,EACA+N,EACKliB,OAAO,CAACuiB,GAAW/M,EAAM/a,MACtB8nB,EAAS/M,GAAQ3E,EAAI/C,MAAM5B,MACvBiI,EACA,CACIsC,CAAChc,GAAQoW,EAAI/C,MAAMzO,KACf8U,EACApC,EACAwQ,EAAS/M,GAAM/a,IAAU,KAGjC8nB,EAAS/M,IAEN+M,GACR,IAAKb,EAAanM,UACzBmM,EAAanM,SAWjB,MAAO,CACHtB,MATcpD,EAAI/C,MAAM5B,MAAMiI,EAAY,CAC1CsC,CAACnW,KAAKwf,SAAUjP,EAAI/C,MAAMzO,KAAK8U,EAAYpC,EAAI2P,EAAaphB,KAAKwf,UACjErJ,CAACnW,KAAKyf,SAAUlP,EAAI/C,MAAM5B,MAAMiI,EAAY,CACxCsC,CAAC1E,GAAKkQ,GACPP,EAAaphB,KAAKyf,UACrBxK,QAAS+M,GACVZ,GAICW,QAASJ,IAjTVzhB,EA+TPgT,OAAA,SAAOmC,EAAIuK,EAAQpO,EAAM9H,GACrB,MAAMmK,WAAEA,EAAFD,cAAcA,GAAkByB,EAOhClV,EAAMyT,EAAgBrD,EAAIhD,QAAQpN,IAAMoQ,EAAI/C,MAAMrN,IAAI0T,GAEtDqO,EAAetoB,OAAO0F,KAAKsgB,EAAO3K,SACnCjJ,OAAOkJ,GAAQxL,EAAS3O,eAAema,IACtCiN,EAAgB,GAChBC,EAAmB,GAEnBC,EAAU7Q,EAAK9R,OAAO,CAACnB,EAAKsX,KAC9B,MAAMyM,EAAiBJ,EAAaxiB,OAAO,CAAC6iB,EAAUrN,KAAX,IACpCqN,EACHpM,CAACjB,GAAOW,EAAIX,KACZ,IACEzR,EAjBYoS,KAElB,OADcjC,EAAgBrD,EAAIhD,QAAQ3B,MAAQ2E,EAAI/C,MAAM5B,MAAMiI,IACrDnK,EAAUmM,IAeR2M,CAAa3M,GACtB4M,EAAiBP,EAAaxiB,OAAO,CAAC6iB,EAAUrN,KAAX,IACpCqN,EACHpM,CAACjB,GAAOzR,EAAOyR,KACf,IACEzD,EAAKhO,EAAOzD,KAAK0V,aACjBgN,EAAUviB,EAAIsR,EAAIhO,EAAQlF,GAiBhC,OAhBA2jB,EAAazY,QAASyL,IAClB,MAAQiB,CAACjB,GAAOyN,GAAcL,GACtBnM,CAACjB,GAAO0N,GAAcH,EAC1BE,IAAcC,IAIA,OAAdD,GAEAP,EAAiBrjB,KAAK,CAACmW,EAAMyN,EAAWlR,IAE1B,OAAdmR,GAEAT,EAAcpjB,KAAK,CAACmW,EAAM0N,EAAWnR,OAGtCiR,GACR9C,EAAO5f,KAAKyf,UAEf,IAAIuC,EAAcpC,EAAO3K,QAuDzB,OAtDIrB,GACAwO,EAAiB3Y,QAAQ,EAAEyL,EAAM/a,EAAOsX,MACpC,MAAMlV,EAAMylB,EAAY9M,GAAM/a,GACxBuS,EAAMnQ,EAAI4E,QAAQsQ,IACX,IAAT/E,GACA6D,EAAIhD,QAAQnM,OAAOsL,EAAK,EAAG,GAAInQ,KAGvC4lB,EAAc1Y,QAAQ,EAAEyL,EAAM/a,EAAOsX,MACjClB,EAAIhD,QAAQxO,KAAK0S,EAAIuQ,EAAY9M,GAAM/a,QAGvCgoB,EAAc9mB,SACd2mB,EAAczR,EAAI/C,MAAM5B,MACpBiI,EACAsO,EAAcziB,OAAO,CAACuiB,GAAW/M,EAAM/a,EAAOsX,MAC1CwQ,EAAS/M,GAAQ3E,EAAI/C,MAAM5B,MACvBiI,EACA,CACIsC,CAAChc,GAAQoW,EAAI/C,MAAMzO,KACf8U,EACApC,EACAwQ,EAAS/M,GAAM/a,IAAU,KAGjC8nB,EAAS/M,IAEN+M,GACR,IAAKD,IACRA,IAGJI,EAAiB/mB,SACjB2mB,EAAczR,EAAI/C,MAAM5B,MACpBiI,EACAuO,EAAiB1iB,OAAO,CAACuiB,GAAW/M,EAAM/a,EAAOsX,MAC7CwQ,EAAS/M,GAAQ3E,EAAI/C,MAAM5B,MACvBiI,EACA,CACIsC,CAAChc,GAAQoW,EAAI/C,MAAMxB,OACf6H,EACAgP,GAASA,IAAUpR,EACnBwQ,EAAS/M,GAAM/a,IAAU,KAGjC8nB,EAAS/M,IAEN+M,GACR,IAAKD,IACRA,KAKLzR,EAAI/C,MAAM5B,MAAMiI,EAAY,CAC/BsC,CAACnW,KAAKyf,SAAU4C,EAChBpN,QAAS+M,GACVpC,IAvaA1f,EAibPwB,OAAA,SAAO2T,EAAIuK,EAAQpO,GACf,MAAMqC,WAAEA,EAAFD,cAAcA,GAAkByB,GAEhCmK,QAAEA,EAAFC,QAAWA,GAAYzf,KACvBzD,EAAMqjB,EAAOJ,GAEbL,EAAc3N,EAAKjT,IAAIsX,GAAOA,EAAI7V,KAAK0V,cAC7C,GAAI9B,EAoBA,OAnBAuL,EAAY1V,QAASgI,IACjB,MAAM/E,EAAMnQ,EAAI4E,QAAQsQ,IACX,IAAT/E,GACA6D,EAAIhD,QAAQnM,OAAOsL,EAAK,EAAG,GAAInQ,GAGnCgU,EAAIhD,QAAQzB,KAAK2F,EAAImO,EAAOH,MAGhC7lB,OAAO4F,OAAOogB,EAAO3K,SAASxL,QAAQqY,GAClCloB,OAAO4F,OAAOsiB,GAAWrY,QAAQqZ,GAC7B3D,EAAY1V,QAASgI,IACjB,MAAM/E,EAAMoW,EAAW3hB,QAAQsQ,IAClB,IAAT/E,GACA6D,EAAIhD,QAAQnM,OAAOsL,EAAK,EAAG,GAAIoW,OAKxClD,EAGX,MAAMoC,EAAczR,EAAI/C,MAAM5B,MAC1BiI,EACAja,OAAOkX,QAAQ8O,EAAO3K,SAASvV,OAAO,CAACuiB,GAAW/M,EAAM4M,MACpDG,EAAS/M,GAAQ3E,EAAI/C,MAAM5B,MACvBiI,EACAja,OAAOkX,QAAQgR,GAAWpiB,OAAO,CAACqjB,GAAe5oB,EAAO2oB,MACpDC,EAAa5oB,GAASoW,EAAI/C,MAAMxB,OAC5B6H,EACApC,IAAO0N,EAAY1J,SAAShE,GAC5BqR,GAEGC,GACR,IAAKd,EAAS/M,KACjB+M,EAAS/M,IAEN+M,GACR,IAAKrC,EAAO3K,UACf2K,EAAO3K,SAGX,OAAO1E,EAAI/C,MAAM5B,MAAMiI,EAAY,CAC/BsC,CAACqJ,GAAUjP,EAAI/C,MAAMxB,OACjB6H,EACApC,IAAO0N,EAAY1J,SAAShE,GAC5BmO,EAAOJ,IAEXrJ,CAACsJ,GAAUlP,EAAI/C,MAAM1B,KACjB+H,EACAsL,EACAS,EAAOH,IAEXxK,QAAS1E,EAAI/C,MAAM5B,MACfiI,EACAmO,EACApC,EAAO3K,UAEZ2K,IAnfAF,EAAA,GC3CX,MAAMsD,GAAmB,GAiBzB,SAASjQ,GAAMkQ,EAAQnQ,EAAWa,GAC9B,MAAQd,MAAOqQ,EAATjS,QAAoBA,GAAY6B,EAGtC,MAAO,CACHtB,KAHUyR,EAAOC,GACFnQ,MAAMY,EAAMuP,GAAYjS,IAM/C,SAASiC,GAAO+P,EAAQ7N,EAAYC,EAAI1B,GACpC,MAAMP,OAAEA,EAAF1C,QAAUA,GAAY0E,EAE5B,IAAI8N,EACAC,EACAC,EAEJ,GAAIhQ,IAAWlF,EAAQ,GAChB2E,MAAOqQ,GAAc9N,GACxB,MAAMvC,EAAQoQ,EAAOC,GACfG,EAAiB1P,EAAMuP,GACvBzf,EAASoP,EAAM/F,OAAOuI,EAAIgO,EAAgB3S,GAChDyS,EAAiB1f,EAAOkQ,MACxByP,EAAgB3f,EAAOse,YACpB,CACH,MAAQhP,MAAOD,GAAcsC,IAC1BvC,MAAOqQ,GAAcpQ,GACxB,MAAMtB,KAAEA,GAASuB,GAAMkQ,EAAQnQ,EAAWa,GAEpCd,EAAQoQ,EAAOC,GACfG,EAAiB1P,EAAMuP,GAE7B,GAAI9P,IAAWpF,EACXmV,EAAiBtQ,EAAMK,OAAOmC,EAAIgO,EAAgB7R,EAAMd,GAExD0S,EAAgBrQ,GAAMkQ,EAAQnQ,EAAWa,GAAOnC,SAC7C,IAAI4B,IAAWnF,EAKlB,MAAM,IAAIxP,gDAAgD2U,KAJ1D+P,EAAiBtQ,EAAMnR,OAAO2T,EAAIgO,EAAgB7R,GAElD4R,EAAgB5R,GAMxB,MAAM8R,EAvDV,SAA2BJ,EAAWK,EAAelO,EAAI1B,GACrD,MAAME,WAAEA,EAAFD,cAAcA,GAAkByB,EAEtC,OAAIzB,GACAD,EAAMuP,GAAaK,EACZ5P,GAGJpD,EAAI/C,MAAMrN,IAAI0T,EAAYqP,EAAWK,EAAe5P,GA+CvC6P,CAAkBN,EAAWC,EAAgB9N,EAAI1B,GACrE,MAAO,CACH4B,OAAQlH,EACRsF,MAAO2P,EACP5S,QAAS0S,GAhEjBxpB,OAAOC,eAAempB,GAAkB1U,EAAY,CAChDxU,YAAY,EACZK,MAAOmU,IA4FImV,OAzBR,SAAwBC,GAC3B,MAAQT,OAAQU,GAAeD,EACzBT,EAASrpB,OAAOkX,QAAQ6S,GACzBjkB,OAAO,CAACnB,GAAM2kB,EAAWU,MAAlB,IACDrlB,EACH4X,CAAC+M,GAAY,IAAIxD,GAAMkE,KACvB,IAUR,MAAO,CACH9P,cATkB,IAClBla,OAAOkX,QAAQmS,GACVvjB,OAAO,CAACnB,GAAM2kB,EAAWrQ,MAAlB,IACDtU,EACH4X,CAAC+M,GAAYrQ,EAAMiB,kBACnBkP,IAKRjQ,MAAOA,GAAMrY,KAAK,KAAMuoB,GACxB/P,OAAQA,GAAOxY,KAAK,KAAMuoB,GAE1B3D,SAAU4D,GAAaD,EAAOC,KC1FtC,MAAMW,GAAgB5pB,OAAO,2BAE7B,SAAS6pB,GAAcnQ,EAAOoQ,GAC1B,OAAOA,EAGJ,IAAMC,GAAb,WACI,SAAAA,GAAYC,OAAEA,EAAF7K,IAAUA,IAClBpZ,KAAKkkB,QAAUD,EACfjkB,KAAKmkB,KAAO/K,EAHpB,OAAA7F,IAAAyQ,EAAA,EAAAvpB,IAAA,YAAAV,IAAA,WAQQ,MAAO,IADUiG,KAAKkkB,QAAUlkB,KAAKkkB,QAAQE,UAAY,GACpCpkB,KAAKvF,SARlCupB,EAAA,GAYaK,GAAb,SAAAC,GACI,SAAAD,GAAYhR,MAAEA,KAAUzP,IAAS,IAAAsW,EAAA,OAC7BA,EAAAoK,EAAAjrB,KAAA2G,KAAM4D,IAAN5D,MACKukB,OAASlR,EAFe6G,EADrC,OAAAE,KAAAiK,EAAAC,GAAA/Q,IAAA8Q,EAAA,EAAA5pB,IAAA,MAAAV,IAAA,WAOQ,OAAOiG,KAAKukB,OAAO5R,YAP3B,CAAAlY,IAAA,eAAAV,IAAA,WAWQ,MAAO,CAACiG,KAAKmkB,KAAML,MAX3B,CAAArpB,IAAA,aAAAV,IAAA,WAeQ,MAAO,EAAGoc,CAACnW,KAAKukB,OAAO5R,WAAYd,GAAckS,KAC7C,QAAqB,IAAVA,EACP,OAAOlS,EAAWO,MAAMT,aAE5B,GAAIjU,MAAMS,QAAQ4lB,GAAQ,CACtB,MAAMrO,YAAEA,GAAgB7D,EAOxB,OAAOA,EACF7F,OAAOrD,GAAYob,EAAMtO,SAAS9M,EAAS+M,KAC3C/D,aAET,MAAMhJ,EAAWkJ,EAAWH,OAAOqS,GACnC,OAAOpb,EAAWA,EAAS0V,IAAM,QAhC7C,CAAA5jB,IAAA,cAAAV,IAAA,WAqCQ,MAAO,CAAC4Z,EAAOoQ,SACO,IAAVA,EAAyBF,GAAgBE,MAtC7DM,EAAA,CAAuCL,IA2CjCQ,eACF,SAAAA,GAAYnR,MACRA,KAAUzP,IACX,IAAA4W,EAAA,OACCA,EAAAiK,EAAAprB,KAAA2G,KAAM4D,IAAN5D,MACKukB,OAASlR,EAFfmH,2DAMC,MAAO,CAAC9H,EAASqR,KAAUngB,KACvB,MAAQuS,CAACnW,KAAKukB,OAAO5R,WAAYd,GAAea,EAChD,YAAqB,IAAVqR,EACAlS,EAAWO,MAAMR,eACnBrT,IAAIoK,GAAY3I,KAAK0kB,iBAAiB/b,EAAU+J,KAAY9O,IAEjElG,MAAMS,QAAQ4lB,GACPA,EAAMxlB,IAAIkT,GACbzR,KAAK0kB,iBAAiB7S,EAAWH,OAAOD,GAAKiB,KAAY9O,IAG1D5D,KAAK0kB,iBAAiB7S,EAAWH,OAAOqS,GAAQrR,KAAY9O,WApB1CogB,IAyBxBW,GAAb,SAAAC,GACI,SAAAD,GAAYrM,MACRA,EADQuM,aACDA,EADChmB,SACaA,KAAa+E,IACnC,IAAAqX,EAAA,OACCA,EAAA2J,EAAAvrB,KAAA2G,KAAM4D,IAAN5D,MACK8kB,OAASxM,EACd2C,EAAK8J,cAAgBF,EACrB5J,EAAK+J,UAAYnmB,EAJlBoc,EAHP,OAAAb,KAAAuK,EAAAC,GAAAD,EAAA7pB,UAwBI4pB,iBAAA,SAAiB/b,EAAU+J,EAASiB,GAChC,IAAKhL,EAAU,OAAO,KACtB,MACIwN,CAACnW,KAAK+kB,eAAgB5qB,GACtBwO,EACJ,IAAKxO,EAAO,OAAO,KACnB,MACIgc,CAACnW,KAAK8kB,OAAO/L,cACTrD,YAAauP,IAEjBvS,EACJ,OAAOvY,EAAMwX,aACRpT,IAAI8f,GAAOre,KAAKglB,UAAUrR,EAAO0K,EAAI4G,MApClD1R,IAAAoR,EAAA,EAAAlqB,IAAA,MAAAV,IAAA,WAWQ,OAAOiG,KAAKglB,YAXpB,CAAAvqB,IAAA,eAAAV,IAAA,WAeQ,MAAO,CAACiG,KAAKmkB,KAAML,GAAenQ,GAASA,KAfnD,CAAAlZ,IAAA,cAAAV,IAAA,WAmBQ,MAAO,CAAC4Z,EAAOoQ,SACO,IAAVA,EAAyBF,GAAgBE,MApB7DY,EAAA,CAAqCH,IAwCxBU,GAAb,SAAAC,GACI,SAAAD,GAAY5M,MACRA,EADQ8M,WACDA,EADCP,aACWA,EADXQ,UACyBA,KAAczhB,IAChD,IAAA0hB,EAAA,OACCA,EAAAH,EAAA9rB,KAAA2G,KAAM4D,IAAN5D,MACK8kB,OAASxM,EACdgN,EAAKC,YAAcH,EACnBE,EAAKP,cAAgBF,EACrBS,EAAKE,WAAaH,EALnBC,EAHPlL,KAAA8K,EAAAC,GAAA,IAAAM,EAAAP,EAAApqB,UAAA,OAAA2qB,EAyBIf,iBAAA,SAAiB/b,EAAU+J,GACvB,IAAK/J,EAAU,OAAO,KACtB,IAAIxO,EACJ,GAAI6F,KAAKkkB,mBAAmBG,GACxBlqB,EAAQwO,EAAS3I,KAAK+kB,oBACnB,GAAI/kB,KAAKkkB,mBAAmBgB,EAAmB,CAClD,MACI/O,CAACnW,KAAKkkB,QAAQnL,aAAc2M,GAC5BhT,EACEiT,EAAY3lB,KAAKkkB,QAAQQ,iBAAiB/b,EAAU+J,GACpDkT,EAAiBD,EAAY,IAAID,EAAcC,GAAa,KAClExrB,EAAQyrB,EAAiBA,EAAe5lB,KAAK+kB,eAAiB,KAElE,OAAI5qB,aAAiBsiB,GACVtiB,EAAQA,EAAMkkB,IAAM,KAE3BlkB,aAAiB6W,GACV7W,EAAMwX,aAEVxX,GA5CfsrB,EA+CIlnB,IAAA,SAAIM,GACA,GAAIA,aAAoBwlB,GACpB,MAAIrkB,KAAK+Y,cAAgBla,EAAS0lB,OAAO5R,UAC/B,IAAIlU,0EAA0EuB,KAAK+kB,4IAA4I/kB,KAAK+Y,uDAEpO,IAAIta,yBAAyBI,EAAS0lB,OAAO5R,sGAAsG3S,KAAK+Y,uDAE/J,GAAIla,aAAoBqmB,GAC3B,GAAIllB,KAAK+Y,cAAgBla,EAAS0lB,OAAO5R,UACrC,MAAM,IAAIlU,uCAAuCI,EAAS0lB,OAAO5R,qGAAqG3S,KAAK+Y,4DAE5K,IACFla,GACmB,mBAAbA,IACNA,EAASd,eAEV,MAAM,IAAIU,8DAA8DonB,KAAKC,UAAUjnB,qBAA4BA,KAEvH,KACMmB,KAAK8kB,kBAAkB/J,IACvB/a,KAAK8kB,kBAAkB1J,IAEzB,MAAM,IAAI3c,MAAM,kDAEpB,OAAO,IAAIkmB,GAAgB,CACvBV,OAAQjkB,KACRqT,MAAOrT,KAAKukB,OACZnL,IAAKpZ,KAAKmkB,KACV7L,MAAOtY,KAAK8kB,OACZD,aAAc7kB,KAAK+kB,cACnBlmB,cA7EZ0U,IAAA2R,EAAA,EAAAzqB,IAAA,MAAAV,IAAA,WAYQ,OAAOiG,KAAK+kB,gBAZpB,CAAAtqB,IAAA,eAAAV,IAAA,WAgBQ,MAAO,CAACiG,KAAKmkB,KAAML,MAhB3B,CAAArpB,IAAA,cAAAV,IAAA,WAoBQ,MAAO,CAAC4Z,EAAOoQ,SACO,IAAVA,EAAyBF,GAAgBE,IArB7D,CAAAtpB,IAAA,cAAAV,IAAA,WAkFQ,MAAoC,SAA5BiG,KAAK8kB,OAAO/L,YACd/Y,KAAKulB,YAAY5S,UACjB3S,KAAK8kB,OAAO/L,gBApF1BmM,EAAA,CAAuCV,IAwFvC,SAASuB,IAAwB9B,OAC7BA,EAD6B5Q,MACrBA,EADqBiF,MACdA,EADcuM,aACPA,EADOzL,IACOA,EADPiM,UACYA,IAEzC,MAAMW,EAAoB,IAAId,GAAkB,CAC5CjB,SACA5Q,QACA+F,MACAd,QACAuM,eACAQ,cAGJ,KAAM/M,aAAiBgC,IAEnB,OAAO0L,EAGX,GAAI/B,aAAkBiB,KAGbjB,EAAOa,kBAAkB/J,IAAckJ,EAAOuB,YAE9CvB,EAAOa,kBAAkB1J,IAE1B,MAAM,IAAI3c,wCAAwCwlB,EAAOc,iBAAiBF,iBAA4BZ,EAAOc,0CAGrH,MAAMhM,YAAEA,GAAgBT,EACxB,IAAKS,EAAa,OAAOiN,EACzB,MAAMxN,EAAUY,EAAIrf,IACA,SAAhBgf,EAAyB1F,EAAMV,UAAYoG,GAiC/C,OA/BAnf,OAAOkX,QAAQ0H,EAAQmD,QAAQlS,QAAQ,EAAEwc,EAAkBC,MACvD,MAAMC,EAAoBD,EAAaxL,IAAMuL,EAC7CrsB,OAAOC,eAAemsB,EAAmBG,EAAmB,CACxDpsB,IAAK,IAAMgsB,GAAwB,CAC/B9B,OAAQ+B,EACR3S,QACA+R,WAAY5M,EACZF,MAAO4N,EACPrB,aAAcsB,EACd/M,MACAiM,WAAW,QAIvBzrB,OAAOkX,QAAQ0H,EAAQG,eAAelP,QAAQ,EAAEwc,EAAkBC,MAC9D,MAAMC,EAAoBD,EAAaxL,IAAMuL,EACzCD,EAAkBjrB,eAAeorB,IAGrCvsB,OAAOC,eAAemsB,EAAmBG,EAAmB,CACxDpsB,IAAK,IAAMgsB,GAAwB,CAC/B9B,OAAQ+B,EACR3S,QACA+R,WAAY5M,EACZF,MAAO4N,EACPrB,aAAcsB,EACd/M,MACAiM,WAAW,QAIhBW,EC5QX,MAAMI,GAAe,CACjB3C,eAAgB4C,IAGdC,GAAyB,CAC3B,UACA,QAEEC,GAAwBC,GAAQF,GAAuB7Q,SAAS+Q,GAe/D,IAAMC,GAAb,WAII,SAAAA,EAAYvV,GACR,MAAMuS,eAAEA,GAAmB7pB,OAAOiQ,OAAO,GAAIuc,GAAelV,GAAQ,IACpElR,KAAKyjB,eAAiBA,EACtBzjB,KAAK0mB,SAAW,GAChB1mB,KAAK2mB,sBAAwB,GAC7B3mB,KAAK4mB,gBAAkB,GACvB5mB,KAAK6mB,cAAgB3V,EAAOA,EAAK2V,cAAgB,KAVzD,IAAA3mB,EAAAumB,EAAA3rB,UAAA,OAAAoF,EAuBI4mB,SAAA,YAAY7S,GACRA,EAAOxK,QAAS4J,IACZ,QAAwBtW,IAApBsW,EAAMV,UACN,MAAM,IAAIlU,MAAM,wDAGpB4U,EAAM0J,uBAEN/c,KAAK+mB,4BAA4B1T,GACjCrT,KAAK0mB,SAAS3nB,KAAKsU,GAEnBzZ,OAAOC,eAAemG,KAAMqT,EAAMV,UAAW,CACzC5Y,IAAK,KAEDiG,KAAKgnB,sBAAsBhnB,KAAK0mB,UDmN7C,UAAiCrT,MAAEA,EAAF+F,IAASA,IAC7C,MAAM6N,EAAoB,IAAI5C,GAAkB,CAC5CJ,OAAQ,KACR7K,MACA/F,UAoCJ,OAjCAzZ,OAAOkX,QAAQuC,EAAMsI,QAAQlS,QAAQ,EAAEmF,EAAW0J,MAC9C,MAAM6N,EAAoB7N,EAAMoC,IAAM9L,EACtChV,OAAOC,eAAeotB,EAAmBd,EAAmB,CACxDpsB,IAAK,IAAMgsB,GAAwB,CAC/B9B,OAAQgD,EACR5T,QACA+R,WAAY/R,EACZiF,QACAuM,aAAcsB,EACd/M,MACAiM,WAAW,QAKvBzrB,OAAOkX,QAAQuC,EAAMsF,eAAelP,QAAQ,EAAEmF,EAAW0J,MACrD,MAAM6N,EAAoB7N,EAAMoC,IAAM9L,EAClCqY,EAAkBlsB,eAAeorB,IAGrCvsB,OAAOC,eAAeotB,EAAmBd,EAAmB,CACxDpsB,IAAK,IAAMgsB,GAAwB,CAC/B9B,OAAQgD,EACR5T,QACA+R,WAAY/R,EACZiF,QACAuM,aAAcsB,EACd/M,MACAiM,WAAW,QAKhB4B,ECzPgBC,CAAwB,CAC3B7T,QACA+F,IAAKpZ,aAzC7BE,EAgDI6mB,4BAAA,SAA4B1T,GACxB,MAAMsI,OAAEA,GAAWtI,EACb8T,EAAgB9T,EAAMV,UAE5B/Y,OAAOkX,QAAQ6K,GAAQlS,QAAQ,EAAEmF,EAAWwY,MACxC,KAAMA,aAAyBhM,IAC3B,OAGJ,IAAIrC,EAEAA,EAD8B,SAA9BqO,EAAcrO,YACAoO,EAEAC,EAAcrO,YAGhC,MAAMsO,EAAkBF,IAAkBpO,EACpCuO,EAAgBtY,EAAiBmY,GACjCI,EAActY,EAAe8J,GAEnC,GAAIqO,EAActP,SACd,GAAIuP,IAAoBD,EAAcvQ,cAClC,MAAM,IAAIpY,MACN,qDACI0oB,KAAiBvY,6BACXwY,EAActP,mBACxB,+GAKL,CACH,MAAM0P,EAAO,SAAAC,GAAA,SAAAzQ,IAAA,OAAAyQ,EAAApqB,MAAA2C,KAAAlD,YAAAkD,KAAA,OAAAoa,KAAApD,EAAAyQ,GAAAzQ,EAAA,CAA8ByF,IAE3C+K,EAAQ7U,UAAYjE,EAAQyY,EAAevY,GAE3C,MAAM8Y,EAAe,SAAAC,GAAA,SAAAC,IAAA,OAAAD,EAAAtqB,MAAA2C,KAAAlD,YAAAkD,KAAA,OAAAoa,KAAAwN,EAAAD,GAAApU,IAAAqU,EAAA,EAAAntB,IAAA,gCAAAV,IAAA,WAEb,OAAO,IAFM,CAAAU,IAAA,8BAAAV,IAAA,WAMb,OAAO,MANM6tB,EAAA,CAAwC7M,IASvD8M,EAAkBR,EAClBK,EACA3M,GACNyM,EAAQ7L,OAAS,CACblK,GAAIyD,KACJiB,CAACmR,GAAgB,IAAIO,EAAgBV,GACrChR,CAACoR,GAAc,IAAIM,EAAgB9O,IAGvCyO,EAAQzK,uBACR/c,KAAK2mB,sBAAsB5nB,KAAKyoB,OAvGhDtnB,EAkHInG,IAAA,SAAI4Y,GACA,MAAMmV,EAAY9nB,KAAK0mB,SAAS9nB,OAAOoB,KAAK2mB,uBACtCoB,EAAQnuB,OAAO4F,OAAOsoB,GAAWhM,KACnCzI,GAASA,EAAMV,YAAcA,GAGjC,QAAqB,IAAVoV,EACP,MAAM,IAAItpB,4BAA4BkU,oBAE1C,OAAOoV,GA3Hf7nB,EA8HIgU,gBAAA,WAGI,OAFAlU,KAAKgnB,sBAAsBhnB,KAAK0mB,UAChC1mB,KAAKgnB,sBAAsBhnB,KAAK2mB,uBACzB3mB,KAAK0mB,SAAS9nB,OAAOoB,KAAK2mB,wBAjIzCzmB,EAoII8nB,mBAAA,WAcI,MAAO,CAAE/E,OAbMjjB,KAAKkU,kBACExU,OAAO,CAACuoB,EAAMxY,KAChC,MAAMyT,EAAYzT,EAAWkD,UACvBiR,EAAYnU,EAAWwN,eAQ7B,OAPArjB,OAAO0F,KAAKskB,GAAW5X,OAAOua,IAAuB9c,QAAShP,IAC1D,MAAM,IAAIgE,4BAA4BhE,eAAiByoB,gBAE3D+E,EAAK/E,GAAa,CACdvH,OAAQ,IAAKlM,EAAWkM,WACrBiI,GAEAqE,GACR,MAjJX/nB,EAqJIgoB,YAAA,WAII,OAHKloB,KAAK0T,KACN1T,KAAK0T,GAAK1T,KAAKyjB,eAAezjB,KAAKgoB,uBAEhChoB,KAAK0T,IAzJpBxT,EAgKI4T,cAAA,WACI,OAAO9T,KAAKkoB,cAAcpU,iBAjKlC5T,EA0KIwS,QAAA,SAAQiB,GACJ,OAAO,IAAIH,GAAQxT,KAAMA,KAAKkoB,cAAevU,IA3KrDzT,EAoLIioB,eAAA,SAAexU,GACX,OAAO,IAAIH,GAAQxT,KAAMA,KAAKkoB,cAAevU,GAAO,IArL5DzT,EA2LI8mB,sBAAA,SAAsB/S,GAClBA,EAAOjI,OAAOqH,IAAUA,EAAM2J,SAASvT,QAAS4J,IAC5C,MAAMsI,OAAEA,EAAFhJ,UAAUA,EAAVjD,cAAqBA,GAAkB2D,EAC7CzZ,OAAOkX,QAAQ6K,GAAQlS,QAAQ,EAAEmF,EAAW0J,MACnCtY,KAAKooB,kBAAkBzV,EAAW/D,KACnC5O,KAAKqoB,cAAc/P,EAAO1J,EAAWyE,GACrCrT,KAAKsoB,mBAAmB3V,EAAW/D,MAG3CY,GAAsB6D,EAAO3D,GAC7B2D,EAAM2J,SAAU,KArM5B9c,EA4MIkoB,kBAAA,SAAkBzV,EAAW/D,GACzB,QAAO5O,KAAK4mB,gBAAgB7rB,eAAe4X,MACnC3S,KAAK4mB,gBAAgBjU,GAAW/D,IA9MhD1O,EAqNIooB,mBAAA,SAAmB3V,EAAW/D,GACrB5O,KAAK4mB,gBAAgB7rB,eAAe4X,KACrC3S,KAAK4mB,gBAAgBjU,GAAa,IAEtC3S,KAAK4mB,gBAAgBjU,GAAW/D,IAAa,GAzNrD1O,EAgOImoB,cAAA,SAAc/P,EAAO1J,EAAWyE,GAE3B,IAAIkV,EADkBjQ,EAAMkQ,gBACT,CAChBlQ,QACA1J,YACAyE,QACA+F,IAAKpZ,OACLsZ,OAvOZpZ,EA+OI0T,cAAA,SAAcD,GAKV,OAJApF,EACI,kGAGGvO,KAAKmoB,eAAexU,IApPnCzT,EA0PI0E,KAAA,SAAK+O,GAKD,OAJApF,EACI,kFAGGvO,KAAK0S,QAAQiB,IA/P5BzT,EAqQIuoB,gBAAA,WAKI,OAJAla,EACI,mGAGGvO,KAAK8T,iBA1QpB5T,EAgRItH,OAAA,WACI,MAAM,IAAI6F,MACN,0EAlRZgoB,EAAA,GA8ReA,+BCtUf,MAAMjqB,GAAuB,CAACC,EAAGC,IAAMD,IAAMC,EAGvCgsB,GAAa5f,GACfA,GACe,iBAARA,GACPA,EAAI/N,eAAeuT,GAGjBqa,GAAe,CAAC3rB,EAAU4rB,EAAU/rB,IACtC+rB,EAAS5c,OAAOlD,IAAQ4f,GAAW5f,IAC9B1K,MAAM,CAAC0K,EAAKlJ,IACT/C,EAAciM,EAAK9L,EAAS4C,KAQlCipB,GAAiC,CAACC,EAAUC,EAAU3P,KACxD,MAAMvE,kBACFA,GACAiU,EAEJ,OAAOlvB,OAAOkX,QAAQ+D,GAAmBzW,MAAM,EAAEuU,EAAWqW,MAExD,GAAIF,EAASC,SAASpW,KAAeoW,EAASpW,GAC1C,OAAO,EAGX,MAAM8M,QAAEA,GAAYrG,EAAI8O,cAAc5I,SAAS3M,IAEvCwD,CAACsJ,GAAUwJ,GAAiBH,EAASC,SAASpW,IAC9CwD,CAACsJ,GAAUjO,GAASuX,EAASpW,GAGrC,MArBa,EAACiK,EAAKsM,EAAOC,IAC9BvM,EAAIxe,MAAMqT,GAAMyX,EAAMzX,KAAQ0X,EAAM1X,IAoBzB2X,CADaxvB,OAAO0F,KAAK0pB,GACCC,EAAczX,MAIjD6X,GAA0B,CAACP,EAAUC,KACvC,MAAM5T,gBACFA,GACA2T,EAEJ,OAAOlvB,OAAOkX,QAAQqE,GAAiB/W,MAAM,EAAEuU,EAAWsC,KACtDrb,OAAOkX,QAAQmE,GAAS7W,MAAM,EAAEkrB,EAAQ9pB,KACpCA,EAAOpB,MAAMjE,GACT2uB,EAASC,SAASpW,GAAWsC,QAAQqU,GAAQnvB,KACrC4uB,EAASpW,GAAWsC,QAAQqU,GAAQnvB,OAMtDovB,GAAiC,CAACT,EAAUC,IAC9CD,EAASU,uBAAuBprB,MAAMuU,GAClCmW,EAASC,SAASpW,KACVoW,EAASpW,IA6ClB,SAASpV,GAAQX,EAAM6sB,EAAmBjtB,GAAsB4c,GACnE,IAAI0P,EAAW,CAEXrlB,OAAQ,KAERsB,KAAM,KAONgkB,SAAU,KAMVS,uBAAwB,GAOxB3U,kBAAmB,GAQnBM,gBAAiB,IAGrB,MAAO,IAAIuU,KAKP,MAAOX,KAAahkB,GAAQ2kB,EAG5B,GADgC1X,QAAQ8W,EAAS/jB,OAG7C4jB,GAAaG,EAAS/jB,KAAMA,EAAM0kB,IAClCF,GAA+BT,EAAUC,IACzCM,GAAwBP,EAAUC,IAClCF,GAA+BC,EAAUC,EAAU3P,GAMnD,OAAO0P,EAASrlB,OAQpB,MAAMiP,EAAU0G,EAAI1G,QAAQqW,GAEtBY,EAAkB5kB,EAAKxG,IAAIuK,GAAQ4f,GAAW5f,GAAO4J,EAAU5J,GAG/DrF,EAAS7G,KAAQ+sB,GAqBvB,OAfAb,EAAW,CAEP/jB,OAEAtB,SAEAslB,WAEAlU,kBAAmBnC,EAAQkX,uBAE3BzU,gBAAiBzC,EAAQyC,gBAEzBqU,uBAAwB9W,EAAQ8W,wBAG7B/lB,GC7JR,SAASomB,GAAczQ,EAAK0Q,EAnB5B,SAAwBpX,EAASU,GACpCV,EAAQyB,mBAAmB1K,QAASgG,IACE,mBAAvBA,EAAWgR,SAElBhR,EAAWgR,QAAQrN,EAAQ3D,EAAYiD,OAgB/C,MAAO,CAACiB,EAAOP,KACX,MAAMV,EAAU0G,EAAI1G,QAAQiB,GAASyF,EAAItF,iBAEzC,OADAgW,EAAQpX,EAASU,GACVV,EAAQiB,OAcvB,SAASoW,GAAMjhB,GACX,OAAIA,aAAe2d,GACR3d,EAEPA,aAAekb,IACRlb,EAAIqb,KAKnB,MAAM6F,GAAgB,IAAIvoB,IACpBwoB,GAAehwB,OAAO,sBAE5B,SAASiwB,GAAWphB,GAChB,GAAmB,mBAARA,EACP,OAAOA,EAEX,GAAIA,aAAe2d,GACf,OAAO3d,EAAI+d,cAKf,GAHI/d,aAAe6b,KACf7b,EAAIkc,UAAYkF,GAAWphB,EAAIkc,YAE/Blc,aAAekb,GAAc,CAC7B,MAAQG,KAAM/K,EAARgL,UAAaA,GAActb,EACjC,IAAIqhB,EACAC,EACJ,GAAIhG,GAAaA,EAAU/oB,OAAQ,CAE1B2uB,GAAcloB,IAAIsX,IACnB4Q,GAAc7pB,IAAIiZ,EAAK,IAAI3X,KAU/B2oB,EARAD,EAAeH,GAAcjwB,IAAIqf,GASjC,IAAK,IAAIlgB,EAAI,EAAGA,EAAIkrB,EAAU/oB,SAAUnC,EAC/BkxB,EAAMtoB,IAAIsiB,EAAUlrB,KACrBkxB,EAAMjqB,IAAIikB,EAAUlrB,GAAI,IAAIuI,KAEhC2oB,EAAQA,EAAMrwB,IAAIqqB,EAAUlrB,IAEhC,GAAIkxB,GAASA,EAAMtoB,IAAImoB,IAEnB,OAAOG,EAAMrwB,IAAIkwB,IAIzB,MAAMprB,GA/DkBopB,EA+DgBnf,EA9DrCuhB,KACHpC,EAAK/pB,aACL+pB,EAAKjqB,WAFFqsB,CAGLpC,EAAK/lB,YAAa,CAChBG,YAAa,IAAIb,gBACjBrC,gBAAiBC,MAgEjB,OALIglB,GAAaA,EAAU/oB,QAEvB+uB,EAAMjqB,IAAI8pB,GAAcprB,GAGrBA,EAtEf,IAAgCopB,EAwE5B,MAAM,IAAIxpB,gDAAgDonB,KAAKC,UAAUhd,qBAAuBA,KAqD7F,SAAS1J,MAAkB2F,GAC9B,IAAKA,EAAK1J,OACN,MAAM,IAAIoD,MAAM,+CAGpB,MAAM6rB,EAAYvlB,EAAK9G,MACjBC,EAAeR,MAAMS,QAAQ4G,EAAK,IAAMA,EAAK,GAAKA,EAElDqU,EAAMlb,EAAaK,IAAIwrB,IAAOjO,KAAK9J,SACnCuY,EAAarsB,EAAaK,IAAI2rB,IAEpC,GAAyB,mBAAdI,EAA0B,CACjC,IAAKlR,EACD,MAAM,IAAI3a,MAAM,0IACb,IAAK2a,EAAIyN,cACZ,MAAM,IAAIpoB,MAAM,6IACb,GAAiC,mBAAtB2a,EAAIyN,cAClB,MAAM,IAAIpoB,yIAAyIonB,KAAKC,UAAU1M,EAAIyN,iCAAiCzN,EAAIyN,iBAG/M,OAAOvpB,iCAAsBC,QAASR,EAAWqc,EAA1C9b,CACH,CAAC8b,EAAIyN,iBAAkB0D,GACvBD,GAIR,GAAIA,aAAqB7D,GACrB,MAAM,IAAIhoB,MAAM,kJAMpB,OAJI8rB,EAAWlvB,QACXkH,QAAQC,KAAK,gGAGV0nB,GAAWI,GC5MtBtxB,EAAAQ,EAAAgxB,EAAA,2BAAAC,KAAAzxB,EAAAQ,EAAAgxB,EAAA,4BAAAE,KAAA1xB,EAAAQ,EAAAgxB,EAAA,8BAAAG,KAAA3xB,EAAAQ,EAAAgxB,EAAA,6BAAAI,KAAA5xB,EAAAQ,EAAAgxB,EAAA,0BAAAK,KAAA7xB,EAAAQ,EAAAgxB,EAAA,wBAAAM,KAAA9xB,EAAAQ,EAAAgxB,EAAA,4BAAAO,KAAA/xB,EAAAQ,EAAAgxB,EAAA,+BAAAQ,KAAAhyB,EAAAQ,EAAAgxB,EAAA,+BAAAS,KAAAjyB,EAAAQ,EAAAgxB,EAAA,6BAAAU,KAAAlyB,EAAAQ,EAAAgxB,EAAA,uBAAApO,KAAApjB,EAAAQ,EAAAgxB,EAAA,yBAAAnO,KAAArjB,EAAAQ,EAAAgxB,EAAA,yBAAAW,KAAAnyB,EAAAQ,EAAAgxB,EAAA,6BAAAlO,KAAAtjB,EAAAQ,EAAAgxB,EAAA,kCAAAX,KAAA7wB,EAAAQ,EAAAgxB,EAAA,mCAAAprB,KAmBA,MAAMqrB,GH8SC,WACH,MAAM,IAAIhsB,MACN,wFG9SFisB,GAAU,WACZ,MAAM,IAAIjsB,MACN,mKAyBOge","file":"redux-orm.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ReduxOrm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxOrm\"] = factory();\n\telse\n\t\troot[\"ReduxOrm\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 33);\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","'use strict';\n\nexports.__esModule = true;\nexports.defaultMemoize = defaultMemoize;\nexports.createSelectorCreator = createSelectorCreator;\nexports.createStructuredSelector = createStructuredSelector;\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nfunction createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = defaultMemoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nvar createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);\n\nfunction createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('reselect')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'reselect'], factory) :\n  (factory((global['Re-reselect'] = {}),global.Reselect));\n}(this, (function (exports,reselect) { 'use strict';\n\n  function isStringOrNumber(value) {\n    return typeof value === 'string' || typeof value === 'number';\n  }\n\n  var FlatObjectCache =\n  /*#__PURE__*/\n  function () {\n    function FlatObjectCache() {\n      this._cache = {};\n    }\n\n    var _proto = FlatObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n    };\n\n    _proto.get = function get(key) {\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return FlatObjectCache;\n  }();\n\n  function validateCacheSize(cacheSize) {\n    if (cacheSize === undefined) {\n      throw new Error('Missing the required property \"cacheSize\".');\n    }\n\n    if (!Number.isInteger(cacheSize) || cacheSize <= 0) {\n      throw new Error('The \"cacheSize\" property must be a positive integer value.');\n    }\n  }\n\n  var FifoObjectCache =\n  /*#__PURE__*/\n  function () {\n    function FifoObjectCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = {};\n      this._cacheOrdering = [];\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = FifoObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n\n      this._cacheOrdering.push(key);\n\n      if (this._cacheOrdering.length > this._cacheSize) {\n        var earliest = this._cacheOrdering[0];\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      var index = this._cacheOrdering.indexOf(key);\n\n      if (index > -1) {\n        this._cacheOrdering.splice(index, 1);\n      }\n\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n      this._cacheOrdering = [];\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return FifoObjectCache;\n  }();\n\n  var LruObjectCache =\n  /*#__PURE__*/\n  function () {\n    function LruObjectCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = {};\n      this._cacheOrdering = [];\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = LruObjectCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache[key] = selectorFn;\n\n      this._registerCacheHit(key);\n\n      if (this._cacheOrdering.length > this._cacheSize) {\n        var earliest = this._cacheOrdering[0];\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      this._registerCacheHit(key);\n\n      return this._cache[key];\n    };\n\n    _proto.remove = function remove(key) {\n      this._deleteCacheHit(key);\n\n      delete this._cache[key];\n    };\n\n    _proto.clear = function clear() {\n      this._cache = {};\n      this._cacheOrdering = [];\n    };\n\n    _proto._registerCacheHit = function _registerCacheHit(key) {\n      this._deleteCacheHit(key);\n\n      this._cacheOrdering.push(key);\n    };\n\n    _proto._deleteCacheHit = function _deleteCacheHit(key) {\n      var index = this._cacheOrdering.indexOf(key);\n\n      if (index > -1) {\n        this._cacheOrdering.splice(index, 1);\n      }\n    };\n\n    _proto.isValidCacheKey = function isValidCacheKey(cacheKey) {\n      return isStringOrNumber(cacheKey);\n    };\n\n    return LruObjectCache;\n  }();\n\n  var FlatMapCache =\n  /*#__PURE__*/\n  function () {\n    function FlatMapCache() {\n      this._cache = new Map();\n    }\n\n    var _proto = FlatMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n    };\n\n    _proto.get = function get(key) {\n      return this._cache.get(key);\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache.delete(key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return FlatMapCache;\n  }();\n\n  var FifoMapCache =\n  /*#__PURE__*/\n  function () {\n    function FifoMapCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = new Map();\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = FifoMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n\n      if (this._cache.size > this._cacheSize) {\n        var earliest = this._cache.keys().next().value;\n\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      return this._cache.get(key);\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache.delete(key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return FifoMapCache;\n  }();\n\n  var LruMapCache =\n  /*#__PURE__*/\n  function () {\n    function LruMapCache(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          cacheSize = _ref.cacheSize;\n\n      validateCacheSize(cacheSize);\n      this._cache = new Map();\n      this._cacheSize = cacheSize;\n    }\n\n    var _proto = LruMapCache.prototype;\n\n    _proto.set = function set(key, selectorFn) {\n      this._cache.set(key, selectorFn);\n\n      if (this._cache.size > this._cacheSize) {\n        var earliest = this._cache.keys().next().value;\n\n        this.remove(earliest);\n      }\n    };\n\n    _proto.get = function get(key) {\n      var value = this._cache.get(key); // Register cache hit\n\n\n      if (this._cache.has(key)) {\n        this.remove(key);\n\n        this._cache.set(key, value);\n      }\n\n      return value;\n    };\n\n    _proto.remove = function remove(key) {\n      this._cache.delete(key);\n    };\n\n    _proto.clear = function clear() {\n      this._cache.clear();\n    };\n\n    return LruMapCache;\n  }();\n\n  var defaultCacheCreator = FlatObjectCache;\n\n  var defaultCacheKeyValidator = function defaultCacheKeyValidator() {\n    return true;\n  };\n\n  function createCachedSelector() {\n    for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n      funcs[_key] = arguments[_key];\n    }\n\n    return function (keySelector, options) {\n      if (options === void 0) {\n        options = {};\n      }\n\n      // @NOTE Versions 0.x/1.x accepted \"options\" as a function\n      if (typeof options === 'function') {\n        throw new Error('[re-reselect] Second argument \"options\" must be an object. Please use \"options.selectorCreator\" to provide a custom selectorCreator.');\n      } // https://github.com/reduxjs/reselect/blob/v4.0.0/src/index.js#L54\n\n\n      var recomputations = 0;\n      var resultFunc = funcs.pop();\n      var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs.concat();\n\n      var resultFuncWithRecomputations = function resultFuncWithRecomputations() {\n        recomputations++;\n        return resultFunc.apply(void 0, arguments);\n      };\n\n      funcs.push(resultFuncWithRecomputations);\n      var cache = options.cacheObject || new defaultCacheCreator();\n      var selectorCreator = options.selectorCreator || reselect.createSelector;\n      var isValidCacheKey = cache.isValidCacheKey || defaultCacheKeyValidator; // Application receives this function\n\n      var selector = function selector() {\n        var cacheKey = keySelector.apply(void 0, arguments);\n\n        if (isValidCacheKey(cacheKey)) {\n          var cacheResponse = cache.get(cacheKey);\n\n          if (cacheResponse === undefined) {\n            cacheResponse = selectorCreator.apply(void 0, funcs);\n            cache.set(cacheKey, cacheResponse);\n          }\n\n          return cacheResponse.apply(void 0, arguments);\n        }\n\n        console.warn(\"[re-reselect] Invalid cache key \\\"\" + cacheKey + \"\\\" has been returned by keySelector function.\");\n        return undefined;\n      }; // Further selector methods\n\n\n      selector.getMatchingSelector = function () {\n        var cacheKey = keySelector.apply(void 0, arguments); // @NOTE It might update cache hit count in LRU-like caches\n\n        return cache.get(cacheKey);\n      };\n\n      selector.removeMatchingSelector = function () {\n        var cacheKey = keySelector.apply(void 0, arguments);\n        cache.remove(cacheKey);\n      };\n\n      selector.clearCache = function () {\n        cache.clear();\n      };\n\n      selector.resultFunc = resultFunc;\n      selector.dependencies = dependencies;\n      selector.cache = cache;\n\n      selector.recomputations = function () {\n        return recomputations;\n      };\n\n      selector.resetRecomputations = function () {\n        return recomputations = 0;\n      };\n\n      selector.keySelector = keySelector;\n      return selector;\n    };\n  }\n\n  exports.default = createCachedSelector;\n  exports.FlatObjectCache = FlatObjectCache;\n  exports.FlatCacheObject = FlatObjectCache;\n  exports.FifoObjectCache = FifoObjectCache;\n  exports.LruObjectCache = LruObjectCache;\n  exports.FlatMapCache = FlatMapCache;\n  exports.FifoMapCache = FifoMapCache;\n  exports.LruMapCache = LruMapCache;\n  exports.FifoCacheObject = FifoObjectCache;\n  exports.LruCacheObject = LruMapCache;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    negate = require('./negate');\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nmodule.exports = reject;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nmodule.exports = head;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","export default function _isPlaceholder(a) {\n       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","import _curry1 from './_curry1.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport _curry2 from './internal/_curry2.js';\nimport _curryN from './internal/_curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;","import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default { '@@functional/placeholder': true };","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { curry, __ as placeholder } from 'ramda';\n\nfunction forOwn(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(obj[key], key);\n    }\n  }\n}\n\nfunction isArrayLike(value) {\n  return value && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n}\n\nvar OWNER_ID_TAG = '@@_______immutableOpsOwnerID';\n\nfunction fastArrayCopy(arr) {\n  var copied = new Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    copied[i] = arr[i];\n  }\n\n  return copied;\n}\n\nexport function canMutate(obj, ownerID) {\n  if (!ownerID) return false;\n  return obj[OWNER_ID_TAG] === ownerID;\n}\nvar newOwnerID = typeof Symbol === 'function' ? function () {\n  return Symbol('ownerID');\n} : function () {\n  return {};\n};\nexport var getBatchToken = newOwnerID;\n\nfunction addOwnerID(obj, ownerID) {\n  Object.defineProperty(obj, OWNER_ID_TAG, {\n    value: ownerID,\n    configurable: true,\n    enumerable: false\n  });\n  return obj;\n}\n\nfunction prepareNewObject(instance, ownerID) {\n  if (ownerID) {\n    addOwnerID(instance, ownerID);\n  }\n\n  return instance;\n}\n\nfunction forceArray(arg) {\n  if (!(arg instanceof Array)) {\n    return [arg];\n  }\n\n  return arg;\n}\n\nvar PATH_SEPARATOR = '.';\n\nfunction normalizePath(pathArg) {\n  if (typeof pathArg === 'string') {\n    if (pathArg.indexOf(PATH_SEPARATOR) === -1) {\n      return [pathArg];\n    }\n\n    return pathArg.split(PATH_SEPARATOR);\n  }\n\n  return pathArg;\n}\n\nfunction mutableSet(key, value, obj) {\n  obj[key] = value;\n  return obj;\n}\n\nfunction mutableSetIn(_pathArg, value, obj) {\n  var originalPathArg = normalizePath(_pathArg);\n  var pathLen = originalPathArg.length;\n  var done = false;\n  var idx = 0;\n  var acc = obj;\n  var curr = originalPathArg[idx];\n\n  while (!done) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      done = true;\n    } else {\n      var currType = _typeof(acc[curr]);\n\n      if (currType === 'undefined') {\n        var newObj = {};\n        prepareNewObject(newObj, null);\n        acc[curr] = newObj;\n      } else if (currType !== 'object') {\n        var pathRepr = \"\".concat(originalPathArg[idx - 1], \".\").concat(curr);\n        throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n      }\n\n      acc = acc[curr];\n      idx++;\n      curr = originalPathArg[idx];\n    }\n  }\n\n  return obj;\n}\n\nfunction valueInPath(_pathArg, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var acc = obj;\n\n  for (var i = 0; i < pathArg.length; i++) {\n    var curr = pathArg[i];\n    var currRef = acc[curr];\n\n    if (i === pathArg.length - 1) {\n      return currRef;\n    }\n\n    if (_typeof(currRef) === 'object') {\n      acc = currRef;\n    } else {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}\n\nfunction immutableSetIn(ownerID, _pathArg, value, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var currentValue = valueInPath(pathArg, obj);\n  if (value === currentValue) return obj;\n  var pathLen = pathArg.length;\n  var acc;\n\n  if (canMutate(obj, ownerID)) {\n    acc = obj;\n  } else {\n    acc = Object.assign(prepareNewObject({}, ownerID), obj);\n  }\n\n  var rootObj = acc;\n  pathArg.forEach(function (curr, idx) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      return;\n    }\n\n    var currRef = acc[curr];\n\n    var currType = _typeof(currRef);\n\n    if (currType === 'object') {\n      if (canMutate(currRef, ownerID)) {\n        acc = currRef;\n      } else {\n        var newObj = prepareNewObject({}, ownerID);\n        acc[curr] = Object.assign(newObj, currRef);\n        acc = newObj;\n      }\n\n      return;\n    }\n\n    if (currType === 'undefined') {\n      var _newObj = prepareNewObject({}, ownerID);\n\n      acc[curr] = _newObj;\n      acc = _newObj;\n      return;\n    }\n\n    var pathRepr = \"\".concat(pathArg[idx - 1], \".\").concat(curr);\n    throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n  });\n  return rootObj;\n}\n\nfunction mutableMerge(isDeep, _mergeObjs, baseObj) {\n  var mergeObjs = forceArray(_mergeObjs);\n\n  if (isDeep) {\n    mergeObjs.forEach(function (mergeObj) {\n      forOwn(mergeObj, function (value, key) {\n        if (isDeep && baseObj.hasOwnProperty(key)) {\n          var assignValue;\n\n          if (_typeof(value) === 'object') {\n            assignValue = mutableMerge(isDeep, [value], baseObj[key]);\n          } else {\n            assignValue = value;\n          }\n\n          baseObj[key] = assignValue;\n        } else {\n          baseObj[key] = value;\n        }\n      });\n    });\n  } else {\n    Object.assign.apply(Object, [baseObj].concat(_toConsumableArray(mergeObjs)));\n  }\n\n  return baseObj;\n}\n\nvar mutableShallowMerge = mutableMerge.bind(null, false);\nvar mutableDeepMerge = mutableMerge.bind(null, true);\n\nfunction mutableOmit(_keys, obj) {\n  var keys = forceArray(_keys);\n  keys.forEach(function (key) {\n    delete obj[key];\n  });\n  return obj;\n}\n\nfunction shouldMergeKey(obj, other, key) {\n  return obj[key] !== other[key];\n}\n\nfunction immutableMerge(isDeep, ownerID, _mergeObjs, obj) {\n  if (canMutate(obj, ownerID)) return mutableMerge(isDeep, _mergeObjs, obj);\n  var mergeObjs = forceArray(_mergeObjs);\n  var hasChanges = false;\n  var nextObject = obj;\n\n  var willChange = function willChange() {\n    if (!hasChanges) {\n      hasChanges = true;\n      nextObject = Object.assign({}, obj);\n      prepareNewObject(nextObject, ownerID);\n    }\n  };\n\n  mergeObjs.forEach(function (mergeObj) {\n    forOwn(mergeObj, function (mergeValue, key) {\n      if (isDeep && obj.hasOwnProperty(key)) {\n        var currentValue = nextObject[key];\n\n        if (_typeof(mergeValue) === 'object' && !(mergeValue instanceof Array)) {\n          if (shouldMergeKey(nextObject, mergeObj, key)) {\n            var recursiveMergeResult = immutableMerge(isDeep, ownerID, mergeValue, currentValue);\n\n            if (recursiveMergeResult !== currentValue) {\n              willChange();\n              nextObject[key] = recursiveMergeResult;\n            }\n          }\n\n          return true; // continue forOwn\n        }\n      }\n\n      if (shouldMergeKey(nextObject, mergeObj, key)) {\n        willChange();\n        nextObject[key] = mergeValue;\n      }\n\n      return undefined;\n    });\n  });\n  return nextObject;\n}\n\nvar immutableDeepMerge = immutableMerge.bind(null, true);\nvar immutableShallowMerge = immutableMerge.bind(null, false);\n\nfunction immutableArrSet(ownerID, index, value, arr) {\n  if (canMutate(arr, ownerID)) return mutableSet(index, value, arr);\n  if (arr[index] === value) return arr;\n  var newArr = fastArrayCopy(arr);\n  newArr[index] = value;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nfunction immutableSet(ownerID, key, value, obj) {\n  if (isArrayLike(obj)) return immutableArrSet(ownerID, key, value, obj);\n  if (canMutate(obj, ownerID)) return mutableSet(key, value, obj);\n  if (obj[key] === value) return obj;\n  var newObj = Object.assign({}, obj);\n  prepareNewObject(newObj, ownerID);\n  newObj[key] = value;\n  return newObj;\n}\n\nfunction immutableOmit(ownerID, _keys, obj) {\n  if (canMutate(obj, ownerID)) return mutableOmit(_keys, obj);\n  var keys = forceArray(_keys);\n  var keysInObj = keys.filter(function (key) {\n    return obj.hasOwnProperty(key);\n  }); // None of the keys were in the object, so we can return `obj`.\n\n  if (keysInObj.length === 0) return obj;\n  var newObj = Object.assign({}, obj);\n  keysInObj.forEach(function (key) {\n    delete newObj[key];\n  });\n  prepareNewObject(newObj, ownerID);\n  return newObj;\n}\n\nfunction mutableArrPush(_vals, arr) {\n  var vals = forceArray(_vals);\n  arr.push.apply(arr, _toConsumableArray(vals));\n  return arr;\n}\n\nfunction mutableArrFilter(func, arr) {\n  var currIndex = 0;\n  var originalIndex = 0;\n\n  while (currIndex < arr.length) {\n    var item = arr[currIndex];\n\n    if (!func(item, originalIndex)) {\n      arr.splice(currIndex, 1);\n    } else {\n      currIndex++;\n    }\n\n    originalIndex++;\n  }\n\n  return arr;\n}\n\nfunction mutableArrSplice(index, deleteCount, _vals, arr) {\n  var vals = forceArray(_vals);\n  arr.splice.apply(arr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return arr;\n}\n\nfunction mutableArrInsert(index, _vals, arr) {\n  return mutableArrSplice(index, 0, _vals, arr);\n}\n\nfunction immutableArrSplice(ownerID, index, deleteCount, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrSplice(index, deleteCount, _vals, arr);\n  var vals = forceArray(_vals);\n  var newArr = arr.slice();\n  prepareNewObject(newArr, ownerID);\n  newArr.splice.apply(newArr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return newArr;\n}\n\nfunction immutableArrInsert(ownerID, index, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrInsert(index, _vals, arr);\n  return immutableArrSplice(ownerID, index, 0, _vals, arr);\n}\n\nfunction immutableArrPush(ownerID, vals, arr) {\n  return immutableArrInsert(ownerID, arr.length, vals, arr);\n}\n\nfunction immutableArrFilter(ownerID, func, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrFilter(func, arr);\n  var newArr = arr.filter(func);\n  if (newArr.length === arr.length) return arr;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nvar immutableOperations = {\n  // object operations\n  merge: immutableShallowMerge,\n  deepMerge: immutableDeepMerge,\n  omit: immutableOmit,\n  setIn: immutableSetIn,\n  // array operations\n  insert: immutableArrInsert,\n  push: immutableArrPush,\n  filter: immutableArrFilter,\n  splice: immutableArrSplice,\n  // both\n  set: immutableSet\n};\nvar mutableOperations = {\n  // object operations\n  merge: mutableShallowMerge,\n  deepMerge: mutableDeepMerge,\n  omit: mutableOmit,\n  setIn: mutableSetIn,\n  // array operations\n  insert: mutableArrInsert,\n  push: mutableArrPush,\n  filter: mutableArrFilter,\n  splice: mutableArrSplice,\n  // both\n  set: mutableSet\n};\nexport function getImmutableOps() {\n  var immutableOps = Object.assign({}, immutableOperations);\n  forOwn(immutableOps, function (value, key) {\n    immutableOps[key] = curry(value.bind(null, null));\n  });\n  var mutableOps = Object.assign({}, mutableOperations);\n  forOwn(mutableOps, function (value, key) {\n    mutableOps[key] = curry(value);\n  });\n  var batchOps = Object.assign({}, immutableOperations);\n  forOwn(batchOps, function (value, key) {\n    batchOps[key] = curry(value);\n  });\n\n  function batched(_token, _fn) {\n    var token;\n    var fn;\n\n    if (typeof _token === 'function') {\n      fn = _token;\n      token = getBatchToken();\n    } else {\n      token = _token;\n      fn = _fn;\n    }\n\n    var immutableOpsBoundToToken = Object.assign({}, immutableOperations);\n    forOwn(immutableOpsBoundToToken, function (value, key) {\n      immutableOpsBoundToToken[key] = curry(value.bind(null, token));\n    });\n    return fn(immutableOpsBoundToToken);\n  }\n\n  return Object.assign(immutableOps, {\n    mutable: mutableOps,\n    batch: batchOps,\n    batched: batched,\n    __: placeholder,\n    getBatchToken: getBatchToken\n  });\n}\nexport var ops = getImmutableOps();\nexport default ops;","export const UPDATE = 'REDUX_ORM_UPDATE';\nexport const DELETE = 'REDUX_ORM_DELETE';\nexport const CREATE = 'REDUX_ORM_CREATE';\n\nexport const FILTER = 'REDUX_ORM_FILTER';\nexport const EXCLUDE = 'REDUX_ORM_EXCLUDE';\nexport const ORDER_BY = 'REDUX_ORM_ORDER_BY';\n\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';\n\nexport const STATE_FLAG = Symbol('REDUX_ORM_STATE_FLAG');\n","import ops from 'immutable-ops';\nimport { FILTER, EXCLUDE } from './constants';\n\n/**\n * @module utils\n */\n\nfunction warnDeprecated(msg) {\n    const logger = typeof console.warn === 'function'\n        ? console.warn.bind(console)\n        : console.log.bind(console);\n    return logger(msg);\n}\n\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\nfunction m2mName(declarationModelName, fieldName) {\n    return declarationModelName + capitalize(fieldName);\n}\n\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @private\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\nfunction m2mFromFieldName(declarationModelName) {\n    return `from${declarationModelName}Id`;\n}\n\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\nfunction m2mToFieldName(otherModelName) {\n    return `to${otherModelName}Id`;\n}\n\nfunction reverseFieldName(modelName) {\n    return modelName.toLowerCase() + 'Set'; // eslint-disable-line prefer-template\n}\n\nfunction querySetDelegatorFactory(methodName) {\n    return function querySetDelegator(...args) {\n        return this.getQuerySet()[methodName](...args);\n    };\n}\n\nfunction querySetGetterDelegatorFactory(getterName) {\n    return function querySetGetterDelegator() {\n        const qs = this.getQuerySet();\n        return qs[getterName];\n    };\n}\n\nfunction forEachSuperClass(subClass, func) {\n    let currClass = subClass;\n    while (currClass !== Function.prototype) {\n        func(currClass);\n        currClass = Object.getPrototypeOf(currClass);\n    }\n}\n\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n    const leftToDefine = querySetClass.sharedMethods.slice();\n\n    // There is no way to get a property descriptor for the whole prototype chain;\n    // only from an objects own properties. Therefore we traverse the whole prototype\n    // chain for querySet.\n    forEachSuperClass(querySetClass, (cls) => {\n        for (let i = 0; i < leftToDefine.length; i++) {\n            let defined = false;\n            const methodName = leftToDefine[i];\n            const descriptor = Object.getOwnPropertyDescriptor(cls.prototype, methodName);\n            if (typeof descriptor !== 'undefined') {\n                if (typeof descriptor.get !== 'undefined') {\n                    descriptor.get = querySetGetterDelegatorFactory(methodName);\n                    Object.defineProperty(modelClass, methodName, descriptor);\n                    defined = true;\n                } else if (typeof descriptor.value === 'function') {\n                    modelClass[methodName] = querySetDelegatorFactory(methodName);\n                    defined = true;\n                }\n            }\n            if (defined) {\n                leftToDefine.splice(i--, 1);\n            }\n        }\n    });\n}\n\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\nfunction normalizeEntity(entity) {\n    if (entity !== null &&\n            typeof entity !== 'undefined' &&\n            typeof entity.getId === 'function') {\n        return entity.getId();\n    }\n    return entity;\n}\n\nfunction reverseFieldErrorMessage(modelName, fieldName, toModelName, backwardsFieldName) {\n    return [\n        `Reverse field ${backwardsFieldName} already defined`,\n        ` on model ${toModelName}. To fix, set a custom related`,\n        ` name on ${modelName}.${fieldName}.`,\n    ].join('');\n}\n\nfunction objectShallowEquals(a, b) {\n    let keysInA = 0;\n\n    // eslint-disable-next-line consistent-return\n    Object.entries(Object(a)).forEach(([key, value]) => {\n        if (!b.hasOwnProperty(key) || b[key] !== value) {\n            return false;\n        }\n        keysInA++;\n    });\n\n    return keysInA === Object.keys(b).length;\n}\n\nfunction arrayDiffActions(sourceArr, targetArr) {\n    const itemsInBoth = sourceArr.filter(item => targetArr.includes(item));\n    const deleteItems = sourceArr.filter(item => !itemsInBoth.includes(item));\n    const addItems = targetArr.filter(item => !itemsInBoth.includes(item));\n\n    if (deleteItems.length || addItems.length) {\n        return {\n            delete: deleteItems,\n            add: addItems,\n        };\n    }\n    return null;\n}\n\nconst { getBatchToken } = ops;\n\nfunction clauseFiltersByAttribute({ type, payload }, attribute) {\n    if (type !== FILTER) return false;\n\n    if (typeof payload !== 'object') {\n        /**\n         * payload could also be a function in which case\n         * we would have no way of knowing what it does,\n         * so we default to false for non-objects\n         */\n        return false;\n    }\n\n    if (!payload.hasOwnProperty(attribute)) return false;\n    const attributeValue = payload[attribute];\n    if (attributeValue === null) return false;\n    if (attributeValue === undefined) return false;\n\n    return true;\n}\n\nfunction clauseReducesResultSetSize({ type }) {\n    return [FILTER, EXCLUDE].includes(type);\n}\n\nfunction mapValues(object, func) {\n    return Object.entries(object)\n        .reduce((newObject, [key, value]) => {\n            newObject[key] = func(value);\n            return newObject;\n        }, {});\n}\n\nexport {\n    attachQuerySetMethods,\n    m2mName,\n    m2mFromFieldName,\n    m2mToFieldName,\n    reverseFieldName,\n    normalizeEntity,\n    reverseFieldErrorMessage,\n    objectShallowEquals,\n    ops,\n    arrayDiffActions,\n    getBatchToken,\n    clauseFiltersByAttribute,\n    clauseReducesResultSetSize,\n    warnDeprecated,\n    mapValues,\n};\n","import {\n    normalizeEntity,\n    warnDeprecated,\n    mapValues,\n} from './utils';\n\nimport {\n    UPDATE,\n    DELETE,\n    FILTER,\n    EXCLUDE,\n    ORDER_BY,\n} from './constants';\n\n/**\n * This class is used to build and make queries to the database\n * and operating the resulting set (such as updating attributes\n * or deleting the records).\n *\n * The queries are built lazily. For example:\n *\n * ```javascript\n * const qs = Book.all()\n *     .filter(book => book.releaseYear > 1999)\n *     .orderBy('name');\n * ```\n *\n * Doesn't execute a query. The query is executed only when\n * you need information from the query result, such as {@link QuerySet#count},\n * {@link QuerySet#toRefArray}. After the query is executed, the resulting\n * set is cached in the QuerySet instance.\n *\n * QuerySet instances also return copies, so chaining filters doesn't\n * mutate the previous instances.\n */\nconst QuerySet = class QuerySet {\n    /**\n     * Creates a QuerySet. The constructor is mainly for internal use;\n     * You should access QuerySet instances from {@link Model}.\n     *\n     * @param  {Model} modelClass - the model class of objects in this QuerySet.\n     * @param  {any[]} clauses - query clauses needed to evaluate the set.\n     * @param {Object} [opts] - additional options\n     */\n    constructor(modelClass, clauses, opts) {\n        Object.assign(this, {\n            modelClass,\n            clauses: clauses || [],\n        });\n\n        this._opts = opts;\n    }\n\n    static addSharedMethod(methodName) {\n        this.sharedMethods = this.sharedMethods.concat(methodName);\n    }\n\n    _new(clauses, userOpts) {\n        const opts = Object.assign({}, this._opts, userOpts);\n        return new this.constructor(this.modelClass, clauses, opts);\n    }\n\n    toString() {\n        this._evaluate();\n        const contents = this.rows.map(({ id }) => this.modelClass.withId(id).toString()\n        ).join('\\n    - ');\n        return `QuerySet contents:\\n    - ${contents}`;\n    }\n\n    /**\n     * Returns an array of the plain objects represented by the QuerySet.\n     * The plain objects are direct references to the store.\n     *\n     * @return {Object[]} references to the plain JS objects represented by\n     *                    the QuerySet\n     */\n    toRefArray() {\n        return this._evaluate();\n    }\n\n    /**\n     * Returns an array of {@link Model} instances represented by the QuerySet.\n     * @return {Model[]} model instances represented by the QuerySet\n     */\n    toModelArray() {\n        const { modelClass: ModelClass } = this;\n        return this._evaluate().map(\n            props => new ModelClass(props)\n        );\n    }\n\n    /**\n     * Returns the number of {@link Model} instances represented by the QuerySet.\n     *\n     * @return {number} length of the QuerySet\n     */\n    count() {\n        this._evaluate();\n        return this.rows.length;\n    }\n\n    /**\n     * Checks if the {@link QuerySet} instance has any records matching the query\n     * in the database.\n     *\n     * @return {Boolean} `true` if the {@link QuerySet} instance contains entities, else `false`.\n     */\n    exists() {\n        return Boolean(this.count());\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `index` in the {@link QuerySet} instance if\n     * `withRefs` flag is set to `false`, or a reference to the plain JavaScript\n     * object in the model state if `true`.\n     *\n     * @param  {number} index - index of the model instance to get\n     * @return {Model|undefined} a {@link Model} instance at index\n     *                           `index` in the {@link QuerySet} instance,\n     *                           or undefined if the index is out of bounds.\n     */\n    at(index) {\n        const { modelClass: ModelClass } = this;\n\n        const rows = this._evaluate();\n        if (index >= 0 && index < rows.length) {\n            return new ModelClass(rows[index]);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns the {@link Model} instance at index 0 in the {@link QuerySet} instance.\n     * @return {Model}\n     */\n    first() {\n        return this.at(0);\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `QuerySet.count() - 1`\n     * @return {Model}\n     */\n    last() {\n        const rows = this._evaluate();\n        return this.at(rows.length - 1);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with the same entities.\n     * @return {QuerySet} a new QuerySet with the same entities.\n     */\n    all() {\n        return this._new(this.clauses);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that match properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to match objects with. Can also be a function.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that passed the filter.\n     */\n    filter(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n\n        const filterDescriptor = {\n            type: FILTER,\n            payload: normalizedLookupObj,\n        };\n        /**\n         * create a new QuerySet\n         * including only rows matching the lookupObj\n         */\n        return this._new(\n            this.clauses.concat(filterDescriptor)\n        );\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that do not match\n     * properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to unmatch objects with. Can also be a function.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that did not pass the filter.\n     */\n    exclude(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n        const excludeDescriptor = {\n            type: EXCLUDE,\n            payload: normalizedLookupObj,\n        };\n\n        /**\n         * create a new QuerySet\n         * excluding all rows matching the lookupObj\n         */\n        return this._new(\n            this.clauses.concat(excludeDescriptor)\n        );\n    }\n\n    /**\n     * Performs the actual database query.\n     * @private\n     * @return {Array} rows corresponding to the QuerySet's clauses\n     */\n    _evaluate() {\n        if (typeof this.modelClass.session === 'undefined') {\n            throw new Error([\n                `Tried to query the ${this.modelClass.modelName} model's table without a session. `,\n                'Create a session using `session = orm.session()` and use ',\n                `\\`session[\"${this.modelClass.modelName}\"]\\` for querying instead.`,\n            ].join(''));\n        }\n        if (!this._evaluated) {\n            const {\n                session,\n                modelName: table,\n            } = this.modelClass;\n            const querySpec = {\n                table,\n                clauses: this.clauses,\n            };\n            this.rows = session.query(querySpec).rows;\n            this._evaluated = true;\n        }\n        return this.rows;\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities ordered by `iteratees` in ascending\n     * order, unless otherwise specified. Delegates to `lodash.orderBy`.\n     *\n     * @param  {string[]|Function[]} iteratees - an array where each item can be a string or a\n     *                                           function. If a string is supplied, it should\n     *                                           correspond to property on the entity that will\n     *                                           determine the order. If a function is supplied,\n     *                                           it should return the value to order by.\n     * @param {Boolean[]} [orders] - the sort orders of `iteratees`. If unspecified, all iteratees\n     *                               will be sorted in ascending order. `true` and `'asc'`\n     *                               correspond to ascending order, and `false` and `'desc`\n     *                               to descending order.\n     * @return {QuerySet} a new {@link QuerySet} with objects ordered by `iteratees`.\n     */\n    orderBy(iteratees, orders) {\n        const orderByDescriptor = {\n            type: ORDER_BY,\n            payload: [iteratees, orders],\n        };\n\n        /**\n         * create a new QuerySet\n         * sorting all rows according to the passed arguments\n         */\n        return this._new(\n            this.clauses.concat(orderByDescriptor)\n        );\n    }\n\n    /**\n     * Records an update specified with `mergeObj` to all the objects\n     * in the {@link QuerySet} instance.\n     *\n     * @param  {Object} mergeObj - an object to merge with all the objects in this\n     *                             queryset.\n     * @return {undefined}\n     */\n    update(mergeObj) {\n        const {\n            session,\n            modelName: table,\n        } = this.modelClass;\n\n        session.applyUpdate({\n            action: UPDATE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n            payload: mergeObj,\n        });\n\n        this._evaluated = false;\n    }\n\n    /**\n     * Records a deletion of all the objects in this {@link QuerySet} instance.\n     * @return {undefined}\n     */\n    delete() {\n        const {\n            session,\n            modelName: table,\n        } = this.modelClass;\n\n        this.toModelArray().forEach(\n            model => model._onDelete() // eslint-disable-line no-underscore-dangle\n        );\n\n        session.applyUpdate({\n            action: DELETE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n        });\n\n        this._evaluated = false;\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated\n     * Use {@link QuerySet#toModelArray} or predicate functions that\n     * instantiate Models from refs, e.g. `new Model(ref)`.\n     */\n    get withModels() {\n        throw new Error(\n            '`QuerySet.prototype.withModels` has been removed. ' +\n            'Use `.toModelArray()` or predicate functions that ' +\n            'instantiate Models from refs, e.g. `new Model(ref)`.'\n        );\n    }\n\n    /**\n     * @deprecated Query building operates on refs only now.\n     */\n    get withRefs() {\n        warnDeprecated(\n            '`QuerySet.prototype.withRefs` has been deprecated. ' +\n            'Query building operates on refs only now.'\n        );\n        return undefined;\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to map.\n     */\n    map() {\n        throw new Error(\n            '`QuerySet.prototype.map` has been removed. ' +\n            'Call `.toModelArray()` or `.toRefArray()` first to map.'\n        );\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to iterate.\n     */\n    forEach() {\n        throw new Error(\n            '`QuerySet.prototype.forEach` has been removed. ' +\n            'Call `.toModelArray()` or `.toRefArray()` first to iterate.'\n        );\n    }\n};\n\nQuerySet.sharedMethods = [\n    'count',\n    'at',\n    'all',\n    'last',\n    'first',\n    'filter',\n    'exclude',\n    'orderBy',\n    'update',\n    'delete',\n];\n\nexport default QuerySet;\n","import { getBatchToken } from 'immutable-ops';\n\nimport { SUCCESS, UPDATE, DELETE } from './constants';\nimport { warnDeprecated, clauseFiltersByAttribute } from './utils';\n\nconst Session = class Session {\n    /**\n     * Creates a new Session.\n     *\n     * @param  {Database} db - a {@link Database} instance\n     * @param  {Object} state - the database state\n     * @param  {Boolean} [withMutations] - whether the session should mutate data\n     * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n     *                                 mutated.\n     */\n    constructor(schema, db, state, withMutations, batchToken) {\n        this.schema = schema;\n        this.db = db;\n        this.state = state || db.getEmptyState();\n        this.initialState = this.state;\n\n        this.withMutations = Boolean(withMutations);\n        this.batchToken = batchToken || getBatchToken();\n\n        this.modelData = {};\n\n        this.models = schema.getModelClasses();\n\n        this.sessionBoundModels = this.models.map((modelClass) => {\n            function SessionBoundModel() {\n                return Reflect.construct(modelClass, arguments, SessionBoundModel); // eslint-disable-line prefer-rest-params\n            }\n            Reflect.setPrototypeOf(SessionBoundModel.prototype, modelClass.prototype);\n            Reflect.setPrototypeOf(SessionBoundModel, modelClass);\n\n            Object.defineProperty(this, modelClass.modelName, {\n                get: () => SessionBoundModel,\n            });\n\n            SessionBoundModel.connect(this);\n            return SessionBoundModel;\n        });\n    }\n\n    getDataForModel(modelName) {\n        if (!this.modelData[modelName]) {\n            this.modelData[modelName] = {};\n        }\n        return this.modelData[modelName];\n    }\n\n    markAccessed(modelName, modelIds) {\n        const data = this.getDataForModel(modelName);\n        if (!data.accessedInstances) {\n            data.accessedInstances = {};\n        }\n        modelIds.forEach((id) => {\n            data.accessedInstances[id] = true;\n        });\n    }\n\n    get accessedModelInstances() {\n        return this.sessionBoundModels\n            .filter(({ modelName }) => this.getDataForModel(modelName).accessedInstances)\n            .reduce(\n                (result, { modelName }) => ({\n                    ...result,\n                    [modelName]: this.getDataForModel(modelName).accessedInstances,\n                }), {});\n    }\n\n    markFullTableScanned(modelName) {\n        const data = this.getDataForModel(modelName);\n        data.fullTableScanned = true;\n    }\n\n    get fullTableScannedModels() {\n        return this.sessionBoundModels\n            .filter(({ modelName }) => this.getDataForModel(modelName).fullTableScanned)\n            .map(({ modelName }) => modelName);\n    }\n\n    markAccessedIndexes(indexes) {\n        indexes.forEach(([table, attr, value]) => {\n            const data = this.getDataForModel(table);\n            if (!data.accessedIndexes) {\n                data.accessedIndexes = {};\n            }\n            data.accessedIndexes[attr] = [\n                ...(data.accessedIndexes[attr] || []),\n                value,\n            ];\n        });\n    }\n\n    get accessedIndexes() {\n        return this.sessionBoundModels\n            .filter(({ modelName }) => this.getDataForModel(modelName).accessedIndexes)\n            .reduce((result, { modelName }) => ({\n                ...result,\n                [modelName]: this.getDataForModel(modelName).accessedIndexes,\n            }), {});\n    }\n\n    /**\n     * Applies update to a model state.\n     *\n     * @private\n     * @param {Object} update - the update object. Must have keys\n     *                          `type`, `payload`.\n     */\n    applyUpdate(updateSpec) {\n        const tx = this._getTransaction(updateSpec);\n        const result = this.db.update(updateSpec, tx, this.state);\n        const { status, state, payload } = result;\n\n        if (status !== SUCCESS) {\n            throw new Error(`Applying update failed with status ${status}. Payload: ${payload}`);\n        }\n\n        this.state = state;\n\n        return payload;\n    }\n\n    query(querySpec) {\n        const result = this.db.query(querySpec, this.state);\n\n        this._markAccessedByQuery(querySpec, result);\n\n        return result;\n    }\n\n    _getTransaction(updateSpec) {\n        const { withMutations } = this;\n        const { action } = updateSpec;\n        let { batchToken } = this;\n        if ([UPDATE, DELETE].includes(action)) {\n            batchToken = getBatchToken();\n        }\n        return { batchToken, withMutations };\n    }\n\n    _markAccessedByQuery(querySpec, result) {\n        const { table, clauses } = querySpec;\n        const { rows } = result;\n\n        const { idAttribute } = this[table];\n        const accessedIds = new Set(rows.map(\n            row => row[idAttribute]\n        ));\n\n        const anyClauseFilteredByPk = clauses.some((clause) => {\n            if (!clauseFiltersByAttribute(clause, idAttribute)) {\n                return false;\n            }\n            const id = clause.payload[idAttribute];\n            if (id === null) return false;\n            /**\n             * We previously knew which row we wanted to access,\n             * so there was no need to scan the entire table.\n             */\n            accessedIds.add(id);\n            return true;\n        });\n\n        const accessedIndexes = [];\n        const { indexes } = this.state[table];\n        clauses.forEach((clause) => {\n            Object.keys(indexes).forEach((attr) => {\n                if (!clauseFiltersByAttribute(clause, attr)) return;\n                const value = clause.payload[attr];\n                accessedIndexes.push([table, attr, value]);\n            });\n        });\n\n        if (anyClauseFilteredByPk) {\n            /**\n             * The clauses have been ordered so that an indexed one was\n             * the first to have been evaluated, and thus only the row\n             * with the specified PK value has actually been accessed.\n             */\n            this.markAccessed(table, accessedIds);\n        } else if (accessedIndexes.length) {\n            /**\n             * At least one clause was optimized using indexes.\n             */\n            this.markAccessed(table, accessedIds);\n            this.markAccessedIndexes(accessedIndexes);\n        } else {\n            /**\n             * At least one clause could not be efficiently optimized\n             * or no clause was specified at all.\n             */\n            this.markFullTableScanned(table);\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Access {@link Session#state} instead.\n     */\n    getNextState() {\n        warnDeprecated(\n            '`Session.prototype.getNextState` has been deprecated. Access ' +\n            'the `Session.prototype.state` property instead.'\n        );\n        return this.state;\n    }\n\n    /**\n     * @deprecated\n     * The Redux integration API is now decoupled from ORM and Session.<br>\n     * See the 0.9 migration guide in the GitHub repo.\n     */\n    reduce() {\n        throw new Error(\n            '`Session.prototype.reduce` has been removed. The Redux integration API ' +\n            'is now decoupled from ORM and Session - see the 0.9 migration guide ' +\n            'in the GitHub repo.'\n        );\n    }\n};\n\nexport default Session;\n","import {\n    normalizeEntity,\n} from './utils';\n\n/**\n * The functions in this file return custom JS property descriptors\n * that are supposed to be assigned to Model fields.\n *\n * Some include the logic to look up models using foreign keys and\n * to add or remove relationships between models.\n *\n * @module descriptors\n */\n\n/**\n * Defines a basic non-key attribute.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n */\nfunction attrDescriptor(fieldName) {\n    return {\n        get() {\n            return this._fields[fieldName];\n        },\n\n        set(value) {\n            return this.set(fieldName, value);\n        },\n\n        enumerable: true,\n        configurable: true,\n    };\n}\n\n/**\n * Forwards direction of a Foreign Key: returns one object.\n * Also works as {@link .forwardsOneToOneDescriptor|forwardsOneToOneDescriptor}.\n *\n * For `book.author` referencing an `Author` model instance,\n * `fieldName` would be `'author'` and `declaredToModelName` would be `'Author'`.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n * @param  {string} declaredToModelName - the name of the model that the field references.\n */\nfunction forwardsManyToOneDescriptor(fieldName, declaredToModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredToModelName]: DeclaredToModel,\n                },\n            } = this.getClass();\n            const {\n                [fieldName]: toId,\n            } = this._fields;\n\n            return DeclaredToModel.withId(toId);\n        },\n        set(value) {\n            this.update({\n                [fieldName]: normalizeEntity(value),\n            });\n        },\n    };\n}\n\n/**\n * Dereferencing foreign keys in {@link module:fields.oneToOne|oneToOne}\n * relationships works the same way as in many-to-one relationships:\n * just look up the related model.\n *\n * For example, a human face tends to have a single nose.\n * So if we want to resolve `face.nose`, we need to\n * look up the `Nose` that has the primary key that `face` references.\n *\n * @see {@link module:descriptors~forwardsManyToOneDescriptor|forwardsManyToOneDescriptor}\n */\nfunction forwardsOneToOneDescriptor(...args) {\n    return forwardsManyToOneDescriptor(...args);\n}\n\n/**\n * Here we resolve 1-to-1 relationships starting at the model on which the\n * field was not installed. This means we need to find the instance of the\n * other model whose {@link module:fields.oneToOne|oneToOne} FK field contains the current model's primary key.\n *\n * @param  {string} declaredFieldName - the name of the field referencing the current model.\n * @param  {string} declaredFromModelName - the name of the other model.\n */\nfunction backwardsOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                },\n            } = this.getClass();\n\n            return DeclaredFromModel.get({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse one-to-one relation.');\n        },\n    };\n}\n\n/**\n * The backwards direction of a n-to-1 relationship (i.e. 1-to-n),\n * meaning this will return an a collection (`QuerySet`) of model instances.\n *\n * An example would be `author.books` referencing all instances of\n * the `Book` model that reference the author using `fk()`.\n */\nfunction backwardsManyToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                },\n            } = this.getClass();\n\n            return DeclaredFromModel.filter({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse many-to-one relation.');\n        },\n    };\n}\n\n/**\n * This descriptor is assigned to both sides of a many-to-many relationship.\n * To indicate the backwards direction pass `true` for `reverse`.\n */\nfunction manyToManyDescriptor(\n    declaredFromModelName,\n    declaredToModelName,\n    throughModelName,\n    throughFields,\n    reverse\n) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                    [declaredToModelName]: DeclaredToModel,\n                    [throughModelName]: ThroughModel,\n                },\n            } = this.getClass();\n\n            const ThisModel = reverse\n                ? DeclaredToModel\n                : DeclaredFromModel;\n            const OtherModel = reverse\n                ? DeclaredFromModel\n                : DeclaredToModel;\n\n            const thisReferencingField = reverse\n                ? throughFields.to\n                : throughFields.from;\n            const otherReferencingField = reverse\n                ? throughFields.from\n                : throughFields.to;\n\n            const thisId = this.getId();\n\n            const throughQs = ThroughModel.filter({\n                [thisReferencingField]: thisId,\n            });\n\n            /**\n             * all IDs of instances of the other model that are\n             * referenced by any instance of the current model\n             */\n            const referencedOtherIds = new Set(\n                throughQs\n                    .toRefArray()\n                    .map(obj => obj[otherReferencingField])\n            );\n\n            /**\n             * selects all instances of other model that are referenced\n             * by any instance of the current model\n             */\n            const qs = OtherModel.filter(otherModelInstance => (\n                referencedOtherIds.has(\n                    otherModelInstance[OtherModel.idAttribute]\n                )\n            ));\n\n            /**\n             * Allows adding OtherModel instances to be referenced by the current instance.\n             *\n             * E.g. Book.first().authors.add(1, 2) would add the authors with IDs 1 and 2\n             * to the first book's list of referenced authors.\n             *\n             * @return undefined\n             */\n            qs.add = function add(...entities) {\n                const idsToAdd = new Set(\n                    entities.map(normalizeEntity)\n                );\n\n                const existingQs = throughQs.filter(through => (\n                    idsToAdd.has(through[otherReferencingField])\n                ));\n\n                if (existingQs.exists()) {\n                    const existingIds = existingQs\n                        .toRefArray()\n                        .map(through => through[otherReferencingField]);\n\n                    throw new Error(`Tried to add already existing ${OtherModel.modelName} id(s) ${existingIds} to the ${ThisModel.modelName} instance with id ${thisId}`);\n                }\n\n                idsToAdd.forEach((id) => {\n                    ThroughModel.create({\n                        [otherReferencingField]: id,\n                        [thisReferencingField]: thisId,\n                    });\n                });\n            };\n\n            /**\n             * Removes references to all OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.clear() would cause the first book's list\n             * of referenced authors to become empty.\n             *\n             * @return undefined\n             */\n            qs.clear = function clear() {\n                throughQs.delete();\n            };\n\n            /**\n             * Removes references to all passed OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.remove(1, 2) would cause the authors with\n             * IDs 1 and 2 to no longer be referenced by the first book.\n             *\n             * @return undefined\n             */\n            qs.remove = function remove(...entities) {\n                const idsToRemove = new Set(\n                    entities.map(normalizeEntity)\n                );\n\n                const entitiesToDelete = throughQs.filter(\n                    through => idsToRemove.has(through[otherReferencingField])\n                );\n\n                if (entitiesToDelete.count() !== idsToRemove.size) {\n                    // Tried deleting non-existing entities.\n                    const entitiesToDeleteIds = entitiesToDelete\n                        .toRefArray()\n                        .map(through => through[otherReferencingField]);\n\n                    const unexistingIds = [...idsToRemove].filter(\n                        id => !entitiesToDeleteIds.includes(id)\n                    );\n\n                    throw new Error(`Tried to delete non-existing ${OtherModel.modelName} id(s) ${unexistingIds} from the ${ThisModel.modelName} instance with id ${thisId}`);\n                }\n\n                entitiesToDelete.delete();\n            };\n\n            return qs;\n        },\n\n        set() {\n            throw new Error('Tried setting a M2M field. Please use the related QuerySet methods add, remove and clear.');\n        },\n    };\n}\n\nexport {\n    attrDescriptor,\n    forwardsManyToOneDescriptor,\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n    backwardsManyToOneDescriptor,\n    manyToManyDescriptor,\n};\n","import {\n    attrDescriptor,\n    forwardsManyToOneDescriptor,\n    backwardsManyToOneDescriptor,\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n    manyToManyDescriptor,\n} from './descriptors';\n\nimport {\n    m2mName,\n    m2mToFieldName,\n    m2mFromFieldName,\n    reverseFieldName,\n    reverseFieldErrorMessage,\n} from './utils';\n\n/**\n * Contains the logic for how fields on {@link Model}s work\n * and which descriptors must be installed.\n *\n * If your goal is to define fields on a Model class,\n * please use the more convenient methods {@link attr},\n * {@link fk}, {@link many} and {@link oneToOne}.\n *\n * @module fields\n */\n\n/**\n * Defines algorithm for installing a field onto a model and related models.\n * Conforms to the template method behavioral design pattern.\n * @private\n */\nclass FieldInstallerTemplate {\n    constructor(opts) {\n        this.field = opts.field;\n        this.fieldName = opts.fieldName;\n        this.model = opts.model;\n        this.orm = opts.orm;\n        /**\n         * the field itself has no knowledge of the model\n         * it is being installed upon; we need to inform it\n         * that it is a self-referencing field for the field\n         * to be able to make better informed decisions\n         */\n        if (this.field.references(this.model)) {\n            this.field.toModelName = 'this';\n        }\n    }\n\n    get toModel() {\n        if (typeof this._toModel === 'undefined') {\n            const { toModelName } = this.field;\n            if (!toModelName) {\n                this._toModel = null;\n            } else if (toModelName === 'this') {\n                this._toModel = this.model;\n            } else {\n                this._toModel = this.orm.get(toModelName);\n            }\n        }\n        return this._toModel;\n    }\n\n    get throughModel() {\n        if (typeof this._throughModel === 'undefined') {\n            const throughModelName = this.field.getThroughModelName(\n                this.fieldName,\n                this.model\n            );\n            if (!throughModelName) {\n                this._throughModel = null;\n            } else {\n                this._throughModel = this.orm.get(throughModelName);\n            }\n        }\n        return this._throughModel;\n    }\n\n    get backwardsFieldName() {\n        return this.field.getBackwardsFieldName(this.model);\n    }\n\n    run() {\n        if (this.field.installsForwardsDescriptor) {\n            this.installForwardsDescriptor();\n        }\n        if (this.field.installsForwardsVirtualField) {\n            this.installForwardsVirtualField();\n        }\n        /**\n         * Install a backwards field on a model as a consequence\n         * of having installed the forwards field on another model.\n         */\n        if (this.field.installsBackwardsDescriptor) {\n            this.installBackwardsDescriptor();\n        }\n        if (this.field.installsBackwardsVirtualField) {\n            this.installBackwardsVirtualField();\n        }\n    }\n}\n\n/**\n * Default implementation for the template method in FieldInstallerTemplate.\n * @private\n */\nclass DefaultFieldInstaller extends FieldInstallerTemplate {\n    installForwardsDescriptor() {\n        Object.defineProperty(\n            this.model.prototype,\n            this.fieldName,\n            this.field.createForwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installForwardsVirtualField() {\n        this.model.virtualFields[this.fieldName] = this.field.createForwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n\n    installBackwardsDescriptor() {\n        const backwardsDescriptor = Object.getOwnPropertyDescriptor(\n            this.toModel.prototype,\n            this.backwardsFieldName\n        );\n        if (backwardsDescriptor) {\n            throw new Error(reverseFieldErrorMessage(\n                this.model.modelName,\n                this.fieldName,\n                this.toModel.modelName,\n                this.backwardsFieldName\n            ));\n        }\n\n        // install backwards descriptor\n        Object.defineProperty(\n            this.toModel.prototype,\n            this.backwardsFieldName,\n            this.field.createBackwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installBackwardsVirtualField() {\n        this.toModel.virtualFields[this.backwardsFieldName] = this.field.createBackwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n}\n\n/**\n * @ignore\n */\nclass Field {\n    constructor() {\n        this.index = false;\n    }\n\n    get installerClass() {\n        return DefaultFieldInstaller;\n    }\n\n    getClass() {\n        return this.constructor;\n    }\n\n    references(model) {\n        return false;\n    }\n\n    getThroughModelName(fieldName, model) {\n        return null;\n    }\n\n    get installsForwardsDescriptor() {\n        return true;\n    }\n\n    get installsForwardsVirtualField() {\n        return false;\n    }\n\n    get installsBackwardsDescriptor() {\n        return false;\n    }\n\n    get installsBackwardsVirtualField() {\n        return false;\n    }\n}\n\n/**\n * @ignore\n */\nexport class Attribute extends Field {\n    constructor(opts) {\n        super();\n        this.opts = opts || {};\n\n        if (this.opts.hasOwnProperty('getDefault')) {\n            this.getDefault = this.opts.getDefault;\n        }\n    }\n\n    createForwardsDescriptor(fieldName, model) {\n        return attrDescriptor(fieldName);\n    }\n}\n\n/**\n * @ignore\n */\nexport class RelationalField extends Field {\n    constructor(...args) {\n        super();\n        if (args.length === 1 && typeof args[0] === 'object') {\n            const opts = args[0];\n            this.toModelName = opts.to;\n            this.relatedName = opts.relatedName;\n            this.through = opts.through;\n            this.throughFields = opts.throughFields;\n            this.as = opts.as;\n        } else {\n            [this.toModelName, this.relatedName] = args;\n        }\n    }\n\n    getBackwardsFieldName(model) {\n        return (\n            this.relatedName ||\n            reverseFieldName(model.modelName)\n        );\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField(model.modelName, fieldName);\n    }\n\n    get installsBackwardsVirtualField() {\n        return true;\n    }\n\n    get installsBackwardsDescriptor() {\n        return true;\n    }\n\n    references(model) {\n        return this.toModelName === model.modelName;\n    }\n\n    get installerClass() {\n        return class AliasedForwardsDescriptorInstaller extends DefaultFieldInstaller {\n            installForwardsDescriptor() {\n                Object.defineProperty(\n                    this.model.prototype,\n                    this.field.as || this.fieldName, // use supplied name if possible\n                    this.field.createForwardsDescriptor(\n                        this.fieldName,\n                        this.model,\n                        this.toModel,\n                        this.throughModel\n                    )\n                );\n            }\n        };\n    }\n}\n\n/**\n * @ignore\n */\nexport class ForeignKey extends RelationalField {\n    constructor(...args) {\n        super(...args);\n        this.index = true;\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsManyToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsManyToOneDescriptor(fieldName, model.modelName);\n    }\n}\n\n/**\n * @ignore\n */\nexport class ManyToMany extends RelationalField {\n    getDefault() {\n        return [];\n    }\n\n    getThroughModelName(fieldName, model) {\n        return (\n            this.through ||\n            m2mName(model.modelName, fieldName)\n        );\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            false\n        );\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            true\n        );\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: model.modelName,\n            relatedName: fieldName,\n            through: throughModel.modelName,\n            throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n        });\n    }\n\n    createForwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: toModel.modelName,\n            relatedName: fieldName,\n            through: this.through,\n            throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n        });\n    }\n\n    get installsForwardsVirtualField() {\n        return true;\n    }\n\n    getThroughFields(fieldName, model, toModel, throughModel) {\n        if (this.throughFields) {\n            const [fieldAName, fieldBName] = this.throughFields;\n            const fieldA = throughModel.fields[fieldAName];\n            return {\n                to: fieldA.references(toModel) ? fieldAName : fieldBName,\n                from: fieldA.references(toModel) ? fieldBName : fieldAName,\n            };\n        }\n\n        if (model.modelName === toModel.modelName) {\n            /**\n             * we have no way of determining the relationship's\n             * direction here, so we need to assume that the user\n             * did not use a custom through model\n             * see ORM#registerManyToManyModelsFor\n             */\n            return {\n                to: m2mToFieldName(toModel.modelName),\n                from: m2mFromFieldName(model.modelName),\n            };\n        }\n\n        /**\n         * determine which field references which model\n         * and infer the directions from that\n         */\n        const throughModelFieldReferencing = otherModel => (\n            Object.keys(throughModel.fields).find(someFieldName => (\n                throughModel.fields[someFieldName].references(otherModel)\n            ))\n        );\n\n        return {\n            to: throughModelFieldReferencing(toModel),\n            from: throughModelFieldReferencing(model),\n        };\n    }\n}\n\n/**\n * @ignore\n */\nexport class OneToOne extends RelationalField {\n    getBackwardsFieldName(model) {\n        return (\n            this.relatedName ||\n            model.modelName.toLowerCase()\n        );\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsOneToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsOneToOneDescriptor(fieldName, model.modelName);\n    }\n}\n\n/**\n * Defines a value attribute on the model.\n * Though not required, it is recommended to define this for each non-foreign key you wish to use.\n * Getters and setters need to be defined on each Model\n * instantiation for undeclared data fields, which is slower.\n * You can use the optional `getDefault` parameter to fill in unpassed values\n * to {@link Model.create}, such as for generating ID's with UUID:\n *\n * ```javascript\n * import getUUID from 'your-uuid-package-of-choice';\n *\n * fields = {\n *   id: attr({ getDefault: () => getUUID() }),\n *   title: attr(),\n * }\n * ```\n *\n * @global\n *\n * @param  {Object} [opts]\n * @param {Function} [opts.getDefault] - if you give a function here, it's return\n *                                       value from calling with zero arguments will\n *                                       be used as the value when creating a new Model\n *                                       instance with {@link Model#create} if the field\n *                                       value is not passed.\n * @return {Attribute}\n */\nexport function attr(opts) {\n    return new Attribute(opts);\n}\n\n/**\n * Defines a foreign key on a model, which points\n * to a single entity on another model.\n *\n * You can pass arguments as either a single object,\n * or two arguments.\n *\n * If you pass two arguments, the first one is the name\n * of the Model the foreign key is pointing to, and\n * the second one is an optional related name, which will\n * be used to access the Model the foreign key\n * is being defined from, from the target Model.\n *\n * If the related name is not passed, it will be set as\n * `${toModelName}Set`.\n *\n * If you pass an object to `fk`, it has to be in the form\n *\n * ```javascript\n * fields = {\n *   author: fk({ to: 'Author', relatedName: 'books' })\n * }\n * ```\n *\n * Which is equal to\n *\n * ```javascript\n * fields = {\n *   author: fk('Author', 'books'),\n * }\n * ```\n *\n * @global\n *\n * @param  {string|Object} toModelNameOrObj - the `modelName` property of\n *                                            the Model that is the target of the\n *                                            foreign key, or an object with properties\n *                                            `to` and optionally `relatedName`.\n * @param {string} [relatedName] - if you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a QuerySet the foreign key is defined from,\n *                                 from the target model.\n * @return {ForeignKey}\n */\nexport function fk(...args) {\n    return new ForeignKey(...args);\n}\n\n/**\n * Defines a many-to-many relationship between\n * this (source) and another (target) model.\n *\n * The relationship is modeled with an extra model called the through model.\n * The through model has foreign keys to both the source and target models.\n *\n * You can define your own through model if you want to associate more information\n * to the relationship. A custom through model must have at least two foreign keys,\n * one pointing to the source Model, and one pointing to the target Model.\n *\n * If you have more than one foreign key pointing to a source or target Model in the\n * through Model, you must pass the option `throughFields`, which is an array of two\n * strings, where the strings are the field names that identify the foreign keys to\n * be used for the many-to-many relationship. Redux-ORM will figure out which field name\n * points to which model by checking the through Model definition.\n *\n * Unlike `fk`, this function accepts only an object argument.\n *\n * ```javascript\n * class Authorship extends Model {}\n * Authorship.modelName = 'Authorship';\n * Authorship.fields = {\n *   author: fk('Author', 'authorships'),\n *   book: fk('Book', 'authorships'),\n * };\n *\n * class Author extends Model {}\n * Author.modelName = 'Author';\n * Author.fields = {\n *   books: many({\n *     to: 'Book',\n *     relatedName: 'authors',\n *     through: 'Authorship',\n *\n *     // this is optional, since Redux-ORM can figure\n *     // out the through fields itself as there aren't\n *     // multiple foreign keys pointing to the same models.\n *     throughFields: ['author', 'book'],\n *   })\n * };\n *\n * class Book extends Model {}\n * Book.modelName = 'Book';\n * ```\n *\n * You should only define the many-to-many relationship on one side. In the\n * above case of Authors to Books through Authorships, the relationship is\n * defined only on the Author model.\n *\n * @global\n *\n * @param  {Object} options - options\n * @param  {string} options.to - the `modelName` attribute of the target Model.\n * @param  {string} [options.through] - the `modelName` attribute of the through Model which\n *                                    must declare at least one foreign key to both source and\n *                                    target Models. If not supplied, Redux-Orm will autogenerate\n *                                    one.\n * @param  {string[]} [options.throughFields] - this must be supplied only when a custom through\n *                                            Model has more than one foreign key pointing to\n *                                            either the source or target mode. In this case\n *                                            Redux-ORM can't figure out the correct fields for\n *                                            you, you must provide them. The supplied array should\n *                                            have two elements that are the field names for the\n *                                            through fields you want to declare the many-to-many\n *                                            relationship with. The order doesn't matter;\n *                                            Redux-ORM will figure out which field points to\n *                                            the source Model and which to the target Model.\n * @param  {string} [options.relatedName] - the attribute used to access a QuerySet\n *                                          of source Models from target Model.\n * @return {ManyToMany}\n */\nexport function many(...args) {\n    return new ManyToMany(...args);\n}\n\n/**\n * Defines a one-to-one relationship. In database terms, this is a foreign key with the\n * added restriction that only one entity can point to single target entity.\n *\n * The arguments are the same as with `fk`. If `relatedName` is not supplied,\n * the source model name in lowercase will be used. Note that with the one-to-one\n * relationship, the `relatedName` should be in singular, not plural.\n *\n * @global\n *\n * @param  {string|Object} toModelNameOrObj - the `modelName` property of\n *                                            the Model that is the target of the\n *                                            foreign key, or an object with properties\n *                                            `to` and optionally `relatedName`.\n * @param {string} [relatedName] - if you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a Model the foreign key is defined from,\n *                                 from the target Model.\n * @return {OneToOne}\n */\nexport function oneToOne(...args) {\n    return new OneToOne(...args);\n}\n","import Session from './Session';\nimport QuerySet from './QuerySet';\nimport {\n    ManyToMany,\n    ForeignKey,\n    OneToOne,\n    attr,\n} from './fields';\nimport {\n    CREATE, UPDATE, DELETE, FILTER,\n} from './constants';\nimport {\n    normalizeEntity,\n    arrayDiffActions,\n    objectShallowEquals,\n    warnDeprecated,\n    m2mName,\n} from './utils';\n\n\n/**\n * Generates a query specification to get the instance's\n * corresponding table row using its primary key.\n *\n * @private\n * @returns {Object}\n */\nfunction getByIdQuery(modelInstance) {\n    const modelClass = modelInstance.getClass();\n    const { idAttribute, modelName } = modelClass;\n\n    return {\n        table: modelName,\n        clauses: [\n            {\n                type: FILTER,\n                payload: {\n                    [idAttribute]: modelInstance.getId(),\n                },\n            },\n        ],\n    };\n}\n\n\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\nconst Model = class Model {\n    /**\n     * Creates a Model instance from it's properties.\n     * Don't use this to create a new record; Use the static method {@link Model#create}.\n     * @param  {Object} props - the properties to instantiate with\n     */\n    constructor(props) {\n        this._initFields(props);\n    }\n\n    _initFields(props) {\n        const propsObj = Object(props);\n        this._fields = { ...propsObj };\n\n        Object.keys(propsObj).forEach((fieldName) => {\n            // In this case, we got a prop that wasn't defined as a field.\n            // Assuming it's an arbitrary data field, making an instance-specific\n            // descriptor for it.\n            // Using the in operator as the property could be defined anywhere\n            // on the prototype chain.\n            if (!(fieldName in this)) {\n                Object.defineProperty(this, fieldName, {\n                    get: () => this._fields[fieldName],\n                    set: value => this.set(fieldName, value),\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n\n    static toString() {\n        return `ModelClass: ${this.modelName}`;\n    }\n\n    /**\n     * Returns the options object passed to the database for the table that represents\n     * this Model class.\n     *\n     * Returns an empty object by default, which means the database\n     * will use default options. You can either override this function to return the options\n     * you want to use, or assign the options object as a static property of the same name to the\n     * Model class.\n     *\n     * @return {Object} the options object passed to the database for the table\n     *                  representing this Model class.\n     */\n    static options() {\n        return {};\n    }\n\n    /**\n     * Manually mark individual instances as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<*>} ids - Array of primary key values\n     * @return {undefined}\n     */\n    static markAccessed(ids) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark rows of the ${this.modelName} model as accessed without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markAccessed\\` instead.`,\n            ].join(''));\n        }\n        this.session.markAccessed(this.modelName, ids);\n    }\n\n    /**\n     * Manually mark this model's table as scanned.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @return {undefined}\n     */\n    static markFullTableScanned() {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark the ${this.modelName} model as full table scanned without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markFullTableScanned\\` instead.`,\n            ].join(''));\n        }\n        this.session.markFullTableScanned(this.modelName);\n    }\n\n    /**\n     * Manually mark indexes as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<Array.<*,*>>} indexes - Array of column-value pairs\n     * @return {undefined}\n     */\n    static markAccessedIndexes(indexes) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark indexes for the ${this.modelName} model as accessed without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markAccessedIndexes\\` instead.`,\n            ].join(''));\n        }\n        this.session.markAccessedIndexes(\n            indexes.map(\n                ([attribute, value]) => [this.modelName, attribute, value]\n            )\n        );\n    }\n\n    /**\n     * Returns the id attribute of this {@link Model}.\n     *\n     * @return {string} The id attribute of this {@link Model}.\n     */\n    static get idAttribute() {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to get the ${this.modelName} model's id attribute without a session. `,\n                'Create a session using `session = orm.session()` and access ',\n                `\\`session[\"${this.modelName}\"].idAttribute\\` instead.`,\n            ].join(''));\n        }\n        return this.session.db.describe(this.modelName).idAttribute;\n    }\n\n    /**\n     * Connect the model class to a {@link Session}.\n     *\n     * @private\n     * @param  {Session} session - The session to connect to.\n     */\n    static connect(session) {\n        if (!(session instanceof Session)) {\n            throw new Error('A model can only be connected to instances of Session.');\n        }\n        this._session = session;\n    }\n\n    /**\n     * Get the current {@link Session} instance.\n     *\n     * @private\n     * @return {Session} The current {@link Session} instance.\n     */\n    static get session() {\n        return this._session;\n    }\n\n    /**\n     * Returns an instance of the model's `querySetClass` field.\n     * By default, this will be an empty {@link QuerySet}.\n     *\n     * @return {Object} An instance of the model's `querySetClass`.\n     */\n    static getQuerySet() {\n        const { querySetClass: QuerySetClass } = this;\n        return new QuerySetClass(this);\n    }\n\n    /**\n     * @return {undefined}\n     */\n    static invalidateClassCache() {\n        this.isSetUp = undefined;\n        this.virtualFields = {};\n    }\n\n    /**\n     * @see {@link Model.getQuerySet}\n     */\n    static get query() {\n        return this.getQuerySet();\n    }\n\n    /**\n     * Returns parameters to be passed to {@link Table} instance.\n     *\n     * @private\n     */\n    static tableOptions() {\n        if (typeof this.backend === 'function') {\n            warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n            return this.backend();\n        }\n        if (this.backend) {\n            warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n            return this.backend;\n        }\n        if (typeof this.options === 'function') {\n            return this.options();\n        }\n        return this.options;\n    }\n\n    /**\n     * Creates a new record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {props} userProps - the new {@link Model}'s properties.\n     * @return {Model} a new {@link Model} instance.\n     */\n    static create(userProps) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to create a ${this.modelName} model instance without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].create\\` instead.`,\n            ].join(''));\n        }\n        const props = { ...userProps };\n\n        const m2mRelations = {};\n\n        const declaredFieldNames = Object.keys(this.fields);\n        const declaredVirtualFieldNames = Object.keys(this.virtualFields);\n\n        declaredFieldNames.forEach((key) => {\n            const field = this.fields[key];\n            const valuePassed = userProps.hasOwnProperty(key);\n            if (!(field instanceof ManyToMany)) {\n                if (valuePassed) {\n                    const value = userProps[key];\n                    props[key] = normalizeEntity(value);\n                } else if (field.getDefault) {\n                    props[key] = field.getDefault();\n                }\n            } else if (valuePassed) {\n                // If a value is supplied for a ManyToMany field,\n                // discard them from props and save for later processing.\n                m2mRelations[key] = userProps[key];\n                delete props[key];\n            }\n        });\n\n        // add backward many-many if required\n        declaredVirtualFieldNames.forEach((key) => {\n            if (!m2mRelations.hasOwnProperty(key)) {\n                const field = this.virtualFields[key];\n                if (userProps.hasOwnProperty(key) && field instanceof ManyToMany) {\n                    // If a value is supplied for a ManyToMany field,\n                    // discard them from props and save for later processing.\n                    m2mRelations[key] = userProps[key];\n                    delete props[key];\n                }\n            }\n        });\n\n        const newEntry = this.session.applyUpdate({\n            action: CREATE,\n            table: this.modelName,\n            payload: props,\n        });\n\n        const ThisModel = this;\n        const instance = new ThisModel(newEntry);\n        instance._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n        return instance;\n    }\n\n    /**\n     * Creates a new or update existing record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {props} userProps - the required {@link Model}'s properties.\n     * @return {Model} a {@link Model} instance.\n     */\n    static upsert(userProps) {\n        if (typeof this.session === 'undefined') {\n            throw new Error([\n                `Tried to upsert a ${this.modelName} model instance without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].upsert\\` instead.`,\n            ].join(''));\n        }\n\n        const { idAttribute } = this;\n        if (userProps.hasOwnProperty(idAttribute)) {\n            const id = userProps[idAttribute];\n            if (this.idExists(id)) {\n                const model = this.withId(id);\n                model.update(userProps);\n                return model;\n            }\n        }\n\n        return this.create(userProps);\n    }\n\n    /**\n     * Returns a {@link Model} instance for the object with id `id`.\n     * Returns `null` if the model has no instance with id `id`.\n     *\n     * You can use {@link Model#idExists} to check for existence instead.\n     *\n     * @param  {*} id - the `id` of the object to get\n     * @throws If object with id `id` doesn't exist\n     * @return {Model|null} {@link Model} instance with id `id`\n     */\n    static withId(id) {\n        return this.get({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     *\n     * @since 0.11.0\n     */\n    static idExists(id) {\n        return this.exists({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the given props exists in the state.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     */\n    static exists(lookupObj) {\n        if (typeof this.session === 'undefined') {\n            throw new Error([\n                `Tried to check if a ${this.modelName} model instance exists without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].exists\\` instead.`,\n            ].join(''));\n        }\n\n        return Boolean(\n            this._findDatabaseRows(lookupObj).length\n        );\n    }\n\n    /**\n     * Gets the {@link Model} instance that matches properties in `lookupObj`.\n     * Throws an error if {@link Model} if multiple records match\n     * the properties.\n     *\n     * @param  {Object} lookupObj - the properties used to match a single entity.\n     * @throws {Error} If more than one entity matches the properties in `lookupObj`.\n     * @return {Model} a {@link Model} instance that matches the properties in `lookupObj`.\n     */\n    static get(lookupObj) {\n        const ThisModel = this;\n\n        const rows = this._findDatabaseRows(lookupObj);\n        if (rows.length === 0) {\n            return null;\n        }\n        if (rows.length > 1) {\n            throw new Error(`Expected to find a single row in \\`${this.modelName}.get\\`. Found ${rows.length}.`);\n        }\n\n        return new ThisModel(rows[0]);\n    }\n\n    /**\n     * Gets the {@link Model} class or subclass constructor (the class that\n     * instantiated this instance).\n     *\n     * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n     *                 this instance.\n     */\n    getClass() {\n        return this.constructor;\n    }\n\n    /**\n     * Gets the id value of the current instance by looking up the id attribute.\n     * @return {*} The id value of the current instance.\n     */\n    getId() {\n        return this._fields[this.getClass().idAttribute];\n    }\n\n    /**\n     * Returns a reference to the plain JS object in the store.\n     * Make sure to not mutate this.\n     *\n     * @return {Object} a reference to the plain JS object in the store\n     */\n    get ref() {\n        const ThisModel = this.getClass();\n\n        // eslint-disable-next-line no-underscore-dangle\n        return ThisModel._findDatabaseRows({\n            [ThisModel.idAttribute]: this.getId(),\n        })[0];\n    }\n\n    /**\n     * Finds all rows in this model's table that match the given `lookupObj`.\n     * If no `lookupObj` is passed, all rows in the model's table will be returned.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     * @private\n     */\n    static _findDatabaseRows(lookupObj) {\n        const querySpec = {\n            table: this.modelName,\n        };\n        if (lookupObj) {\n            querySpec.clauses = [\n                {\n                    type: FILTER,\n                    payload: lookupObj,\n                },\n            ];\n        }\n        return this.session.query(querySpec).rows;\n    }\n\n    /**\n     * Returns a string representation of the {@link Model} instance.\n     *\n     * @return {string} A string representation of this {@link Model} instance.\n     */\n    toString() {\n        const ThisModel = this.getClass();\n        const className = ThisModel.modelName;\n        const fieldNames = Object.keys(ThisModel.fields);\n        const fields = fieldNames.map((fieldName) => {\n            const field = ThisModel.fields[fieldName];\n            if (field instanceof ManyToMany) {\n                const ids = this[fieldName].toModelArray().map(\n                    model => model.getId()\n                );\n                return `${fieldName}: [${ids.join(', ')}]`;\n            }\n            const val = this._fields[fieldName];\n            return `${fieldName}: ${val}`;\n        }).join(', ');\n        return `${className}: {${fields}}`;\n    }\n\n    /**\n     * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n     * Equality is determined by shallow comparing their attributes.\n     *\n     * This equality is used when you call {@link Model#update}.\n     * You can prevent model updates by returning `true` here.\n     * However, a model will always be updated if its relationships are changed.\n     *\n     * @param  {Model} otherModel - a {@link Model} instance to compare\n     * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n     */\n    equals(otherModel) {\n        // eslint-disable-next-line no-underscore-dangle\n        return objectShallowEquals(this._fields, otherModel._fields);\n    }\n\n    /**\n     * Updates a property name to given value for this {@link Model} instance.\n     * The values are immediately committed to the database.\n     *\n     * @param {string} propertyName - name of the property to set\n     * @param {*} value - value assigned to the property\n     * @return {undefined}\n     */\n    set(propertyName, value) {\n        this.update({\n            [propertyName]: value,\n        });\n    }\n\n    /**\n     * Assigns multiple fields and corresponding values to this {@link Model} instance.\n     * The updates are immediately committed to the database.\n     *\n     * @param  {Object} userMergeObj - an object that will be merged with this instance.\n     * @return {undefined}\n     */\n    update(userMergeObj) {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === 'undefined') {\n            throw new Error([\n                `Tried to update a ${ThisModel.modelName} model instance without a session. `,\n                'You cannot call `.update` on an instance that you did not receive from the database.',\n            ].join(''));\n        }\n\n        const mergeObj = { ...userMergeObj };\n\n        const { fields, virtualFields } = ThisModel;\n\n        const m2mRelations = {};\n\n        // If an array of entities or id's is supplied for a\n        // many-to-many related field, clear the old relations\n        // and add the new ones.\n        for (const mergeKey in mergeObj) { // eslint-disable-line no-restricted-syntax, guard-for-in\n            const isRealField = fields.hasOwnProperty(mergeKey);\n\n            if (isRealField) {\n                const field = fields[mergeKey];\n\n                if (field instanceof ForeignKey || field instanceof OneToOne) {\n                    // update one-one/fk relations\n                    mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n                } else if (field instanceof ManyToMany) {\n                    // field is forward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n                    delete mergeObj[mergeKey];\n                }\n            } else if (virtualFields.hasOwnProperty(mergeKey)) {\n                const field = virtualFields[mergeKey];\n                if (field instanceof ManyToMany) {\n                    // field is backward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n                    delete mergeObj[mergeKey];\n                }\n            }\n        }\n\n        const mergedFields = {\n            ...this._fields,\n            ...mergeObj,\n        };\n\n        const updatedModel = new ThisModel(mergedFields);\n        // only update fields if they have changed (referentially)\n        if (!this.equals(updatedModel)) {\n            this._initFields(mergedFields);\n            ThisModel.session.applyUpdate({\n                action: UPDATE,\n                query: getByIdQuery(this),\n                payload: mergeObj,\n            });\n        }\n\n        // update virtual fields\n        this._refreshMany2Many(m2mRelations);\n    }\n\n    /**\n     * Updates {@link Model} instance attributes to reflect the\n     * database state in the current session.\n     * @return {undefined}\n     */\n    refreshFromState() {\n        this._initFields(this.ref);\n    }\n\n    /**\n     * Deletes the record for this {@link Model} instance.\n     * You'll still be able to access fields and values on the instance.\n     *\n     * @return {undefined}\n     */\n    delete() {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === 'undefined') {\n            throw new Error([\n                `Tried to delete a ${ThisModel.modelName} model instance without a session. `,\n                'You cannot call `.delete` on an instance that you did not receive from the database.',\n            ].join(''));\n        }\n\n        this._onDelete();\n        ThisModel.session.applyUpdate({\n            action: DELETE,\n            query: getByIdQuery(this),\n        });\n    }\n\n    /**\n     * Update many-many relations for model.\n     * @param relations\n     * @return undefined\n     * @private\n     */\n    _refreshMany2Many(relations) {\n        const ThisModel = this.getClass();\n        const { fields, virtualFields, modelName } = ThisModel;\n\n        Object.keys(relations).forEach((name) => {\n            const reverse = !fields.hasOwnProperty(name);\n            const field = virtualFields[name];\n            const values = relations[name];\n\n            if (!Array.isArray(values)) {\n                throw new TypeError(`Failed to resolve many-to-many relationship: ${modelName}[${name}] must be an array (passed: ${values})`);\n            }\n\n            const normalizedNewIds = values.map(normalizeEntity);\n            const uniqueIds = [...new Set(normalizedNewIds)];\n\n            if (normalizedNewIds.length !== uniqueIds.length) {\n                throw new Error(`Found duplicate id(s) when passing \"${normalizedNewIds}\" to ${ThisModel.modelName}.${name} value`);\n            }\n\n            const throughModelName = field.through || m2mName(ThisModel.modelName, name);\n            const ThroughModel = ThisModel.session[throughModelName];\n\n            let fromField;\n            let toField;\n\n            if (!reverse) {\n                ({ from: fromField, to: toField } = field.throughFields);\n            } else {\n                ({ from: toField, to: fromField } = field.throughFields);\n            }\n\n            const currentIds = ThroughModel.filter(through => through[fromField] === this[ThisModel.idAttribute]\n            ).toRefArray().map(ref => ref[toField]);\n\n            const diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n\n            if (diffActions) {\n                const {\n                    delete: idsToDelete,\n                    add: idsToAdd,\n                } = diffActions;\n                if (idsToDelete.length > 0) {\n                    this[name].remove(...idsToDelete);\n                }\n                if (idsToAdd.length > 0) {\n                    this[name].add(...idsToAdd);\n                }\n            }\n        });\n    }\n\n    /**\n     * @return {undefined}\n     * @private\n     */\n    _onDelete() {\n        const { virtualFields } = this.getClass();\n        for (const key in virtualFields) { // eslint-disable-line\n            const field = virtualFields[key];\n            if (field instanceof ManyToMany) {\n                // Delete any many-to-many rows the entity is included in.\n                this[key].clear();\n            } else if (field instanceof ForeignKey) {\n                const relatedQs = this[key];\n                if (relatedQs.exists()) {\n                    relatedQs.update({ [field.relatedName]: null });\n                }\n            } else if (field instanceof OneToOne) {\n                // Set null to any foreign keys or one to ones pointed to\n                // this instance.\n                if (this[key] !== null) {\n                    this[key][field.relatedName] = null;\n                }\n            }\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     * @deprecated Please use {@link Model.idExists} instead.\n     */\n    static hasId(id) {\n        console.warn('`Model.hasId` has been deprecated. Please use `Model.idExists` instead.');\n        return this.idExists(id);\n    }\n\n    /**\n     * @deprecated See the 0.9 migration guide on the GitHub repo.\n     * @throws {Error} Due to deprecation.\n     */\n    getNextState() {\n        throw new Error(\n            '`Model.prototype.getNextState` has been removed. See the 0.9 ' +\n            'migration guide on the GitHub repo.'\n        );\n    }\n};\n\nModel.fields = {\n    id: attr(),\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\n\nexport default Model;\n","import reject from 'lodash/reject';\nimport filter from 'lodash/filter';\nimport orderBy from 'lodash/orderBy';\nimport sortBy from 'lodash/sortBy';\nimport ops from 'immutable-ops';\n\nimport {\n    FILTER, EXCLUDE, ORDER_BY,\n} from '../constants';\nimport { clauseFiltersByAttribute, clauseReducesResultSetSize } from '../utils';\n\nconst DEFAULT_TABLE_OPTIONS = {\n    idAttribute: 'id',\n    arrName: 'items',\n    mapName: 'itemsById',\n    fields: {},\n};\n\n// Input is the current max id and the new id passed to the create action.\n// Both may be undefined. The current max id in the case that this is the first Model\n// being created, and the new id if the id was not explicitly passed to the\n// database.\n//\n// Return value is the new max id and the id to use to create the new row.\n// If the id's are strings, the id must be passed explicitly every time.\n// In this case, the current max id will remain `NaN` due to `Math.max`, but that's fine.\nfunction idSequencer(_currMax, userPassedId) {\n    let currMax = _currMax;\n    let newMax;\n    let newId;\n\n    if (currMax === undefined) {\n        currMax = -1;\n    }\n\n    if (userPassedId === undefined) {\n        newMax = currMax + 1;\n        newId = newMax;\n    } else {\n        newMax = Math.max(currMax + 1, userPassedId);\n        newId = userPassedId;\n    }\n\n    return [\n        newMax, // new max id\n        newId, // id to use for row creation\n    ];\n}\n\n/**\n * Handles the underlying data structure for a {@link Model} class.\n */\nconst Table = class Table {\n    /**\n     * Creates a new {@link Table} instance.\n     * @param  {Object} userOpts - options to use.\n     * @param  {string} [userOpts.idAttribute=id] - the id attribute of the entity.\n     * @param  {string} [userOpts.arrName=items] - the state attribute where an array of\n     *                                             entity id's are stored\n     * @param  {string} [userOpts.mapName=itemsById] - the state attribute where the entity objects\n     *                                                 are stored in a id to entity object\n     *                                                 map.\n     * @param  {string} [userOpts.fields={}] - mapping of field key to {@link Field} object\n     */\n    constructor(userOpts) {\n        Object.assign(this, DEFAULT_TABLE_OPTIONS, userOpts);\n    }\n\n    /**\n     * Returns a reference to the object at index `id`\n     * in state `branch`.\n     *\n     * @param  {Object} branch - the state\n     * @param  {Number} id - the id of the object to get\n     * @return {Object|undefined} A reference to the raw object in the state or\n     *                            `undefined` if not found.\n     */\n    accessId(branch, id) {\n        return branch[this.mapName][id];\n    }\n\n    accessIds(branch, ids) {\n        const map = branch[this.mapName];\n        return ids.map(id => map[id]);\n    }\n\n    idExists(branch, id) {\n        return branch[this.mapName].hasOwnProperty(id);\n    }\n\n    accessIdList(branch) {\n        return branch[this.arrName];\n    }\n\n    accessList(branch) {\n        return this.accessIds(branch, this.accessIdList(branch));\n    }\n\n    getMaxId(branch) {\n        return this.getMeta(branch, 'maxId');\n    }\n\n    setMaxId(tx, branch, newMaxId) {\n        return this.setMeta(tx, branch, 'maxId', newMaxId);\n    }\n\n    nextId(id) {\n        return id + 1;\n    }\n\n    /**\n     * Returns the default state for the data structure.\n     * @return {Object} The default state for this {@link ORM} instance's data structure\n     */\n    getEmptyState() {\n        const pkIndex = {\n            [this.arrName]: [],\n            [this.mapName]: {},\n        };\n        const attrIndexes = Object.keys(this.fields)\n            .filter(attr => attr !== this.idAttribute)\n            .filter(attr => this.fields[attr].index)\n            .reduce((indexes, attr) => ({\n                ...indexes,\n                [attr]: {},\n            }), {});\n        return {\n            ...pkIndex,\n            indexes: attrIndexes,\n            meta: {},\n        };\n    }\n\n    setMeta(tx, branch, key, value) {\n        const { batchToken, withMutations } = tx;\n        if (withMutations) {\n            const res = ops.mutable.setIn(['meta', key], value, branch);\n            return res;\n        }\n\n        return ops.batch.setIn(batchToken, ['meta', key], value, branch);\n    }\n\n    getMeta(branch, key) {\n        return branch.meta[key];\n    }\n\n    query(branch, clauses) {\n        if (clauses.length === 0) {\n            return this.accessList(branch);\n        }\n\n        const { idAttribute } = this;\n\n        const optimallyOrderedClauses = sortBy(clauses, (clause) => {\n            if (clauseFiltersByAttribute(clause, idAttribute)) {\n                return 1;\n            }\n\n            if (clauseReducesResultSetSize(clause)) {\n                return 2;\n            }\n\n            return 3;\n        });\n\n        const reducer = (rows, clause) => {\n            const { type, payload } = clause;\n            if (!rows) {\n                /**\n                 * First time this reducer is called during query.\n                 * This is where we apply query optimizations.\n                 */\n                if (clauseFiltersByAttribute(clause, idAttribute)) {\n                    /**\n                     * Payload specified a primary key. Use PK index\n                     * to look up the single row identified by the PK.\n                     */\n                    const id = payload[idAttribute];\n                    const remainingPayload = Object.keys(payload)\n                        .reduce((withoutPkAttr, filterAttr) => {\n                            if (filterAttr !== idAttribute) {\n                                withoutPkAttr[filterAttr] = payload[filterAttr];\n                            }\n                            return withoutPkAttr;\n                        }, {});\n                    const ids = this.idExists(branch, id) ? [id] : [];\n                    if (Object.keys(remainingPayload).length) {\n                        /**\n                         * Payload has additional, non-PK columns.\n                         * Filter accessed row by remaining payload (if one was found).\n                         */\n                        return reducer(this.accessIds(branch, ids), {\n                            ...clause,\n                            payload: remainingPayload,\n                        });\n                    }\n                    /**\n                     * No need to filter these rows any further.\n                     * The primary key value satisfies this clause's conditions.\n                     */\n                    return this.accessIds(branch, ids);\n                }\n                if (type === FILTER && typeof payload === 'object') {\n                    const indexes = Object.entries(branch.indexes);\n                    const accessedIndexes = [];\n                    const indexAttrs = [];\n                    indexes.forEach(([attr, index]) => {\n                        if (clauseFiltersByAttribute(clause, attr)) {\n                            /**\n                             * Payload specified an indexed attribute. Use index\n                             * to potentially decrease amount of accessed rows.\n                             */\n                            if (index.hasOwnProperty(payload[attr])) {\n                                accessedIndexes.push(index[payload[attr]]);\n                                indexAttrs.push(attr);\n                            }\n                        }\n                    });\n                    /**\n                     * Calculate set of unique PK values corresponding to each\n                     * foreign key's attribute value. Then retrieve all those rows.\n                     */\n                    if (accessedIndexes.length) {\n                        const lastIndex = accessedIndexes.pop();\n                        const indexedIds = accessedIndexes.reduce((result, index) => {\n                            const indexSet = new Set(index);\n                            return result.filter(Set.prototype.has, indexSet);\n                        }, lastIndex);\n                        const remainingPayload = Object.keys(payload)\n                            .reduce((withoutIndexAttrs, filterAttr) => {\n                                if (!indexAttrs.includes(filterAttr)) {\n                                    withoutIndexAttrs[filterAttr] = payload[filterAttr];\n                                }\n                                return withoutIndexAttrs;\n                            }, {});\n                        if (Object.keys(remainingPayload).length) {\n                            /**\n                             * Payload has additional, non-indexed columns.\n                             * Filter indexed rows by remaining payload (if any were found).\n                             */\n                            return reducer(this.accessIds(branch, indexedIds), {\n                                ...clause,\n                                payload: remainingPayload,\n                            });\n                        }\n                        /**\n                         * No need to filter these rows any further.\n                         * The used indexes satisfy this clause's conditions.\n                         */\n                        return this.accessIds(branch, indexedIds);\n                    }\n                }\n\n                // Give up optimization: Retrieve all rows (full table scan).\n                return reducer(this.accessList(branch), clause);\n            }\n\n            switch (type) {\n            case FILTER: {\n                return filter(rows, payload);\n            }\n            case EXCLUDE: {\n                return reject(rows, payload);\n            }\n            case ORDER_BY: {\n                const [iteratees, orders] = payload;\n                return orderBy(rows, iteratees, orders);\n            }\n            default:\n                return rows;\n            }\n        };\n\n        return optimallyOrderedClauses.reduce(reducer, undefined);\n    }\n\n    /**\n     * Returns the data structure including a new object `entry`\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object} entry - the object to insert\n     * @return {Object} an object with two keys: `state` and `created`.\n     *                  `state` is the new table state and `created` is the\n     *                  row that was created.\n     */\n    insert(tx, branch, entry) {\n        const { batchToken, withMutations } = tx;\n\n        const hasId = entry.hasOwnProperty(this.idAttribute);\n\n        let workingState = branch;\n\n        // This will not affect string id's.\n        const [newMaxId, id] = idSequencer(this.getMaxId(branch), entry[this.idAttribute]);\n        workingState = this.setMaxId(tx, branch, newMaxId);\n\n        const finalEntry = hasId\n            ? entry\n            : ops.batch.set(batchToken, this.idAttribute, id, entry);\n\n        const indexesToAppendTo = Object.keys(workingState.indexes).reduce((values, fkAttr) => {\n            if (!entry.hasOwnProperty(fkAttr)) return values;\n            if (entry[fkAttr] === null) return values;\n            values.push([fkAttr, entry[fkAttr]]);\n            return values;\n        }, []);\n\n\n        if (withMutations) {\n            ops.mutable.push(id, workingState[this.arrName]);\n            ops.mutable.set(id, finalEntry, workingState[this.mapName]);\n            // add id to indexes\n            indexesToAppendTo.forEach(([attr, value]) => {\n                const attrIndex = workingState.indexes[attr];\n                if (attrIndex.hasOwnProperty(value)) {\n                    ops.mutable.push(id, attrIndex[value]);\n                } else {\n                    ops.mutable.set(value, [id], attrIndex);\n                }\n            });\n            return {\n                state: workingState,\n                created: finalEntry,\n            };\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            indexesToAppendTo\n                .reduce((indexMap, [attr, value]) => {\n                    indexMap[attr] = ops.batch.merge(\n                        batchToken,\n                        {\n                            [value]: ops.batch.push(\n                                batchToken,\n                                id,\n                                indexMap[attr][value] || []\n                            ),\n                        },\n                        indexMap[attr]\n                    );\n                    return indexMap;\n                }, { ...workingState.indexes }),\n            workingState.indexes\n        );\n\n        const nextState = ops.batch.merge(batchToken, {\n            [this.arrName]: ops.batch.push(batchToken, id, workingState[this.arrName]),\n            [this.mapName]: ops.batch.merge(batchToken, {\n                [id]: finalEntry,\n            }, workingState[this.mapName]),\n            indexes: nextIndexes,\n        }, workingState);\n\n        return {\n            state: nextState,\n            created: finalEntry,\n        };\n    }\n\n    /**\n     * Returns the data structure with objects where `rows`\n     * are merged with `mergeObj`.\n     *\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @param  {Object} mergeObj - The object to merge with each row.\n     * @return {Object}\n     */\n    update(tx, branch, rows, mergeObj) {\n        const { batchToken, withMutations } = tx;\n\n        const mergeObjInto = (row) => {\n            const merge = withMutations ? ops.mutable.merge : ops.batch.merge(batchToken);\n            return merge(mergeObj, row);\n        };\n\n        const set = withMutations ? ops.mutable.set : ops.batch.set(batchToken);\n\n        const indexedAttrs = Object.keys(branch.indexes)\n            .filter(attr => mergeObj.hasOwnProperty(attr));\n        const indexIdsToAdd = [];\n        const indexIdsToDelete = [];\n\n        const nextMap = rows.reduce((map, row) => {\n            const prevAttrValues = indexedAttrs.reduce((valueMap, attr) => ({\n                ...valueMap,\n                [attr]: row[attr],\n            }), {});\n            const result = mergeObjInto(row);\n            const nextAttrValues = indexedAttrs.reduce((valueMap, attr) => ({\n                ...valueMap,\n                [attr]: result[attr],\n            }), {});\n            const id = result[this.idAttribute];\n            const nextRow = set(id, result, map);\n            indexedAttrs.forEach((attr) => {\n                const { [attr]: prevValue } = prevAttrValues;\n                const { [attr]: nextValue } = nextAttrValues;\n                if (prevValue === nextValue) {\n                    // attribute has not changed, no need to update any index\n                    return;\n                }\n                if (prevValue !== null) {\n                    // remove id from attribute's index for its old value\n                    indexIdsToDelete.push([attr, prevValue, id]);\n                }\n                if (nextValue !== null) {\n                    // add id to attribute's index for its new value\n                    indexIdsToAdd.push([attr, nextValue, id]);\n                }\n            });\n            return nextRow;\n        }, branch[this.mapName]);\n\n        let nextIndexes = branch.indexes;\n        if (withMutations) {\n            indexIdsToDelete.forEach(([attr, value, id]) => {\n                const arr = nextIndexes[attr][value];\n                const idx = arr.indexOf(id);\n                if (idx !== -1) {\n                    ops.mutable.splice(idx, 1, [], arr);\n                }\n            });\n            indexIdsToAdd.forEach(([attr, value, id]) => {\n                ops.mutable.push(id, nextIndexes[attr][value]);\n            });\n        } else {\n            if (indexIdsToAdd.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToAdd.reduce((indexMap, [attr, value, id]) => {\n                        indexMap[attr] = ops.batch.merge(\n                            batchToken,\n                            {\n                                [value]: ops.batch.push(\n                                    batchToken,\n                                    id,\n                                    indexMap[attr][value] || []\n                                ),\n                            },\n                            indexMap[attr]\n                        );\n                        return indexMap;\n                    }, { ...nextIndexes }),\n                    nextIndexes\n                );\n            }\n            if (indexIdsToDelete.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToDelete.reduce((indexMap, [attr, value, id]) => {\n                        indexMap[attr] = ops.batch.merge(\n                            batchToken,\n                            {\n                                [value]: ops.batch.filter(\n                                    batchToken,\n                                    rowId => rowId !== id,\n                                    indexMap[attr][value] || []\n                                ),\n                            },\n                            indexMap[attr]\n                        );\n                        return indexMap;\n                    }, { ...nextIndexes }),\n                    nextIndexes\n                );\n            }\n        }\n\n        return ops.batch.merge(batchToken, {\n            [this.mapName]: nextMap,\n            indexes: nextIndexes,\n        }, branch);\n    }\n\n    /**\n     * Returns the data structure without rows `rows`.\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @return {Object} the data structure without ids in `idsToDelete`.\n     */\n    delete(tx, branch, rows) {\n        const { batchToken, withMutations } = tx;\n\n        const { arrName, mapName } = this;\n        const arr = branch[arrName];\n\n        const idsToDelete = rows.map(row => row[this.idAttribute]);\n        if (withMutations) {\n            idsToDelete.forEach((id) => {\n                const idx = arr.indexOf(id);\n                if (idx !== -1) {\n                    ops.mutable.splice(idx, 1, [], arr);\n                }\n\n                ops.mutable.omit(id, branch[mapName]);\n            });\n            // delete ids from all indexes\n            Object.values(branch.indexes).forEach(attrIndex => (\n                Object.values(attrIndex).forEach(valueIndex => (\n                    idsToDelete.forEach((id) => {\n                        const idx = valueIndex.indexOf(id);\n                        if (idx !== -1) {\n                            ops.mutable.splice(idx, 1, [], valueIndex);\n                        }\n                    })\n                ))\n            ));\n            return branch;\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            Object.entries(branch.indexes).reduce((indexMap, [attr, attrIndex]) => {\n                indexMap[attr] = ops.batch.merge(\n                    batchToken,\n                    Object.entries(attrIndex).reduce((attrIndexMap, [value, valueIndex]) => {\n                        attrIndexMap[value] = ops.batch.filter(\n                            batchToken,\n                            id => !idsToDelete.includes(id),\n                            valueIndex\n                        );\n                        return attrIndexMap;\n                    }, { ...indexMap[attr] }),\n                    indexMap[attr]\n                );\n                return indexMap;\n            }, { ...branch.indexes }),\n            branch.indexes\n        );\n\n        return ops.batch.merge(batchToken, {\n            [arrName]: ops.batch.filter(\n                batchToken,\n                id => !idsToDelete.includes(id),\n                branch[arrName],\n            ),\n            [mapName]: ops.batch.omit(\n                batchToken,\n                idsToDelete,\n                branch[mapName],\n            ),\n            indexes: ops.batch.merge(\n                batchToken,\n                nextIndexes,\n                branch.indexes,\n            ),\n        }, branch);\n    }\n};\n\nexport default Table;\n","import ops from 'immutable-ops';\n\nimport {\n    CREATE, UPDATE, DELETE, SUCCESS,\n    STATE_FLAG,\n} from '../constants';\n\nimport Table from './Table';\n\nconst BASE_EMPTY_STATE = {};\nObject.defineProperty(BASE_EMPTY_STATE, STATE_FLAG, {\n    enumerable: true,\n    value: STATE_FLAG,\n});\n\nfunction replaceTableState(tableName, newTableState, tx, state) {\n    const { batchToken, withMutations } = tx;\n\n    if (withMutations) {\n        state[tableName] = newTableState;\n        return state;\n    }\n\n    return ops.batch.set(batchToken, tableName, newTableState, state);\n}\n\nfunction query(tables, querySpec, state) {\n    const { table: tableName, clauses } = querySpec;\n    const table = tables[tableName];\n    const rows = table.query(state[tableName], clauses);\n    return {\n        rows,\n    };\n}\n\nfunction update(tables, updateSpec, tx, state) {\n    const { action, payload } = updateSpec;\n\n    let tableName;\n    let nextTableState;\n    let resultPayload;\n\n    if (action === CREATE) {\n        ({ table: tableName } = updateSpec);\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n        const result = table.insert(tx, currTableState, payload);\n        nextTableState = result.state;\n        resultPayload = result.created;\n    } else {\n        const { query: querySpec } = updateSpec;\n        ({ table: tableName } = querySpec);\n        const { rows } = query(tables, querySpec, state);\n\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n\n        if (action === UPDATE) {\n            nextTableState = table.update(tx, currTableState, rows, payload);\n            // return updated rows\n            resultPayload = query(tables, querySpec, state).rows;\n        } else if (action === DELETE) {\n            nextTableState = table.delete(tx, currTableState, rows);\n            // return original rows that we just deleted\n            resultPayload = rows;\n        } else {\n            throw new Error(`Database received unknown update type: ${action}`);\n        }\n    }\n\n    const nextDBState = replaceTableState(tableName, nextTableState, tx, state);\n    return {\n        status: SUCCESS,\n        state: nextDBState,\n        payload: resultPayload,\n    };\n}\n\n\nexport function createDatabase(schemaSpec) {\n    const { tables: tableSpecs } = schemaSpec;\n    const tables = Object.entries(tableSpecs)\n        .reduce((map, [tableName, tableSpec]) => ({\n            ...map,\n            [tableName]: new Table(tableSpec),\n        }), {});\n\n    const getEmptyState = () => (\n        Object.entries(tables)\n            .reduce((map, [tableName, table]) => ({\n                ...map,\n                [tableName]: table.getEmptyState(),\n            }), BASE_EMPTY_STATE)\n    );\n\n    return {\n        getEmptyState,\n        query: query.bind(null, tables),\n        update: update.bind(null, tables),\n        // Used to inspect the schema.\n        describe: tableName => tables[tableName],\n    };\n}\n\nexport default createDatabase;\n","import {\n    ForeignKey, ManyToMany, RelationalField,\n} from './fields';\nimport QuerySet from './QuerySet';\nimport Model from './Model';\n\n/**\n * @module selectors\n */\n\nconst ALL_INSTANCES = Symbol('REDUX_ORM_ALL_INSTANCES');\n\nfunction idArgSelector(state, idArg) {\n    return idArg;\n}\n\nexport class SelectorSpec {\n    constructor({ parent, orm }) {\n        this._parent = parent;\n        this._orm = orm;\n    }\n\n    get cachePath() {\n        const basePath = this._parent ? this._parent.cachePath : [];\n        return [...basePath, this.key];\n    }\n}\n\nexport class ModelSelectorSpec extends SelectorSpec {\n    constructor({ model, ...other }) {\n        super(other);\n        this._model = model;\n    }\n\n    get key() {\n        return this._model.modelName;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector];\n    }\n\n    get resultFunc() {\n        return ({ [this._model.modelName]: ModelClass }, idArg) => {\n            if (typeof idArg === 'undefined') {\n                return ModelClass.all().toRefArray();\n            }\n            if (Array.isArray(idArg)) {\n                const { idAttribute } = ModelClass;\n                /**\n                 * TODO: we might want to allow passing arrays of property values\n                 * for faster matching of indexed columns; this might be the\n                 * key to allowing fast joins anyways, and could potentially\n                 * be re-used for any type of indexed value lookup\n                 */\n                return ModelClass\n                    .filter(instance => idArg.includes(instance[idAttribute]))\n                    .toRefArray();\n            }\n            const instance = ModelClass.withId(idArg);\n            return instance ? instance.ref : null;\n        };\n    }\n\n    get keySelector() {\n        return (state, idArg) => (\n            (typeof idArg === 'undefined') ? ALL_INSTANCES : idArg\n        );\n    }\n}\n\nclass ModelBasedSelectorSpec extends SelectorSpec {\n    constructor({\n        model, ...other\n    }) {\n        super(other);\n        this._model = model;\n    }\n\n    get resultFunc() {\n        return (session, idArg, ...other) => {\n            const { [this._model.modelName]: ModelClass } = session;\n            if (typeof idArg === 'undefined') {\n                return ModelClass.all().toModelArray()\n                    .map(instance => this.valueForInstance(instance, session, ...other));\n            }\n            if (Array.isArray(idArg)) {\n                return idArg.map(id => (\n                    this.valueForInstance(ModelClass.withId(id), session, ...other)\n                ));\n            }\n            return this.valueForInstance(ModelClass.withId(idArg), session, ...other);\n        };\n    }\n}\n\nexport class MapSelectorSpec extends ModelBasedSelectorSpec {\n    constructor({\n        field, accessorName, selector, ...other\n    }) {\n        super(other);\n        this._field = field;\n        this._accessorName = accessorName;\n        this._selector = selector;\n    }\n\n    get key() {\n        return this._selector;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector, state => state];\n    }\n\n    get keySelector() {\n        return (state, idArg) => (\n            (typeof idArg === 'undefined') ? ALL_INSTANCES : idArg\n        );\n    }\n\n    valueForInstance(instance, session, state) {\n        if (!instance) return null;\n        const {\n            [this._accessorName]: value,\n        } = instance;\n        if (!value) return null;\n        const {\n            [this._field.toModelName]: {\n                idAttribute: mapIdAttribute,\n            },\n        } = session;\n        return value.toRefArray()\n            .map(ref => this._selector(state, ref[mapIdAttribute]));\n    }\n}\n\nexport class FieldSelectorSpec extends ModelBasedSelectorSpec {\n    constructor({\n        field, fieldModel, accessorName, isVirtual, ...other\n    }) {\n        super(other);\n        this._field = field;\n        this._fieldModel = fieldModel;\n        this._accessorName = accessorName;\n        this._isVirtual = isVirtual;\n    }\n\n    get key() {\n        return this._accessorName;\n    }\n\n    get dependencies() {\n        return [this._orm, idArgSelector];\n    }\n\n    get keySelector() {\n        return (state, idArg) => (\n            (typeof idArg === 'undefined') ? ALL_INSTANCES : idArg\n        );\n    }\n\n    valueForInstance(instance, session) {\n        if (!instance) return null;\n        let value;\n        if (this._parent instanceof ModelSelectorSpec) {\n            value = instance[this._accessorName];\n        } else if (this._parent instanceof FieldSelectorSpec) {\n            const {\n                [this._parent.toModelName]: ParentToModel,\n            } = session;\n            const parentRef = this._parent.valueForInstance(instance, session);\n            const parentInstance = parentRef ? new ParentToModel(parentRef) : null;\n            value = parentInstance ? parentInstance[this._accessorName] : null;\n        }\n        if (value instanceof Model) {\n            return value ? value.ref : null;\n        }\n        if (value instanceof QuerySet) {\n            return value.toRefArray();\n        }\n        return value;\n    }\n\n    map(selector) { /* eslint-disable no-underscore-dangle */\n        if (selector instanceof ModelSelectorSpec) {\n            if (this.toModelName === selector._model.modelName) {\n                throw new Error(`Cannot select models in a \\`map()\\` call. If you just want the \\`${this._accessorName}\\` as a ref array then you can simply drop the \\`map()\\`. Otherwise make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`);\n            } else {\n                throw new Error(`Cannot select \\`${selector._model.modelName}\\` models in this \\`map()\\` call. Make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`);\n            }\n        } else if (selector instanceof FieldSelectorSpec) {\n            if (this.toModelName !== selector._model.modelName) {\n                throw new Error(`Cannot select fields of the \\`${selector._model.modelName}\\` model in this \\`map()\\` call. Make sure you're passing a field selector of the form \\`${this.toModelName}.<field>\\` or a custom selector instead.`);\n            }\n        } else if (\n            !selector ||\n            typeof selector !== 'function' ||\n            !selector.recomputations\n        ) {\n            throw new Error(`\\`map()\\` requires a selector as an input. Received: ${JSON.stringify(selector)} of type ${typeof selector}`);\n        }\n        if (\n            !(this._field instanceof ForeignKey) &&\n            !(this._field instanceof ManyToMany)\n        ) {\n            throw new Error('Cannot map selectors for non-collection fields');\n        }\n        return new MapSelectorSpec({\n            parent: this,\n            model: this._model,\n            orm: this._orm,\n            field: this._field,\n            accessorName: this._accessorName,\n            selector,\n        });\n    }\n\n    get toModelName() {\n        return (this._field.toModelName === 'this')\n            ? this._fieldModel.modelName\n            : this._field.toModelName;\n    }\n}\n\nfunction createFieldSelectorSpec({\n    parent, model, field, accessorName, orm, isVirtual,\n}) {\n    const fieldSelectorSpec = new FieldSelectorSpec({\n        parent,\n        model,\n        orm,\n        field,\n        accessorName,\n        isVirtual,\n    });\n    /* Do not even try to create field selectors below attributes. */\n    if (!(field instanceof RelationalField)) {\n        // \"orm.Author.name.publisher\" would be nonsense\n        return fieldSelectorSpec;\n    }\n    /* Prevent field selectors below collections. */\n    if (parent instanceof FieldSelectorSpec) { /* eslint-disable no-underscore-dangle */\n        if (\n            // \"orm.Author.books.publisher\" would be nonsense\n            (parent._field instanceof ForeignKey && parent._isVirtual) ||\n            // \"orm.Genre.books.publisher\" would be nonsense\n            (parent._field instanceof ManyToMany)\n        ) {\n            throw new Error(`Cannot create a selector for \\`${parent._accessorName}.${accessorName}\\` because \\`${parent._accessorName}\\` is a collection field.`);\n        }\n    }\n    const { toModelName } = field;\n    if (!toModelName) return fieldSelectorSpec;\n    const toModel = orm.get(\n        toModelName === 'this' ? model.modelName : toModelName\n    );\n    Object.entries(toModel.fields).forEach(([relatedFieldName, relatedField]) => {\n        const fieldAccessorName = relatedField.as || relatedFieldName;\n        Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: fieldSelectorSpec,\n                model,\n                fieldModel: toModel,\n                field: relatedField,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: false,\n            }),\n        });\n    });\n    Object.entries(toModel.virtualFields).forEach(([relatedFieldName, relatedField]) => {\n        const fieldAccessorName = relatedField.as || relatedFieldName;\n        if (fieldSelectorSpec.hasOwnProperty(fieldAccessorName)) {\n            return;\n        }\n        Object.defineProperty(fieldSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: fieldSelectorSpec,\n                model,\n                fieldModel: toModel,\n                field: relatedField,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: true,\n            }),\n        });\n    });\n    return fieldSelectorSpec;\n}\n\nexport function createModelSelectorSpec({ model, orm }) {\n    const modelSelectorSpec = new ModelSelectorSpec({\n        parent: null,\n        orm,\n        model,\n    });\n\n    Object.entries(model.fields).forEach(([fieldName, field]) => {\n        const fieldAccessorName = field.as || fieldName;\n        Object.defineProperty(modelSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: modelSelectorSpec,\n                model,\n                fieldModel: model,\n                field,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: false,\n            }),\n        });\n    });\n\n    Object.entries(model.virtualFields).forEach(([fieldName, field]) => {\n        const fieldAccessorName = field.as || fieldName;\n        if (modelSelectorSpec.hasOwnProperty(fieldAccessorName)) {\n            return;\n        }\n        Object.defineProperty(modelSelectorSpec, fieldAccessorName, {\n            get: () => createFieldSelectorSpec({\n                parent: modelSelectorSpec,\n                model,\n                fieldModel: model,\n                field,\n                accessorName: fieldAccessorName,\n                orm,\n                isVirtual: true,\n            }),\n        });\n    });\n\n    return modelSelectorSpec;\n}\n","import Session from './Session';\nimport Model from './Model';\nimport { createDatabase as defaultCreateDatabase } from './db';\nimport {\n    ForeignKey,\n    ManyToMany,\n    attr,\n} from './fields';\n\nimport { createModelSelectorSpec } from './selectors';\n\nimport {\n    m2mName,\n    attachQuerySetMethods,\n    m2mToFieldName,\n    m2mFromFieldName,\n    warnDeprecated,\n} from './utils';\n\nconst ORM_DEFAULTS = {\n    createDatabase: defaultCreateDatabase,\n};\n\nconst RESERVED_TABLE_OPTIONS = [\n    'indexes',\n    'meta',\n];\nconst isReservedTableOption = word => RESERVED_TABLE_OPTIONS.includes(word);\n\n/**\n * ORM - the Object Relational Mapper.\n *\n * Use instances of this class to:\n *\n * - Register your {@link Model} classes using {@link ORM#register}\n * - Get the empty state for the underlying database with {@link ORM#getEmptyState}\n * - Start an immutable database session with {@link ORM#session}\n * - Start a mutating database session with {@link ORM#mutableSession}\n *\n * Internally, this class handles generating a schema specification from models\n * to the database.\n */\nexport class ORM {\n    /**\n     * Creates a new ORM instance.\n     */\n    constructor(opts) {\n        const { createDatabase } = Object.assign({}, ORM_DEFAULTS, (opts || {}));\n        this.createDatabase = createDatabase;\n        this.registry = [];\n        this.implicitThroughModels = [];\n        this.installedFields = {};\n        this.stateSelector = opts ? opts.stateSelector : null;\n    }\n\n    /**\n     * Registers a {@link Model} class to the ORM.\n     *\n     * If the model has declared any ManyToMany fields, their\n     * through models will be generated and registered with\n     * this call, unless a custom through model has been specified.\n     *\n     * @param  {...Model} model - a {@link Model} class to register\n     * @return {undefined}\n     */\n    register(...models) {\n        models.forEach((model) => {\n            if (model.modelName === undefined) {\n                throw new Error('A model was passed that doesn\\'t have a modelName set');\n            }\n\n            model.invalidateClassCache();\n\n            this.registerManyToManyModelsFor(model);\n            this.registry.push(model);\n\n            Object.defineProperty(this, model.modelName, {\n                get: () => {\n                    // make sure virtualFields are set up\n                    this._setupModelPrototypes(this.registry);\n\n                    return createModelSelectorSpec({\n                        model,\n                        orm: this,\n                    });\n                },\n            });\n        });\n    }\n\n    registerManyToManyModelsFor(model) {\n        const { fields } = model;\n        const thisModelName = model.modelName;\n\n        Object.entries(fields).forEach(([fieldName, fieldInstance]) => {\n            if (!(fieldInstance instanceof ManyToMany)) {\n                return;\n            }\n\n            let toModelName;\n            if (fieldInstance.toModelName === 'this') {\n                toModelName = thisModelName;\n            } else {\n                toModelName = fieldInstance.toModelName; // eslint-disable-line prefer-destructuring\n            }\n\n            const selfReferencing = thisModelName === toModelName;\n            const fromFieldName = m2mFromFieldName(thisModelName);\n            const toFieldName = m2mToFieldName(toModelName);\n\n            if (fieldInstance.through) {\n                if (selfReferencing && !fieldInstance.throughFields) {\n                    throw new Error(\n                        'Self-referencing many-to-many relationship at ' +\n                        `\"${thisModelName}.${fieldName}\" using custom ` +\n                        `model \"${fieldInstance.through}\" has no ` +\n                        'throughFields key. Cannot determine which ' +\n                        'fields reference the instances partaking ' +\n                        'in the relationship.'\n                    );\n                }\n            } else {\n                const Through = class ThroughModel extends Model {};\n\n                Through.modelName = m2mName(thisModelName, fieldName);\n\n                const PlainForeignKey = class ThroughForeignKeyField extends ForeignKey {\n                    get installsBackwardsVirtualField() {\n                        return false;\n                    }\n\n                    get installsBackwardsDescriptor() {\n                        return false;\n                    }\n                };\n                const ForeignKeyClass = selfReferencing\n                    ? PlainForeignKey\n                    : ForeignKey;\n                Through.fields = {\n                    id: attr(),\n                    [fromFieldName]: new ForeignKeyClass(thisModelName),\n                    [toFieldName]: new ForeignKeyClass(toModelName),\n                };\n\n                Through.invalidateClassCache();\n                this.implicitThroughModels.push(Through);\n            }\n        });\n    }\n\n    /**\n     * Gets a {@link Model} class by its name from the registry.\n     * @param  {string} modelName - the name of the {@link Model} class to get\n     * @throws If {@link Model} class is not found.\n     * @return {Model} the {@link Model} class, if found\n     */\n    get(modelName) {\n        const allModels = this.registry.concat(this.implicitThroughModels);\n        const found = Object.values(allModels).find(\n            model => model.modelName === modelName\n        );\n\n        if (typeof found === 'undefined') {\n            throw new Error(`Did not find model ${modelName} from registry.`);\n        }\n        return found;\n    }\n\n    getModelClasses() {\n        this._setupModelPrototypes(this.registry);\n        this._setupModelPrototypes(this.implicitThroughModels);\n        return this.registry.concat(this.implicitThroughModels);\n    }\n\n    generateSchemaSpec() {\n        const models = this.getModelClasses();\n        const tables = models.reduce((spec, modelClass) => {\n            const tableName = modelClass.modelName;\n            const tableSpec = modelClass.tableOptions(); // eslint-disable-line no-underscore-dangle\n            Object.keys(tableSpec).filter(isReservedTableOption).forEach((key) => {\n                throw new Error(`Reserved keyword \\`${key}\\` used in ${tableName}.options.`);\n            });\n            spec[tableName] = {\n                fields: { ...modelClass.fields },\n                ...tableSpec,\n            };\n            return spec;\n        }, {});\n        return { tables };\n    }\n\n    getDatabase() {\n        if (!this.db) {\n            this.db = this.createDatabase(this.generateSchemaSpec());\n        }\n        return this.db;\n    }\n\n    /**\n     * Returns the empty database state.\n     * @return {Object} the empty state\n     */\n    getEmptyState() {\n        return this.getDatabase().getEmptyState();\n    }\n\n    /**\n     * Begins an immutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    session(state) {\n        return new Session(this, this.getDatabase(), state);\n    }\n\n    /**\n     * Begins a mutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    mutableSession(state) {\n        return new Session(this, this.getDatabase(), state, true);\n    }\n\n    /**\n     * @private\n     */\n    _setupModelPrototypes(models) {\n        models.filter(model => !model.isSetUp).forEach((model) => {\n            const { fields, modelName, querySetClass } = model;\n            Object.entries(fields).forEach(([fieldName, field]) => {\n                if (!this._isFieldInstalled(modelName, fieldName)) {\n                    this._installField(field, fieldName, model);\n                    this._setFieldInstalled(modelName, fieldName);\n                }\n            });\n            attachQuerySetMethods(model, querySetClass);\n            model.isSetUp = true;\n        });\n    }\n\n    /**\n     * @private\n     */\n    _isFieldInstalled(modelName, fieldName) {\n        return this.installedFields.hasOwnProperty(modelName)\n            ? !!this.installedFields[modelName][fieldName]\n            : false;\n    }\n\n    /**\n     * @private\n     */\n    _setFieldInstalled(modelName, fieldName) {\n        if (!this.installedFields.hasOwnProperty(modelName)) {\n            this.installedFields[modelName] = {};\n        }\n        this.installedFields[modelName][fieldName] = true;\n    }\n\n    /**\n     * Installs a field on a model and its related models if necessary.\n     * @private\n     */\n    _installField(field, fieldName, model) {\n        const FieldInstaller = field.installerClass;\n        (new FieldInstaller({\n            field,\n            fieldName,\n            model,\n            orm: this,\n        })).run();\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Use {@link ORM#mutableSession} instead.\n     */\n    withMutations(state) {\n        warnDeprecated(\n            '`ORM.prototype.withMutations` has been deprecated. ' +\n            'Use `ORM.prototype.mutableSession` instead.'\n        );\n        return this.mutableSession(state);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#session} instead.\n     */\n    from(state) {\n        warnDeprecated(\n            '`ORM.prototype.from` has been deprecated. ' +\n            'Use `ORM.prototype.session` instead.'\n        );\n        return this.session(state);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#getEmptyState} instead.\n     */\n    getDefaultState() {\n        warnDeprecated(\n            '`ORM.prototype.getDefaultState` has been deprecated. Use ' +\n            '`ORM.prototype.getEmptyState` instead.'\n        );\n        return this.getEmptyState();\n    }\n\n    /**\n     * @deprecated Define a Model class instead.\n     */\n    define() {\n        throw new Error(\n            '`ORM.prototype.define` has been removed. Please define a Model class.'\n        );\n    }\n}\n\nexport function DeprecatedSchema() {\n    throw new Error(\n        'Schema has been renamed to ORM. Please import ORM instead of Schema ' +\n        'from Redux-ORM.'\n    );\n}\n\nexport default ORM;\n","import { STATE_FLAG } from './constants';\n\nconst defaultEqualityCheck = (a, b) => a === b;\nexport const eqCheck = defaultEqualityCheck;\n\nconst isOrmState = arg => (\n    arg &&\n    typeof arg === 'object' &&\n    arg.hasOwnProperty(STATE_FLAG)\n);\n\nconst argsAreEqual = (lastArgs, nextArgs, equalityCheck) => (\n    nextArgs.filter(arg => !isOrmState(arg))\n        .every((arg, index) => (\n            equalityCheck(arg, lastArgs[index])\n        ))\n);\n\nconst rowsAreEqual = (ids, rowsA, rowsB) => (\n    ids.every(id => rowsA[id] === rowsB[id])\n);\n\nconst accessedModelInstancesAreEqual = (previous, ormState, orm) => {\n    const {\n        accessedInstances,\n    } = previous;\n\n    return Object.entries(accessedInstances).every(([modelName, instances]) => {\n        // if the entire table has not been changed, we have nothing to do\n        if (previous.ormState[modelName] === ormState[modelName]) {\n            return true;\n        }\n\n        const { mapName } = orm.getDatabase().describe(modelName);\n\n        const { [mapName]: previousRows } = previous.ormState[modelName];\n        const { [mapName]: rows } = ormState[modelName];\n\n        const accessedIds = Object.keys(instances);\n        return rowsAreEqual(accessedIds, previousRows, rows);\n    });\n};\n\nconst accessedIndexesAreEqual = (previous, ormState) => {\n    const {\n        accessedIndexes,\n    } = previous;\n\n    return Object.entries(accessedIndexes).every(([modelName, indexes]) => (\n        Object.entries(indexes).every(([column, values]) => (\n            values.every(value => (\n                previous.ormState[modelName].indexes[column][value]\n                    === ormState[modelName].indexes[column][value]\n            ))\n        ))\n    ));\n};\n\nconst fullTableScannedModelsAreEqual = (previous, ormState) => (\n    previous.fullTableScannedModels.every(modelName => (\n        previous.ormState[modelName]\n            === ormState[modelName]\n    ))\n);\n\n/**\n * A memoizer to use with redux-orm\n * selectors. When the memoized function is first run,\n * the memoizer will remember the models that are accessed\n * during that function run.\n *\n * On subsequent runs, the memoizer will check if those\n * models' states have changed compared to the previous run.\n *\n * Memoization algorithm operates like this:\n *\n * 1. Has the selector been run before? If not, go to 6.\n *\n * 2. If the selector has other input selectors in addition to the\n *    ORM state selector, check their results for equality with the previous results.\n *    If they aren't equal, go to 6.\n *\n * 3. Some filter queries may have required scanning entire tables during the last run.\n *    If any of those tables have changed, go to 6.\n *\n * 4. Check which foreign key indexes the database has used to speed up queries\n *    during the last run. If any have changed, go to 6.\n *\n * 5. Check which Model's instances the selector has accessed during the last run.\n *    Check for equality with each of those states versus their states in the\n *    previous ORM state. If all of them are equal, return the previous result.\n *\n * 6. Run the selector. Check the Session object used by the selector for\n *    which Model's states were accessed, and merge them with the previously\n *    saved information about accessed models (if-else branching can change\n *    which models are accessed on different inputs). Save the ORM state and\n *    other arguments the selector was called with, overriding previously\n *    saved values. Save the selector result. Return the selector result.\n *\n * @private\n * @param  {Function} func - function to memoize\n * @param  {Function} argEqualityCheck - equality check function to use with normal\n *                                       selector args\n * @param  {ORM} orm - a redux-orm ORM instance\n * @return {Function} `func` memoized.\n */\nexport function memoize(func, argEqualityCheck = defaultEqualityCheck, orm) {\n    let previous = {\n        /* Result of the previous function call */\n        result: null,\n        /* Arguments to the previous function call (excluding ORM state) */\n        args: null,\n        /**\n         * Snapshot of the previous database.\n         *\n         * Lets us know how the tables looked like\n         * during the previous function call.\n         */\n        ormState: null,\n        /**\n         * Names of models whose tables have been scanned completely\n         * during previous function call (contains only model names)\n         * Format example: ['Book']\n         */\n        fullTableScannedModels: [],\n        /**\n         * Map of which model instances have been accessed\n         * during previous function call.\n         * Contains only PKs of accessed instances.\n         * Format example: { Book: { 1: true, 3: true } }\n         */\n        accessedInstances: {},\n        /**\n         * Map of which attribute indexes have been accessed\n         * during previous function call.\n         * Contains only attributes that were actually filtered on.\n         * Author.withId(3).books would add 3 to the authorId index below.\n         * Format example: { Book: { authorId: [1, 2], publisherId: [5] } }\n         */\n        accessedIndexes: {},\n    };\n\n    return (...stateAndArgs) => {\n        /**\n         * The first argument to this function needs to be\n         * the ORM's reducer state in the user's Redux store.\n         */\n        const [ormState, ...args] = stateAndArgs;\n\n        const selectorWasCalledBefore = Boolean(previous.args);\n        if (\n            selectorWasCalledBefore &&\n            argsAreEqual(previous.args, args, argEqualityCheck) &&\n            fullTableScannedModelsAreEqual(previous, ormState) &&\n            accessedIndexesAreEqual(previous, ormState) &&\n            accessedModelInstancesAreEqual(previous, ormState, orm)\n        ) {\n            /**\n             * None of this selector's dependencies have changed\n             * since the last time that we called it.\n             */\n            return previous.result;\n        }\n\n        /**\n         * Start a session so that the selector can access the database.\n         * Make this session immutable. This way we can find out if\n         * the operations that the selector performs are cacheable.\n         */\n        const session = orm.session(ormState);\n        /* Replace all ORM state arguments by the session above */\n        const argsWithSession = args.map(arg => (isOrmState(arg) ? session : arg));\n\n        /* This is where we call the actual function */\n        const result = func(...argsWithSession);\n\n        /**\n         * The metadata for the previous call are no longer valid.\n         * Update cached values.\n         */\n        previous = {\n            /* Arguments that were passed to the selector */\n            args,\n            /* Selector result */\n            result,\n            /* Redux state slice for session.state */\n            ormState,\n            /* Rows retrieved by resolved primary key */\n            accessedInstances: session.accessedModelInstances,\n            /* Foreign key indexes that were used to speed up queries */\n            accessedIndexes: session.accessedIndexes,\n            /* Tables that had to be scanned completely */\n            fullTableScannedModels: session.fullTableScannedModels,\n        };\n\n        return result;\n    };\n}\n","import { createSelectorCreator } from 'reselect';\nimport createCachedSelector, { FlatMapCache } from 're-reselect';\n\nimport { memoize } from './memoize';\n\nimport { ORM } from './ORM';\nimport {\n    SelectorSpec,\n    MapSelectorSpec,\n} from './selectors';\n\n/**\n * @module redux\n */\n\n/**\n * Calls all models' reducers if they exist.\n * @return {undefined}\n */\nexport function defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach((modelClass) => {\n        if (typeof modelClass.reducer === 'function') {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\n\n/**\n * Call the returned function to pass actions to Redux-ORM.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance.\n * @param {Function} [updater] - the function updating the ORM state based on the given action.\n * @return {Function} reducer that will update the ORM state.\n */\nexport function createReducer(orm, updater = defaultUpdater) {\n    return (state, action) => {\n        const session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n}\n\nfunction createSelectorFromSpec(spec) {\n    return createCachedSelector(\n        spec.dependencies,\n        spec.resultFunc\n    )(spec.keySelector, {\n        cacheObject: new FlatMapCache(),\n        selectorCreator: createSelector, // eslint-disable-line no-use-before-define\n    });\n}\n\nfunction toORM(arg) { /* eslint-disable no-underscore-dangle */\n    if (arg instanceof ORM) {\n        return arg;\n    }\n    if (arg instanceof SelectorSpec) {\n        return arg._orm;\n    }\n    return false;\n}\n\nconst selectorCache = new Map();\nconst SELECTOR_KEY = Symbol('REDUX_ORM_SELECTOR');\n\nfunction toSelector(arg) { /* eslint-disable no-underscore-dangle */\n    if (typeof arg === 'function') {\n        return arg;\n    }\n    if (arg instanceof ORM) {\n        return arg.stateSelector;\n    }\n    if (arg instanceof MapSelectorSpec) {\n        arg._selector = toSelector(arg._selector);\n    }\n    if (arg instanceof SelectorSpec) {\n        const { _orm: orm, cachePath } = arg;\n        let ormSelectors;\n        let level;\n        if (cachePath && cachePath.length) {\n            // the selector cache for the spec's ORM\n            if (!selectorCache.has(orm)) {\n                selectorCache.set(orm, new Map());\n            }\n            ormSelectors = selectorCache.get(orm);\n\n            /**\n             * Drill down into selector map by cachePath.\n             *\n             * The selector itself is stored under a special SELECTOR_KEY\n             * so that we can store selectors below it as well.\n             */\n            level = ormSelectors;\n            for (let i = 0; i < cachePath.length; ++i) {\n                if (!level.has(cachePath[i])) {\n                    level.set(cachePath[i], new Map());\n                }\n                level = level.get(cachePath[i]);\n            }\n            if (level && level.has(SELECTOR_KEY)) {\n                // Cache hit: the selector has been created before\n                return level.get(SELECTOR_KEY);\n            }\n        }\n\n        const selector = createSelectorFromSpec(arg);\n\n        if (cachePath && cachePath.length) {\n            // Save the selector at the cachePath position\n            level.set(SELECTOR_KEY, selector);\n        }\n\n        return selector;\n    }\n    throw new Error(`Failed to interpret selector argument: ${JSON.stringify(arg)} of type ${typeof arg}`);\n}\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, you will receive a\n * `session` argument (a `Session` instance) followed by any\n * input arguments, like in `reselect`.\n *\n * This is an example selector:\n *\n * ```javascript\n * // orm is an instance of ORM\n * const bookSelector = createSelector(orm, session => {\n *     return session.Book.map(book => {\n *         return Object.assign({}, book.ref, {\n *             authors: book.authors.map(author => author.name),\n *             genres: book.genres.map(genre => genre.name),\n *         });\n *     });\n * });\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n *\n * Everytime a selector runs, this function records which instances\n * of your `Model`s were accessed.<br>\n * On subsequent runs, the selector first checks if the previously\n * accessed instances or `args` have changed in any way:\n * <ul>\n *     <li>If yes, the selector calls the function you passed to it.</li>\n *     <li>If not, it just returns the previous result\n *         (unless you call it for the first time).</li>\n * </ul>\n *\n * This way you can use the `PureRenderMixin` in your React components\n * for performance gains.\n *\n * @global\n *\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nexport function createSelector(...args) {\n    if (!args.length) {\n        throw new Error('Cannot create a selector without arguments.');\n    }\n\n    const resultArg = args.pop();\n    const dependencies = Array.isArray(args[0]) ? args[0] : args;\n\n    const orm = dependencies.map(toORM).find(Boolean);\n    const inputFuncs = dependencies.map(toSelector);\n\n    if (typeof resultArg === 'function') {\n        if (!orm) {\n            throw new Error('Failed to resolve the current ORM database state. Please pass an ORM instance or an ORM selector as an argument to `createSelector()`.');\n        } else if (!orm.stateSelector) {\n            throw new Error('Failed to resolve the current ORM database state. Please pass an object to the ORM constructor that specifies a `stateSelector` function.');\n        } else if (typeof orm.stateSelector !== 'function') {\n            throw new Error(`Failed to resolve the current ORM database state. Please pass a function when specifying the ORM's \\`stateSelector\\`. Received: ${JSON.stringify(orm.stateSelector)} of type ${typeof orm.stateSelector}`);\n        }\n\n        return createSelectorCreator(memoize, undefined, orm)(\n            [orm.stateSelector, ...inputFuncs],\n            resultArg\n        );\n    }\n\n    if (resultArg instanceof ORM) {\n        throw new Error('ORM instances cannot be the result function of selectors. You can access your models in the last function that you pass to `createSelector()`.');\n    }\n    if (inputFuncs.length) {\n        console.warn('Your input selectors will be ignored: the passed result function does not require any input.');\n    }\n\n    return toSelector(resultArg);\n}\n","import QuerySet from './QuerySet';\nimport Model from './Model';\nimport { DeprecatedSchema, ORM } from './ORM';\nimport Session from './Session';\nimport {\n    createReducer,\n    createSelector,\n} from './redux';\nimport {\n    ForeignKey,\n    ManyToMany,\n    OneToOne,\n    fk,\n    many,\n    oneToOne,\n    attr,\n    Attribute,\n} from './fields';\n\nconst Schema = DeprecatedSchema;\n\nconst Backend = function RemovedBackend() {\n    throw new Error(\n        'Having a custom Backend instance is now unsupported. ' +\n        'Documentation for database customization is upcoming, for now ' +\n        'please look at the db folder in the source.'\n    );\n};\n\nexport {\n    Attribute,\n    QuerySet,\n    Model,\n    ORM,\n    Schema,\n    Backend,\n    Session,\n    ForeignKey,\n    ManyToMany,\n    OneToOne,\n    fk,\n    many,\n    attr,\n    oneToOne,\n    createReducer,\n    createSelector,\n};\n\nexport default Model;\n"],"sourceRoot":""}