{"version":3,"sources":["webpack://ReduxOrm/webpack/universalModuleDefinition","webpack://ReduxOrm/webpack/bootstrap","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/createClass.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/inheritsLoose.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/typeof.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://ReduxOrm/./node_modules/lodash/_baseIteratee.js","webpack://ReduxOrm/./node_modules/lodash/isArray.js","webpack://ReduxOrm/./node_modules/lodash/_baseOrderBy.js","webpack://ReduxOrm/./node_modules/lodash/identity.js","webpack://ReduxOrm/./node_modules/lodash/reject.js","webpack://ReduxOrm/./node_modules/lodash/filter.js","webpack://ReduxOrm/./node_modules/lodash/orderBy.js","webpack://ReduxOrm/./node_modules/lodash/sortBy.js","webpack://ReduxOrm/./node_modules/reselect/lib/index.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://ReduxOrm/./node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://ReduxOrm/./node_modules/lodash/_arrayFilter.js","webpack://ReduxOrm/./node_modules/lodash/_baseFilter.js","webpack://ReduxOrm/./node_modules/lodash/negate.js","webpack://ReduxOrm/./node_modules/lodash/_arrayMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseMap.js","webpack://ReduxOrm/./node_modules/lodash/_baseSortBy.js","webpack://ReduxOrm/./node_modules/lodash/_baseUnary.js","webpack://ReduxOrm/./node_modules/lodash/_compareMultiple.js","webpack://ReduxOrm/./node_modules/lodash/_compareAscending.js","webpack://ReduxOrm/./node_modules/lodash/isSymbol.js","webpack://ReduxOrm/./node_modules/lodash/_baseFlatten.js","webpack://ReduxOrm/./node_modules/lodash/_baseRest.js","webpack://ReduxOrm/./node_modules/lodash/_overRest.js","webpack://ReduxOrm/./node_modules/lodash/_apply.js","webpack://ReduxOrm/./node_modules/lodash/_setToString.js","webpack://ReduxOrm/./node_modules/lodash/_isIterateeCall.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_isPlaceholder.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry1.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_arity.js","webpack://ReduxOrm/./node_modules/ramda/es/curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curry2.js","webpack://ReduxOrm/./node_modules/ramda/es/internal/_curryN.js","webpack://ReduxOrm/./node_modules/ramda/es/curry.js","webpack://ReduxOrm/./node_modules/ramda/es/__.js","webpack://ReduxOrm/./node_modules/immutable-ops/es/index.js","webpack://ReduxOrm/./src/constants.js","webpack://ReduxOrm/./src/utils.js","webpack://ReduxOrm/./src/QuerySet.js","webpack://ReduxOrm/./src/Session.js","webpack://ReduxOrm/./src/descriptors.js","webpack://ReduxOrm/./src/fields.js","webpack://ReduxOrm/./src/Model.js","webpack://ReduxOrm/./src/db/Table.js","webpack://ReduxOrm/./src/db/Database.js","webpack://ReduxOrm/./src/memoize.js","webpack://ReduxOrm/./src/redux.js","webpack://ReduxOrm/./src/ORM.js","webpack://ReduxOrm/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","subClass","superClass","constructor","__proto__","_typeof2","obj","iterator","_typeof","arrayWithoutHoles","iterableToArray","nonIterableSpread","arr","isArray","Array","arrayMap","baseIteratee","baseMap","baseSortBy","baseUnary","compareMultiple","identity","collection","iteratees","orders","index","result","criteria","iteratee","other","arrayFilter","baseFilter","negate","predicate","array","resIndex","baseOrderBy","guard","undefined","baseFlatten","baseRest","isIterateeCall","sortBy","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheck","arguments","lastArgs","lastResult","prev","next","areArgumentsShallowlyEqual","apply","createSelectorCreator","memoize","_len","memoizeOptions","_key","_len2","funcs","_key2","recomputations","resultFunc","pop","dependencies","every","dep","dependencyTypes","map","join","Error","getDependencies","memoizedResultFunc","concat","selector","params","push","resetRecomputations","createStructuredSelector","selectors","selectorCreator","createSelector","objectKeys","keys","_len3","values","_key3","reduce","composition","arr2","iter","toString","from","TypeError","FUNC_ERROR_TEXT","args","this","comparer","sort","compareAscending","objCriteria","othCriteria","ordersLength","isSymbol","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","overRest","setToString","start","nativeMax","Math","max","transform","otherArgs","thisArg","_isPlaceholder","_curry1","fn","f1","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","es_curryN","f2","_b","_a","_curry2","_curryN","received","combined","argsIdx","left","combinedIdx","es_curry","_","@@functional/placeholder","forOwn","OWNER_ID_TAG","canMutate","ownerID","getBatchToken","prepareNewObject","instance","addOwnerID","forceArray","arg","PATH_SEPARATOR","normalizePath","pathArg","indexOf","split","mutableSet","mutableMerge","isDeep","_mergeObjs","baseObj","mergeObjs","forEach","mergeObj","assignValue","typeof_default","assign","toConsumableArray_default","mutableShallowMerge","mutableDeepMerge","mutableOmit","_keys","shouldMergeKey","immutableMerge","hasChanges","nextObject","willChange","mergeValue","currentValue","recursiveMergeResult","immutableDeepMerge","immutableArrSet","newArr","copied","fastArrayCopy","mutableArrFilter","currIndex","originalIndex","splice","mutableArrSplice","deleteCount","_vals","vals","mutableArrInsert","immutableArrSplice","slice","immutableArrInsert","immutableOperations","merge","deepMerge","omit","keysInObj","filter","newObj","setIn","_pathArg","acc","currRef","valueInPath","pathLen","rootObj","curr","idx","currType","_newObj","pathRepr","insert","set","isArrayLike","mutableOperations","originalPathArg","done","es","immutableOps","mutableOps","batchOps","mutable","batch","batched","_token","_fn","token","immutableOpsBoundToToken","__","getImmutableOps","UPDATE","DELETE","CREATE","FILTER","EXCLUDE","SUCCESS","warnDeprecated","msg","console","warn","log","m2mName","declarationModelName","fieldName","string","charAt","toUpperCase","capitalize","m2mFromFieldName","m2mToFieldName","otherModelName","querySetDelegatorFactory","methodName","getQuerySet","querySetGetterDelegatorFactory","getterName","attachQuerySetMethods","modelClass","querySetClass","leftToDefine","sharedMethods","currClass","Function","getPrototypeOf","forEachSuperClass","cls","defined","getOwnPropertyDescriptor","normalizeEntity","entity","getId","arrayDiffActions","sourceArr","targetArr","itemsInBoth","item","includes","deleteItems","addItems","delete","add","ops","clauseFiltersByAttribute","type","payload","attribute","attributeValue","mapValues","entries","newObject","QuerySet","clauses","opts","_opts","addSharedMethod","_proto","_new","userOpts","_evaluate","rows","id","withId","toRefArray","toModelArray","ModelClass","count","exists","Boolean","at","first","last","all","lookupObj","normalizedLookupObj","filterDescriptor","exclude","excludeDescriptor","session","modelName","_evaluated","table","querySpec","query","orderBy","orderByDescriptor","update","applyUpdate","action","model","_onDelete","createClass_default","Session","schema","db","state","withMutations","batchToken","getEmptyState","initialState","modelData","models","getModelClasses","sessionBoundModels","SessionBoundModel","Reflect","construct","setPrototypeOf","connect","getDataForModel","markAccessed","modelIds","data","accessedInstances","markFullTableScanned","fullTableScanned","markAccessedIndexes","indexes","attr","accessedIndexes","updateSpec","tx","_getTransaction","status","_markAccessedByQuery","idAttribute","accessedIds","Set","row","anyClauseFilteredByPk","some","clause","getNextState","[object Object]","forwardsManyToOneDescriptor","declaredToModelName","DeclaredToModel","getClass","toId","_fields","manyToManyDescriptor","declaredFromModelName","throughModelName","throughFields","reverse","DeclaredFromModel","ThroughModel","ThisModel","OtherModel","thisReferencingField","to","otherReferencingField","thisId","throughQs","referencedOtherIds","qs","otherModelInstance","has","entities","idsToAdd","existingQs","through","existingIds","clear","remove","idsToRemove","entitiesToDelete","size","entitiesToDeleteIds","unexistingIds","DefaultFieldInstaller","installForwardsDescriptor","field","createForwardsDescriptor","toModel","throughModel","installForwardsVirtualField","virtualFields","createForwardsVirtualField","installBackwardsDescriptor","backwardsFieldName","toModelName","reverseFieldErrorMessage","createBackwardsDescriptor","installBackwardsVirtualField","createBackwardsVirtualField","FieldInstallerTemplate","orm","references","run","installsForwardsDescriptor","installsForwardsVirtualField","installsBackwardsDescriptor","installsBackwardsVirtualField","_toModel","_throughModel","getThroughModelName","getBackwardsFieldName","Field","Attribute","_Field","_this","getDefault","inheritsLoose_default","attrDescriptor","RelationalField","_this2","_Field2","relatedName","as","toLowerCase","reverseFieldName","_DefaultFieldInstalle","AliasedForwardsDescriptorInstaller","ForeignKey","_RelationalField","_this3","_proto7","declaredFieldName","backwardsManyToOneDescriptor","ManyToMany","_RelationalField2","_proto8","getThroughFields","fieldAName","fieldBName","fieldA","fields","throughModelFieldReferencing","otherModel","find","someFieldName","OneToOne","_RelationalField3","_proto9","forwardsOneToOneDescriptor","backwardsOneToOneDescriptor","fk","many","oneToOne","getByIdQuery","modelInstance","Model","_initFields","propsObj","options","ids","_session","QuerySetClass","invalidateClassCache","isSetUp","_getTableOpts","backend","userProps","m2mRelations","declaredFieldNames","declaredVirtualFieldNames","valuePassed","_refreshMany2Many","upsert","idExists","_findDatabaseRows","equals","keysInA","objectShallowEquals","propertyName","userMergeObj","mergeKey","mergedFields","updatedModel","relationsEqual","fieldsEqual","refreshFromState","ref","relations","normalizedNewIds","uniqueIds","fromField","toField","diffActions","idsToDelete","relatedQs","hasId","describe","DEFAULT_TABLE_OPTIONS","arrName","mapName","Table","accessId","branch","accessIds","accessIdList","accessList","getMaxId","getMeta","setMaxId","newMaxId","setMeta","nextId","pkIndex","attrIndexes","meta","reducer","remainingPayload","withoutPkAttr","filterAttr","indexAttrs","lastIndex","indexedIds","indexSet","withoutIndexAttrs","reject","clauseReducesResultSetSize","entry","workingState","_currMax","userPassedId","newMax","newId","currMax","idSequencer","finalEntry","indexesToAppendTo","fkAttr","attrIndex","created","nextIndexes","indexMap","indexedAttrs","indexIdsToAdd","indexIdsToDelete","nextMap","prevAttrValues","valueMap","mergeObjInto","nextAttrValues","nextRow","prevValue","nextValue","rowId","valueIndex","attrIndexMap","tables","tableName","nextTableState","resultPayload","currTableState","nextDBState","newTableState","replaceTableState","createDatabase","schemaSpec","tableSpecs","tableSpec","argsAreEqual","nextArgs","accessedModelInstancesAreEqual","previous","ormState","instances","getDatabase","previousRows","rowsA","rowsB","rowsAreEqual","accessedIndexesAreEqual","column","fullTableScannedModelsAreEqual","fullTableScannedModels","argEqualityCheck","stateAndArgs","accessedModelInstances","createReducer","updater","ORM_DEFAULTS","defaultCreateDatabase","RESERVED_TABLE_OPTIONS","ORM","registry","implicitThroughModels","installedFields","register","registerManyToManyModelsFor","thisModelName","fieldInstance","selfReferencing","fromFieldName","toFieldName","Through","_Model","ForeignKeyClass","_ForeignKey","ThroughForeignKeyField","allModels","found","_setupModelPrototypes","generateSchemaSpec","spec","word","isReservedTableOption","mutableSession","_isFieldInstalled","_installField","_setFieldInstalled","FieldInstaller","installerClass","getDefaultState","__webpack_exports__","Schema","Backend","fields_Attribute","src_QuerySet","src_Model","ORM_ORM","src_Session","fields_ForeignKey","fields_ManyToMany","fields_OneToOne","fields_attr","redux_createSelector"],"mappings":"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","file":"redux-orm.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"ReduxOrm\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReduxOrm\"] = factory();\n\telse\n\t\troot[\"ReduxOrm\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  var index = -1;\n  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var arrayFilter = require('./_arrayFilter'),\n    baseFilter = require('./_baseFilter'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray'),\n    negate = require('./negate');\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nmodule.exports = reject;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n","var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n","'use strict';\n\nexports.__esModule = true;\nexports.defaultMemoize = defaultMemoize;\nexports.createSelectorCreator = createSelectorCreator;\nexports.createStructuredSelector = createStructuredSelector;\nfunction defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nfunction createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = defaultMemoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nvar createSelector = exports.createSelector = createSelectorCreator(defaultMemoize);\n\nfunction createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n","var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nmodule.exports = head;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","export default function _isPlaceholder(a) {\n       return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}","import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport _curry2 from './internal/_curry2.js';\nimport _curryN from './internal/_curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;","import _curry1 from './_curry1.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}","import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}","import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;","/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default { '@@functional/placeholder': true };","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport { curry, __ as placeholder } from 'ramda';\n\nfunction forOwn(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(obj[key], key);\n    }\n  }\n}\n\nfunction isArrayLike(value) {\n  return value && _typeof(value) === 'object' && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n}\n\nvar OWNER_ID_TAG = '@@_______immutableOpsOwnerID';\n\nfunction fastArrayCopy(arr) {\n  var copied = new Array(arr.length);\n\n  for (var i = 0; i < arr.length; i++) {\n    copied[i] = arr[i];\n  }\n\n  return copied;\n}\n\nexport function canMutate(obj, ownerID) {\n  if (!ownerID) return false;\n  return obj[OWNER_ID_TAG] === ownerID;\n}\nvar newOwnerID = typeof Symbol === 'function' ? function () {\n  return Symbol('ownerID');\n} : function () {\n  return {};\n};\nexport var getBatchToken = newOwnerID;\n\nfunction addOwnerID(obj, ownerID) {\n  Object.defineProperty(obj, OWNER_ID_TAG, {\n    value: ownerID,\n    configurable: true,\n    enumerable: false\n  });\n  return obj;\n}\n\nfunction prepareNewObject(instance, ownerID) {\n  if (ownerID) {\n    addOwnerID(instance, ownerID);\n  }\n\n  return instance;\n}\n\nfunction forceArray(arg) {\n  if (!(arg instanceof Array)) {\n    return [arg];\n  }\n\n  return arg;\n}\n\nvar PATH_SEPARATOR = '.';\n\nfunction normalizePath(pathArg) {\n  if (typeof pathArg === 'string') {\n    if (pathArg.indexOf(PATH_SEPARATOR) === -1) {\n      return [pathArg];\n    }\n\n    return pathArg.split(PATH_SEPARATOR);\n  }\n\n  return pathArg;\n}\n\nfunction mutableSet(key, value, obj) {\n  obj[key] = value;\n  return obj;\n}\n\nfunction mutableSetIn(_pathArg, value, obj) {\n  var originalPathArg = normalizePath(_pathArg);\n  var pathLen = originalPathArg.length;\n  var done = false;\n  var idx = 0;\n  var acc = obj;\n  var curr = originalPathArg[idx];\n\n  while (!done) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      done = true;\n    } else {\n      var currType = _typeof(acc[curr]);\n\n      if (currType === 'undefined') {\n        var newObj = {};\n        prepareNewObject(newObj, null);\n        acc[curr] = newObj;\n      } else if (currType !== 'object') {\n        var pathRepr = \"\".concat(originalPathArg[idx - 1], \".\").concat(curr);\n        throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n      }\n\n      acc = acc[curr];\n      idx++;\n      curr = originalPathArg[idx];\n    }\n  }\n\n  return obj;\n}\n\nfunction valueInPath(_pathArg, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var acc = obj;\n\n  for (var i = 0; i < pathArg.length; i++) {\n    var curr = pathArg[i];\n    var currRef = acc[curr];\n\n    if (i === pathArg.length - 1) {\n      return currRef;\n    }\n\n    if (_typeof(currRef) === 'object') {\n      acc = currRef;\n    } else {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}\n\nfunction immutableSetIn(ownerID, _pathArg, value, obj) {\n  var pathArg = normalizePath(_pathArg);\n  var currentValue = valueInPath(pathArg, obj);\n  if (value === currentValue) return obj;\n  var pathLen = pathArg.length;\n  var acc;\n\n  if (canMutate(obj, ownerID)) {\n    acc = obj;\n  } else {\n    acc = Object.assign(prepareNewObject({}, ownerID), obj);\n  }\n\n  var rootObj = acc;\n  pathArg.forEach(function (curr, idx) {\n    if (idx === pathLen - 1) {\n      acc[curr] = value;\n      return;\n    }\n\n    var currRef = acc[curr];\n\n    var currType = _typeof(currRef);\n\n    if (currType === 'object') {\n      if (canMutate(currRef, ownerID)) {\n        acc = currRef;\n      } else {\n        var newObj = prepareNewObject({}, ownerID);\n        acc[curr] = Object.assign(newObj, currRef);\n        acc = newObj;\n      }\n\n      return;\n    }\n\n    if (currType === 'undefined') {\n      var _newObj = prepareNewObject({}, ownerID);\n\n      acc[curr] = _newObj;\n      acc = _newObj;\n      return;\n    }\n\n    var pathRepr = \"\".concat(pathArg[idx - 1], \".\").concat(curr);\n    throw new Error(\"A non-object value was encountered when traversing setIn path at \".concat(pathRepr, \".\"));\n  });\n  return rootObj;\n}\n\nfunction mutableMerge(isDeep, _mergeObjs, baseObj) {\n  var mergeObjs = forceArray(_mergeObjs);\n\n  if (isDeep) {\n    mergeObjs.forEach(function (mergeObj) {\n      forOwn(mergeObj, function (value, key) {\n        if (isDeep && baseObj.hasOwnProperty(key)) {\n          var assignValue;\n\n          if (_typeof(value) === 'object') {\n            assignValue = mutableMerge(isDeep, [value], baseObj[key]);\n          } else {\n            assignValue = value;\n          }\n\n          baseObj[key] = assignValue;\n        } else {\n          baseObj[key] = value;\n        }\n      });\n    });\n  } else {\n    Object.assign.apply(Object, [baseObj].concat(_toConsumableArray(mergeObjs)));\n  }\n\n  return baseObj;\n}\n\nvar mutableShallowMerge = mutableMerge.bind(null, false);\nvar mutableDeepMerge = mutableMerge.bind(null, true);\n\nfunction mutableOmit(_keys, obj) {\n  var keys = forceArray(_keys);\n  keys.forEach(function (key) {\n    delete obj[key];\n  });\n  return obj;\n}\n\nfunction shouldMergeKey(obj, other, key) {\n  return obj[key] !== other[key];\n}\n\nfunction immutableMerge(isDeep, ownerID, _mergeObjs, obj) {\n  if (canMutate(obj, ownerID)) return mutableMerge(isDeep, _mergeObjs, obj);\n  var mergeObjs = forceArray(_mergeObjs);\n  var hasChanges = false;\n  var nextObject = obj;\n\n  var willChange = function willChange() {\n    if (!hasChanges) {\n      hasChanges = true;\n      nextObject = Object.assign({}, obj);\n      prepareNewObject(nextObject, ownerID);\n    }\n  };\n\n  mergeObjs.forEach(function (mergeObj) {\n    forOwn(mergeObj, function (mergeValue, key) {\n      if (isDeep && obj.hasOwnProperty(key)) {\n        var currentValue = nextObject[key];\n\n        if (_typeof(mergeValue) === 'object' && !(mergeValue instanceof Array)) {\n          if (shouldMergeKey(nextObject, mergeObj, key)) {\n            var recursiveMergeResult = immutableMerge(isDeep, ownerID, mergeValue, currentValue);\n\n            if (recursiveMergeResult !== currentValue) {\n              willChange();\n              nextObject[key] = recursiveMergeResult;\n            }\n          }\n\n          return true; // continue forOwn\n        }\n      }\n\n      if (shouldMergeKey(nextObject, mergeObj, key)) {\n        willChange();\n        nextObject[key] = mergeValue;\n      }\n\n      return undefined;\n    });\n  });\n  return nextObject;\n}\n\nvar immutableDeepMerge = immutableMerge.bind(null, true);\nvar immutableShallowMerge = immutableMerge.bind(null, false);\n\nfunction immutableArrSet(ownerID, index, value, arr) {\n  if (canMutate(arr, ownerID)) return mutableSet(index, value, arr);\n  if (arr[index] === value) return arr;\n  var newArr = fastArrayCopy(arr);\n  newArr[index] = value;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nfunction immutableSet(ownerID, key, value, obj) {\n  if (isArrayLike(obj)) return immutableArrSet(ownerID, key, value, obj);\n  if (canMutate(obj, ownerID)) return mutableSet(key, value, obj);\n  if (obj[key] === value) return obj;\n  var newObj = Object.assign({}, obj);\n  prepareNewObject(newObj, ownerID);\n  newObj[key] = value;\n  return newObj;\n}\n\nfunction immutableOmit(ownerID, _keys, obj) {\n  if (canMutate(obj, ownerID)) return mutableOmit(_keys, obj);\n  var keys = forceArray(_keys);\n  var keysInObj = keys.filter(function (key) {\n    return obj.hasOwnProperty(key);\n  }); // None of the keys were in the object, so we can return `obj`.\n\n  if (keysInObj.length === 0) return obj;\n  var newObj = Object.assign({}, obj);\n  keysInObj.forEach(function (key) {\n    delete newObj[key];\n  });\n  prepareNewObject(newObj, ownerID);\n  return newObj;\n}\n\nfunction mutableArrPush(_vals, arr) {\n  var vals = forceArray(_vals);\n  arr.push.apply(arr, _toConsumableArray(vals));\n  return arr;\n}\n\nfunction mutableArrFilter(func, arr) {\n  var currIndex = 0;\n  var originalIndex = 0;\n\n  while (currIndex < arr.length) {\n    var item = arr[currIndex];\n\n    if (!func(item, originalIndex)) {\n      arr.splice(currIndex, 1);\n    } else {\n      currIndex++;\n    }\n\n    originalIndex++;\n  }\n\n  return arr;\n}\n\nfunction mutableArrSplice(index, deleteCount, _vals, arr) {\n  var vals = forceArray(_vals);\n  arr.splice.apply(arr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return arr;\n}\n\nfunction mutableArrInsert(index, _vals, arr) {\n  return mutableArrSplice(index, 0, _vals, arr);\n}\n\nfunction immutableArrSplice(ownerID, index, deleteCount, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrSplice(index, deleteCount, _vals, arr);\n  var vals = forceArray(_vals);\n  var newArr = arr.slice();\n  prepareNewObject(newArr, ownerID);\n  newArr.splice.apply(newArr, [index, deleteCount].concat(_toConsumableArray(vals)));\n  return newArr;\n}\n\nfunction immutableArrInsert(ownerID, index, _vals, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrInsert(index, _vals, arr);\n  return immutableArrSplice(ownerID, index, 0, _vals, arr);\n}\n\nfunction immutableArrPush(ownerID, vals, arr) {\n  return immutableArrInsert(ownerID, arr.length, vals, arr);\n}\n\nfunction immutableArrFilter(ownerID, func, arr) {\n  if (canMutate(arr, ownerID)) return mutableArrFilter(func, arr);\n  var newArr = arr.filter(func);\n  if (newArr.length === arr.length) return arr;\n  prepareNewObject(newArr, ownerID);\n  return newArr;\n}\n\nvar immutableOperations = {\n  // object operations\n  merge: immutableShallowMerge,\n  deepMerge: immutableDeepMerge,\n  omit: immutableOmit,\n  setIn: immutableSetIn,\n  // array operations\n  insert: immutableArrInsert,\n  push: immutableArrPush,\n  filter: immutableArrFilter,\n  splice: immutableArrSplice,\n  // both\n  set: immutableSet\n};\nvar mutableOperations = {\n  // object operations\n  merge: mutableShallowMerge,\n  deepMerge: mutableDeepMerge,\n  omit: mutableOmit,\n  setIn: mutableSetIn,\n  // array operations\n  insert: mutableArrInsert,\n  push: mutableArrPush,\n  filter: mutableArrFilter,\n  splice: mutableArrSplice,\n  // both\n  set: mutableSet\n};\nexport function getImmutableOps() {\n  var immutableOps = Object.assign({}, immutableOperations);\n  forOwn(immutableOps, function (value, key) {\n    immutableOps[key] = curry(value.bind(null, null));\n  });\n  var mutableOps = Object.assign({}, mutableOperations);\n  forOwn(mutableOps, function (value, key) {\n    mutableOps[key] = curry(value);\n  });\n  var batchOps = Object.assign({}, immutableOperations);\n  forOwn(batchOps, function (value, key) {\n    batchOps[key] = curry(value);\n  });\n\n  function batched(_token, _fn) {\n    var token;\n    var fn;\n\n    if (typeof _token === 'function') {\n      fn = _token;\n      token = getBatchToken();\n    } else {\n      token = _token;\n      fn = _fn;\n    }\n\n    var immutableOpsBoundToToken = Object.assign({}, immutableOperations);\n    forOwn(immutableOpsBoundToToken, function (value, key) {\n      immutableOpsBoundToToken[key] = curry(value.bind(null, token));\n    });\n    return fn(immutableOpsBoundToToken);\n  }\n\n  return Object.assign(immutableOps, {\n    mutable: mutableOps,\n    batch: batchOps,\n    batched: batched,\n    __: placeholder,\n    getBatchToken: getBatchToken\n  });\n}\nexport var ops = getImmutableOps();\nexport default ops;","export const UPDATE = 'REDUX_ORM_UPDATE';\nexport const DELETE = 'REDUX_ORM_DELETE';\nexport const CREATE = 'REDUX_ORM_CREATE';\n\nexport const FILTER = 'REDUX_ORM_FILTER';\nexport const EXCLUDE = 'REDUX_ORM_EXCLUDE';\nexport const ORDER_BY = 'REDUX_ORM_ORDER_BY';\n\nexport const SUCCESS = 'SUCCESS';\nexport const FAILURE = 'FAILURE';\n","import ops from 'immutable-ops';\nimport { FILTER, EXCLUDE } from './constants';\n\n/**\n * @module utils\n */\n\nfunction warnDeprecated(msg) {\n    const logger = typeof console.warn === 'function'\n        ? console.warn.bind(console)\n        : console.log.bind(console);\n    return logger(msg);\n}\n\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the branch name for a many-to-many relation.\n * The name is the combination of the model name and the field name the relation\n * was declared. The field name's first letter is capitalized.\n *\n * Example: model `Author` has a many-to-many relation to the model `Book`, defined\n * in the `Author` field `books`. The many-to-many branch name will be `AuthorBooks`.\n *\n * @param  {string} declarationModelName - the name of the model the many-to-many relation was declared on\n * @param  {string} fieldName            - the field name where the many-to-many relation was declared on\n * @return {string} The branch name for the many-to-many relation.\n */\nfunction m2mName(declarationModelName, fieldName) {\n    return declarationModelName + capitalize(fieldName);\n}\n\n/**\n * Returns the fieldname that saves a foreign key to the\n * model id where the many-to-many relation was declared.\n *\n * Example: `Author` => `fromAuthorId`\n *\n * @private\n * @param  {string} declarationModelName - the name of the model where the relation was declared\n * @return {string} the field name in the through model for `declarationModelName`'s foreign key.\n */\nfunction m2mFromFieldName(declarationModelName) {\n    return `from${declarationModelName}Id`;\n}\n\n/**\n * Returns the fieldname that saves a foreign key in a many-to-many through model to the\n * model where the many-to-many relation was declared.\n *\n * Example: `Book` => `toBookId`\n *\n * @param  {string} otherModelName - the name of the model that was the target of the many-to-many\n *                                   declaration.\n * @return {string} the field name in the through model for `otherModelName`'s foreign key..\n */\nfunction m2mToFieldName(otherModelName) {\n    return `to${otherModelName}Id`;\n}\n\nfunction reverseFieldName(modelName) {\n    return modelName.toLowerCase() + 'Set'; // eslint-disable-line prefer-template\n}\n\nfunction querySetDelegatorFactory(methodName) {\n    return function querySetDelegator(...args) {\n        return this.getQuerySet()[methodName](...args);\n    };\n}\n\nfunction querySetGetterDelegatorFactory(getterName) {\n    return function querySetGetterDelegator() {\n        const qs = this.getQuerySet();\n        return qs[getterName];\n    };\n}\n\nfunction forEachSuperClass(subClass, func) {\n    let currClass = subClass;\n    while (currClass !== Function.prototype) {\n        func(currClass);\n        currClass = Object.getPrototypeOf(currClass);\n    }\n}\n\nfunction attachQuerySetMethods(modelClass, querySetClass) {\n    const leftToDefine = querySetClass.sharedMethods.slice();\n\n    // There is no way to get a property descriptor for the whole prototype chain;\n    // only from an objects own properties. Therefore we traverse the whole prototype\n    // chain for querySet.\n    forEachSuperClass(querySetClass, (cls) => {\n        for (let i = 0; i < leftToDefine.length; i++) {\n            let defined = false;\n            const methodName = leftToDefine[i];\n            const descriptor = Object.getOwnPropertyDescriptor(cls.prototype, methodName);\n            if (typeof descriptor !== 'undefined') {\n                if (typeof descriptor.get !== 'undefined') {\n                    descriptor.get = querySetGetterDelegatorFactory(methodName);\n                    Object.defineProperty(modelClass, methodName, descriptor);\n                    defined = true;\n                } else if (typeof descriptor.value === 'function') {\n                    modelClass[methodName] = querySetDelegatorFactory(methodName);\n                    defined = true;\n                }\n            }\n            if (defined) {\n                leftToDefine.splice(i--, 1);\n            }\n        }\n    });\n}\n\n/**\n * Normalizes `entity` to an id, where `entity` can be an id\n * or a Model instance.\n *\n * @param  {*} entity - either a Model instance or an id value\n * @return {*} the id value of `entity`\n */\nfunction normalizeEntity(entity) {\n    if (entity !== null &&\n            typeof entity !== 'undefined' &&\n            typeof entity.getId === 'function') {\n        return entity.getId();\n    }\n    return entity;\n}\n\nfunction reverseFieldErrorMessage(modelName, fieldName, toModelName, backwardsFieldName) {\n    return [\n        `Reverse field ${backwardsFieldName} already defined`,\n        ` on model ${toModelName}. To fix, set a custom related`,\n        ` name on ${modelName}.${fieldName}.`,\n    ].join('');\n}\n\nfunction objectShallowEquals(a, b) {\n    let keysInA = 0;\n\n    // eslint-disable-next-line consistent-return\n    Object.entries(Object(a)).forEach(([key, value]) => {\n        if (!b.hasOwnProperty(key) || b[key] !== value) {\n            return false;\n        }\n        keysInA++;\n    });\n\n    return keysInA === Object.keys(b).length;\n}\n\nfunction arrayDiffActions(sourceArr, targetArr) {\n    const itemsInBoth = sourceArr.filter(item => targetArr.includes(item));\n    const deleteItems = sourceArr.filter(item => !itemsInBoth.includes(item));\n    const addItems = targetArr.filter(item => !itemsInBoth.includes(item));\n\n    if (deleteItems.length || addItems.length) {\n        return {\n            delete: deleteItems,\n            add: addItems,\n        };\n    }\n    return null;\n}\n\nconst { getBatchToken } = ops;\n\nfunction clauseFiltersByAttribute({ type, payload }, attribute) {\n    if (type !== FILTER) return false;\n\n    if (typeof payload !== 'object') {\n        /**\n         * payload could also be a function in which case\n         * we would have no way of knowing what it does,\n         * so we default to false for non-objects\n         */\n        return false;\n    }\n\n    if (!payload.hasOwnProperty(attribute)) return false;\n    const attributeValue = payload[attribute];\n    if (attributeValue === null) return false;\n    if (attributeValue === undefined) return false;\n\n    return true;\n}\n\nfunction clauseReducesResultSetSize({ type }) {\n    return [FILTER, EXCLUDE].includes(type);\n}\n\nfunction mapValues(object, func) {\n    return Object.entries(object)\n        .reduce((newObject, [key, value]) => {\n            newObject[key] = func(value);\n            return newObject;\n        }, {});\n}\n\nexport {\n    attachQuerySetMethods,\n    m2mName,\n    m2mFromFieldName,\n    m2mToFieldName,\n    reverseFieldName,\n    normalizeEntity,\n    reverseFieldErrorMessage,\n    objectShallowEquals,\n    ops,\n    arrayDiffActions,\n    getBatchToken,\n    clauseFiltersByAttribute,\n    clauseReducesResultSetSize,\n    warnDeprecated,\n    mapValues,\n};\n","import {\n    normalizeEntity,\n    warnDeprecated,\n    mapValues,\n} from './utils';\n\nimport {\n    UPDATE,\n    DELETE,\n    FILTER,\n    EXCLUDE,\n    ORDER_BY,\n} from './constants';\n\n/**\n * This class is used to build and make queries to the database\n * and operating the resulting set (such as updating attributes\n * or deleting the records).\n *\n * The queries are built lazily. For example:\n *\n * ```javascript\n * const qs = Book.all()\n *     .filter(book => book.releaseYear > 1999)\n *     .orderBy('name');\n * ```\n *\n * Doesn't execute a query. The query is executed only when\n * you need information from the query result, such as {@link QuerySet#count},\n * {@link QuerySet#toRefArray}. After the query is executed, the resulting\n * set is cached in the QuerySet instance.\n *\n * QuerySet instances also return copies, so chaining filters doesn't\n * mutate the previous instances.\n */\nconst QuerySet = class QuerySet {\n    /**\n     * Creates a QuerySet. The constructor is mainly for internal use;\n     * You should access QuerySet instances from {@link Model}.\n     *\n     * @param  {Model} modelClass - the model class of objects in this QuerySet.\n     * @param  {any[]} clauses - query clauses needed to evaluate the set.\n     * @param {Object} [opts] - additional options\n     */\n    constructor(modelClass, clauses, opts) {\n        Object.assign(this, {\n            modelClass,\n            clauses: clauses || [],\n        });\n\n        this._opts = opts;\n    }\n\n    static addSharedMethod(methodName) {\n        this.sharedMethods = this.sharedMethods.concat(methodName);\n    }\n\n    _new(clauses, userOpts) {\n        const opts = Object.assign({}, this._opts, userOpts);\n        return new this.constructor(this.modelClass, clauses, opts);\n    }\n\n    toString() {\n        this._evaluate();\n        const contents = this.rows.map(({ id }) => this.modelClass.withId(id).toString()\n        ).join('\\n    - ');\n        return `QuerySet contents:\\n    - ${contents}`;\n    }\n\n    /**\n     * Returns an array of the plain objects represented by the QuerySet.\n     * The plain objects are direct references to the store.\n     *\n     * @return {Object[]} references to the plain JS objects represented by\n     *                    the QuerySet\n     */\n    toRefArray() {\n        return this._evaluate();\n    }\n\n    /**\n     * Returns an array of {@link Model} instances represented by the QuerySet.\n     * @return {Model[]} model instances represented by the QuerySet\n     */\n    toModelArray() {\n        const { modelClass: ModelClass } = this;\n        return this._evaluate().map(\n            props => new ModelClass(props)\n        );\n    }\n\n    /**\n     * Returns the number of {@link Model} instances represented by the QuerySet.\n     *\n     * @return {number} length of the QuerySet\n     */\n    count() {\n        this._evaluate();\n        return this.rows.length;\n    }\n\n    /**\n     * Checks if the {@link QuerySet} instance has any records matching the query\n     * in the database.\n     *\n     * @return {Boolean} `true` if the {@link QuerySet} instance contains entities, else `false`.\n     */\n    exists() {\n        return Boolean(this.count());\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `index` in the {@link QuerySet} instance if\n     * `withRefs` flag is set to `false`, or a reference to the plain JavaScript\n     * object in the model state if `true`.\n     *\n     * @param  {number} index - index of the model instance to get\n     * @return {Model|undefined} a {@link Model} instance at index\n     *                           `index` in the {@link QuerySet} instance,\n     *                           or undefined if the index is out of bounds.\n     */\n    at(index) {\n        const { modelClass: ModelClass } = this;\n\n        const rows = this._evaluate();\n        if (index >= 0 && index < rows.length) {\n            return new ModelClass(rows[index]);\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Returns the {@link Model} instance at index 0 in the {@link QuerySet} instance.\n     * @return {Model}\n     */\n    first() {\n        return this.at(0);\n    }\n\n    /**\n     * Returns the {@link Model} instance at index `QuerySet.count() - 1`\n     * @return {Model}\n     */\n    last() {\n        const rows = this._evaluate();\n        return this.at(rows.length - 1);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with the same entities.\n     * @return {QuerySet} a new QuerySet with the same entities.\n     */\n    all() {\n        return this._new(this.clauses);\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that match properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to match objects with. Can also be a function.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that passed the filter.\n     */\n    filter(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n\n        const filterDescriptor = {\n            type: FILTER,\n            payload: normalizedLookupObj,\n        };\n        /**\n         * create a new QuerySet\n         * including only rows matching the lookupObj\n         */\n        return this._new(\n            this.clauses.concat(filterDescriptor)\n        );\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities that do not match\n     * properties in `lookupObj`.\n     *\n     * @param  {Object} lookupObj - the properties to unmatch objects with. Can also be a function.\n     * @return {QuerySet} a new {@link QuerySet} instance with objects that did not pass the filter.\n     */\n    exclude(lookupObj) {\n        /**\n         * allow foreign keys to be specified as model instances,\n         * transform model instances to their primary keys\n         */\n        const normalizedLookupObj = typeof lookupObj === 'object'\n            ? mapValues(lookupObj, normalizeEntity)\n            : lookupObj;\n        const excludeDescriptor = {\n            type: EXCLUDE,\n            payload: normalizedLookupObj,\n        };\n\n        /**\n         * create a new QuerySet\n         * excluding all rows matching the lookupObj\n         */\n        return this._new(\n            this.clauses.concat(excludeDescriptor)\n        );\n    }\n\n    /**\n     * Performs the actual database query.\n     * @private\n     * @return {Array} rows corresponding to the QuerySet's clauses\n     */\n    _evaluate() {\n        if (typeof this.modelClass.session === 'undefined') {\n            throw new Error([\n                `Tried to query the ${this.modelClass.modelName} model's table without a session. `,\n                'Create a session using `session = orm.session()` and use ',\n                `\\`session[\"${this.modelClass.modelName}\"]\\` for querying instead.`,\n            ].join(''));\n        }\n        if (!this._evaluated) {\n            const {\n                session,\n                modelName: table,\n            } = this.modelClass;\n            const querySpec = {\n                table,\n                clauses: this.clauses,\n            };\n            this.rows = session.query(querySpec).rows;\n            this._evaluated = true;\n        }\n        return this.rows;\n    }\n\n    /**\n     * Returns a new {@link QuerySet} instance with entities ordered by `iteratees` in ascending\n     * order, unless otherwise specified. Delegates to `lodash.orderBy`.\n     *\n     * @param  {string[]|Function[]} iteratees - an array where each item can be a string or a\n     *                                           function. If a string is supplied, it should\n     *                                           correspond to property on the entity that will\n     *                                           determine the order. If a function is supplied,\n     *                                           it should return the value to order by.\n     * @param {Boolean[]} [orders] - the sort orders of `iteratees`. If unspecified, all iteratees\n     *                               will be sorted in ascending order. `true` and `'asc'`\n     *                               correspond to ascending order, and `false` and `'desc`\n     *                               to descending order.\n     * @return {QuerySet} a new {@link QuerySet} with objects ordered by `iteratees`.\n     */\n    orderBy(iteratees, orders) {\n        const orderByDescriptor = {\n            type: ORDER_BY,\n            payload: [iteratees, orders],\n        };\n\n        /**\n         * create a new QuerySet\n         * sorting all rows according to the passed arguments\n         */\n        return this._new(\n            this.clauses.concat(orderByDescriptor)\n        );\n    }\n\n    /**\n     * Records an update specified with `mergeObj` to all the objects\n     * in the {@link QuerySet} instance.\n     *\n     * @param  {Object} mergeObj - an object to merge with all the objects in this\n     *                             queryset.\n     * @return {undefined}\n     */\n    update(mergeObj) {\n        const {\n            session,\n            modelName: table,\n        } = this.modelClass;\n\n        session.applyUpdate({\n            action: UPDATE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n            payload: mergeObj,\n        });\n\n        this._evaluated = false;\n    }\n\n    /**\n     * Records a deletion of all the objects in this {@link QuerySet} instance.\n     * @return {undefined}\n     */\n    delete() {\n        const {\n            session,\n            modelName: table,\n        } = this.modelClass;\n\n        this.toModelArray().forEach(\n            model => model._onDelete() // eslint-disable-line no-underscore-dangle\n        );\n\n        session.applyUpdate({\n            action: DELETE,\n            query: {\n                table,\n                clauses: this.clauses,\n            },\n        });\n\n        this._evaluated = false;\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated\n     * Use {@link QuerySet#toModelArray} or predicate functions that\n     * instantiate Models from refs, e.g. `new Model(ref)`.\n     */\n    get withModels() {\n        throw new Error(\n            '`QuerySet.prototype.withModels` has been removed. ' +\n            'Use `.toModelArray()` or predicate functions that ' +\n            'instantiate Models from refs, e.g. `new Model(ref)`.'\n        );\n    }\n\n    /**\n     * @deprecated Query building operates on refs only now.\n     */\n    get withRefs() {\n        warnDeprecated(\n            '`QuerySet.prototype.withRefs` has been deprecated. ' +\n            'Query building operates on refs only now.'\n        );\n        return undefined;\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to map.\n     */\n    map() {\n        throw new Error(\n            '`QuerySet.prototype.map` has been removed. ' +\n            'Call `.toModelArray()` or `.toRefArray()` first to map.'\n        );\n    }\n\n    /**\n     * @deprecated\n     * Call {@link QuerySet#toModelArray} or {@link QuerySet#toRefArray} first to iterate.\n     */\n    forEach() {\n        throw new Error(\n            '`QuerySet.prototype.forEach` has been removed. ' +\n            'Call `.toModelArray()` or `.toRefArray()` first to iterate.'\n        );\n    }\n};\n\nQuerySet.sharedMethods = [\n    'count',\n    'at',\n    'all',\n    'last',\n    'first',\n    'filter',\n    'exclude',\n    'orderBy',\n    'update',\n    'delete',\n];\n\nexport default QuerySet;\n","import { getBatchToken } from 'immutable-ops';\n\nimport { SUCCESS, UPDATE, DELETE } from './constants';\nimport { warnDeprecated, clauseFiltersByAttribute } from './utils';\n\nconst Session = class Session {\n    /**\n     * Creates a new Session.\n     *\n     * @param  {Database} db - a {@link Database} instance\n     * @param  {Object} state - the database state\n     * @param  {Boolean} [withMutations] - whether the session should mutate data\n     * @param  {Object} [batchToken] - used by the backend to identify objects that can be\n     *                                 mutated.\n     */\n    constructor(schema, db, state, withMutations, batchToken) {\n        this.schema = schema;\n        this.db = db;\n        this.state = state || db.getEmptyState();\n        this.initialState = this.state;\n\n        this.withMutations = Boolean(withMutations);\n        this.batchToken = batchToken || getBatchToken();\n\n        this.modelData = {};\n\n        this.models = schema.getModelClasses();\n\n        this.sessionBoundModels = this.models.map((modelClass) => {\n            function SessionBoundModel() {\n                return Reflect.construct(modelClass, arguments, SessionBoundModel); // eslint-disable-line prefer-rest-params\n            }\n            Reflect.setPrototypeOf(SessionBoundModel.prototype, modelClass.prototype);\n            Reflect.setPrototypeOf(SessionBoundModel, modelClass);\n\n            Object.defineProperty(this, modelClass.modelName, {\n                get: () => SessionBoundModel,\n            });\n\n            SessionBoundModel.connect(this);\n            return SessionBoundModel;\n        });\n    }\n\n    getDataForModel(modelName) {\n        if (!this.modelData[modelName]) {\n            this.modelData[modelName] = {};\n        }\n        return this.modelData[modelName];\n    }\n\n    markAccessed(modelName, modelIds) {\n        const data = this.getDataForModel(modelName);\n        if (!data.accessedInstances) {\n            data.accessedInstances = {};\n        }\n        modelIds.forEach((id) => {\n            data.accessedInstances[id] = true;\n        });\n    }\n\n    get accessedModelInstances() {\n        return this.sessionBoundModels\n            .filter(({ modelName }) => this.getDataForModel(modelName).accessedInstances)\n            .reduce(\n                (result, { modelName }) => ({\n                    ...result,\n                    [modelName]: this.getDataForModel(modelName).accessedInstances,\n                }), {});\n    }\n\n    markFullTableScanned(modelName) {\n        const data = this.getDataForModel(modelName);\n        data.fullTableScanned = true;\n    }\n\n    get fullTableScannedModels() {\n        return this.sessionBoundModels\n            .filter(({ modelName }) => this.getDataForModel(modelName).fullTableScanned)\n            .map(({ modelName }) => modelName);\n    }\n\n    markAccessedIndexes(indexes) {\n        indexes.forEach(([table, attr, value]) => {\n            const data = this.getDataForModel(table);\n            if (!data.accessedIndexes) {\n                data.accessedIndexes = {};\n            }\n            data.accessedIndexes[attr] = [\n                ...(data.accessedIndexes[attr] || []),\n                value,\n            ];\n        });\n    }\n\n    get accessedIndexes() {\n        return this.sessionBoundModels\n            .filter(({ modelName }) => this.getDataForModel(modelName).accessedIndexes)\n            .reduce((result, { modelName }) => ({\n                ...result,\n                [modelName]: this.getDataForModel(modelName).accessedIndexes,\n            }), {});\n    }\n\n    /**\n     * Applies update to a model state.\n     *\n     * @private\n     * @param {Object} update - the update object. Must have keys\n     *                          `type`, `payload`.\n     */\n    applyUpdate(updateSpec) {\n        const tx = this._getTransaction(updateSpec);\n        const result = this.db.update(updateSpec, tx, this.state);\n        const { status, state, payload } = result;\n\n        if (status !== SUCCESS) {\n            throw new Error(`Applying update failed with status ${status}. Payload: ${payload}`);\n        }\n\n        this.state = state;\n\n        return payload;\n    }\n\n    query(querySpec) {\n        const result = this.db.query(querySpec, this.state);\n\n        this._markAccessedByQuery(querySpec, result);\n\n        return result;\n    }\n\n    _getTransaction(updateSpec) {\n        const { withMutations } = this;\n        const { action } = updateSpec;\n        let { batchToken } = this;\n        if ([UPDATE, DELETE].includes(action)) {\n            batchToken = getBatchToken();\n        }\n        return { batchToken, withMutations };\n    }\n\n    _markAccessedByQuery(querySpec, result) {\n        const { table, clauses } = querySpec;\n        const { rows } = result;\n\n        const { idAttribute } = this[table];\n        const accessedIds = new Set(rows.map(\n            row => row[idAttribute]\n        ));\n\n        const anyClauseFilteredByPk = clauses.some((clause) => {\n            if (!clauseFiltersByAttribute(clause, idAttribute)) {\n                return false;\n            }\n            const id = clause.payload[idAttribute];\n            if (id === null) return false;\n            /**\n             * We previously knew which row we wanted to access,\n             * so there was no need to scan the entire table.\n             */\n            accessedIds.add(id);\n            return true;\n        });\n\n        const accessedIndexes = [];\n        const { indexes } = this.state[table];\n        clauses.forEach((clause) => {\n            Object.keys(indexes).forEach((attr) => {\n                if (!clauseFiltersByAttribute(clause, attr)) return;\n                const value = clause.payload[attr];\n                accessedIndexes.push([table, attr, value]);\n            });\n        });\n\n        if (anyClauseFilteredByPk) {\n            /**\n             * The clauses have been ordered so that an indexed one was\n             * the first to have been evaluated, and thus only the row\n             * with the specified PK value has actually been accessed.\n             */\n            this.markAccessed(table, accessedIds);\n        } else if (accessedIndexes.length) {\n            /**\n             * At least one clause was optimized using indexes.\n             */\n            this.markAccessed(table, accessedIds);\n            this.markAccessedIndexes(accessedIndexes);\n        } else {\n            /**\n             * At least one clause could not be efficiently optimized\n             * or no clause was specified at all.\n             */\n            this.markFullTableScanned(table);\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Access {@link Session#state} instead.\n     */\n    getNextState() {\n        warnDeprecated(\n            '`Session.prototype.getNextState` has been deprecated. Access ' +\n            'the `Session.prototype.state` property instead.'\n        );\n        return this.state;\n    }\n\n    /**\n     * @deprecated\n     * The Redux integration API is now decoupled from ORM and Session.<br>\n     * See the 0.9 migration guide in the GitHub repo.\n     */\n    reduce() {\n        throw new Error(\n            '`Session.prototype.reduce` has been removed. The Redux integration API ' +\n            'is now decoupled from ORM and Session - see the 0.9 migration guide ' +\n            'in the GitHub repo.'\n        );\n    }\n};\n\nexport default Session;\n","import {\n    normalizeEntity,\n} from './utils';\n\n/**\n * The functions in this file return custom JS property descriptors\n * that are supposed to be assigned to Model fields.\n *\n * Some include the logic to look up models using foreign keys and\n * to add or remove relationships between models.\n *\n * @module descriptors\n */\n\n/**\n * Defines a basic non-key attribute.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n */\nfunction attrDescriptor(fieldName) {\n    return {\n        get() {\n            return this._fields[fieldName];\n        },\n\n        set(value) {\n            return this.set(fieldName, value);\n        },\n\n        enumerable: true,\n        configurable: true,\n    };\n}\n\n/**\n * Forwards direction of a Foreign Key: returns one object.\n * Also works as {@link .forwardsOneToOneDescriptor|forwardsOneToOneDescriptor}.\n *\n * For `book.author` referencing an `Author` model instance,\n * `fieldName` would be `'author'` and `declaredToModelName` would be `'Author'`.\n * @param  {string} fieldName - the name of the field the descriptor will be assigned to.\n * @param  {string} declaredToModelName - the name of the model that the field references.\n */\nfunction forwardsManyToOneDescriptor(fieldName, declaredToModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredToModelName]: DeclaredToModel,\n                },\n            } = this.getClass();\n            const {\n                [fieldName]: toId,\n            } = this._fields;\n\n            return DeclaredToModel.withId(toId);\n        },\n        set(value) {\n            this.update({\n                [fieldName]: normalizeEntity(value),\n            });\n        },\n    };\n}\n\n/**\n * Dereferencing foreign keys in {@link module:fields.oneToOne|oneToOne}\n * relationships works the same way as in many-to-one relationships:\n * just look up the related model.\n *\n * For example, a human face tends to have a single nose.\n * So if we want to resolve `face.nose`, we need to\n * look up the `Nose` that has the primary key that `face` references.\n *\n * @see {@link module:descriptors~forwardsManyToOneDescriptor|forwardsManyToOneDescriptor}\n */\nfunction forwardsOneToOneDescriptor(...args) {\n    return forwardsManyToOneDescriptor(...args);\n}\n\n/**\n * Here we resolve 1-to-1 relationships starting at the model on which the\n * field was not installed. This means we need to find the instance of the\n * other model whose {@link module:fields.oneToOne|oneToOne} FK field contains the current model's primary key.\n *\n * @param  {string} declaredFieldName - the name of the field referencing the current model.\n * @param  {string} declaredFromModelName - the name of the other model.\n */\nfunction backwardsOneToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                },\n            } = this.getClass();\n\n            return DeclaredFromModel.get({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse one-to-one relation.');\n        },\n    };\n}\n\n/**\n * The backwards direction of a n-to-1 relationship (i.e. 1-to-n),\n * meaning this will return an a collection (`QuerySet`) of model instances.\n *\n * An example would be `author.books` referencing all instances of\n * the `Book` model that reference the author using `fk()`.\n */\nfunction backwardsManyToOneDescriptor(declaredFieldName, declaredFromModelName) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                },\n            } = this.getClass();\n\n            return DeclaredFromModel.filter({\n                [declaredFieldName]: this.getId(),\n            });\n        },\n        set() {\n            throw new Error('Can\\'t mutate a reverse many-to-one relation.');\n        },\n    };\n}\n\n/**\n * This descriptor is assigned to both sides of a many-to-many relationship.\n * To indicate the backwards direction pass `true` for `reverse`.\n */\nfunction manyToManyDescriptor(\n    declaredFromModelName,\n    declaredToModelName,\n    throughModelName,\n    throughFields,\n    reverse\n) {\n    return {\n        get() {\n            const {\n                session: {\n                    [declaredFromModelName]: DeclaredFromModel,\n                    [declaredToModelName]: DeclaredToModel,\n                    [throughModelName]: ThroughModel,\n                },\n            } = this.getClass();\n\n            const ThisModel = reverse\n                ? DeclaredToModel\n                : DeclaredFromModel;\n            const OtherModel = reverse\n                ? DeclaredFromModel\n                : DeclaredToModel;\n\n            const thisReferencingField = reverse\n                ? throughFields.to\n                : throughFields.from;\n            const otherReferencingField = reverse\n                ? throughFields.from\n                : throughFields.to;\n\n            const thisId = this.getId();\n\n            const throughQs = ThroughModel.filter({\n                [thisReferencingField]: thisId,\n            });\n\n            /**\n             * all IDs of instances of the other model that are\n             * referenced by any instance of the current model\n             */\n            const referencedOtherIds = new Set(\n                throughQs\n                    .toRefArray()\n                    .map(obj => obj[otherReferencingField])\n            );\n\n            /**\n             * selects all instances of other model that are referenced\n             * by any instance of the current model\n             */\n            const qs = OtherModel.filter(otherModelInstance => (\n                referencedOtherIds.has(\n                    otherModelInstance[OtherModel.idAttribute]\n                )\n            ));\n\n            /**\n             * Allows adding OtherModel instances to be referenced by the current instance.\n             *\n             * E.g. Book.first().authors.add(1, 2) would add the authors with IDs 1 and 2\n             * to the first book's list of referenced authors.\n             *\n             * @return undefined\n             */\n            qs.add = function add(...entities) {\n                const idsToAdd = new Set(\n                    entities.map(normalizeEntity)\n                );\n\n                const existingQs = throughQs.filter(through => (\n                    idsToAdd.has(through[otherReferencingField])\n                ));\n\n                if (existingQs.exists()) {\n                    const existingIds = existingQs\n                        .toRefArray()\n                        .map(through => through[otherReferencingField]);\n\n                    throw new Error(`Tried to add already existing ${OtherModel.modelName} id(s) ${existingIds} to the ${ThisModel.modelName} instance with id ${thisId}`);\n                }\n\n                idsToAdd.forEach((id) => {\n                    ThroughModel.create({\n                        [otherReferencingField]: id,\n                        [thisReferencingField]: thisId,\n                    });\n                });\n            };\n\n            /**\n             * Removes references to all OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.clear() would cause the first book's list\n             * of referenced authors to become empty.\n             *\n             * @return undefined\n             */\n            qs.clear = function clear() {\n                throughQs.delete();\n            };\n\n            /**\n             * Removes references to all passed OtherModel instances from the current model.\n             *\n             * E.g. Book.first().authors.remove(1, 2) would cause the authors with\n             * IDs 1 and 2 to no longer be referenced by the first book.\n             *\n             * @return undefined\n             */\n            qs.remove = function remove(...entities) {\n                const idsToRemove = new Set(\n                    entities.map(normalizeEntity)\n                );\n\n                const entitiesToDelete = throughQs.filter(\n                    through => idsToRemove.has(through[otherReferencingField])\n                );\n\n                if (entitiesToDelete.count() !== idsToRemove.size) {\n                    // Tried deleting non-existing entities.\n                    const entitiesToDeleteIds = entitiesToDelete\n                        .toRefArray()\n                        .map(through => through[otherReferencingField]);\n\n                    const unexistingIds = [...idsToRemove].filter(\n                        id => !entitiesToDeleteIds.includes(id)\n                    );\n\n                    throw new Error(`Tried to delete non-existing ${OtherModel.modelName} id(s) ${unexistingIds} from the ${ThisModel.modelName} instance with id ${thisId}`);\n                }\n\n                entitiesToDelete.delete();\n            };\n\n            return qs;\n        },\n\n        set() {\n            throw new Error('Tried setting a M2M field. Please use the related QuerySet methods add, remove and clear.');\n        },\n    };\n}\n\nexport {\n    attrDescriptor,\n    forwardsManyToOneDescriptor,\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n    backwardsManyToOneDescriptor,\n    manyToManyDescriptor,\n};\n","import {\n    attrDescriptor,\n    forwardsManyToOneDescriptor,\n    backwardsManyToOneDescriptor,\n    forwardsOneToOneDescriptor,\n    backwardsOneToOneDescriptor,\n    manyToManyDescriptor,\n} from './descriptors';\n\nimport {\n    m2mName,\n    m2mToFieldName,\n    m2mFromFieldName,\n    reverseFieldName,\n    reverseFieldErrorMessage,\n} from './utils';\n\n/**\n * Contains the logic for how fields on {@link Model}s work\n * and which descriptors must be installed.\n *\n * If your goal is to define fields on a Model class,\n * please use the more convenient methods {@link attr},\n * {@link fk}, {@link many} and {@link oneToOne}.\n *\n * @module fields\n */\n\n/**\n * Defines algorithm for installing a field onto a model and related models.\n * Conforms to the template method behavioral design pattern.\n * @private\n */\nclass FieldInstallerTemplate {\n    constructor(opts) {\n        this.field = opts.field;\n        this.fieldName = opts.fieldName;\n        this.model = opts.model;\n        this.orm = opts.orm;\n        /**\n         * the field itself has no knowledge of the model\n         * it is being installed upon; we need to inform it\n         * that it is a self-referencing field for the field\n         * to be able to make better informed decisions\n         */\n        if (this.field.references(this.model)) {\n            this.field.toModelName = 'this';\n        }\n    }\n\n    get toModel() {\n        if (typeof this._toModel === 'undefined') {\n            const { toModelName } = this.field;\n            if (!toModelName) {\n                this._toModel = null;\n            } else if (toModelName === 'this') {\n                this._toModel = this.model;\n            } else {\n                this._toModel = this.orm.get(toModelName);\n            }\n        }\n        return this._toModel;\n    }\n\n    get throughModel() {\n        if (typeof this._throughModel === 'undefined') {\n            const throughModelName = this.field.getThroughModelName(\n                this.fieldName,\n                this.model\n            );\n            if (!throughModelName) {\n                this._throughModel = null;\n            } else {\n                this._throughModel = this.orm.get(throughModelName);\n            }\n        }\n        return this._throughModel;\n    }\n\n    get backwardsFieldName() {\n        return this.field.getBackwardsFieldName(this.model);\n    }\n\n    run() {\n        if (this.field.installsForwardsDescriptor) {\n            this.installForwardsDescriptor();\n        }\n        if (this.field.installsForwardsVirtualField) {\n            this.installForwardsVirtualField();\n        }\n        /**\n         * Install a backwards field on a model as a consequence\n         * of having installed the forwards field on another model.\n         */\n        if (this.field.installsBackwardsDescriptor) {\n            this.installBackwardsDescriptor();\n        }\n        if (this.field.installsBackwardsVirtualField) {\n            this.installBackwardsVirtualField();\n        }\n    }\n}\n\n/**\n * Default implementation for the template method in FieldInstallerTemplate.\n * @private\n */\nclass DefaultFieldInstaller extends FieldInstallerTemplate {\n    installForwardsDescriptor() {\n        Object.defineProperty(\n            this.model.prototype,\n            this.fieldName,\n            this.field.createForwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installForwardsVirtualField() {\n        this.model.virtualFields[this.fieldName] = this.field.createForwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n\n    installBackwardsDescriptor() {\n        const backwardsDescriptor = Object.getOwnPropertyDescriptor(\n            this.toModel.prototype,\n            this.backwardsFieldName\n        );\n        if (backwardsDescriptor) {\n            throw new Error(reverseFieldErrorMessage(\n                this.model.modelName,\n                this.fieldName,\n                this.toModel.modelName,\n                this.backwardsFieldName\n            ));\n        }\n\n        // install backwards descriptor\n        Object.defineProperty(\n            this.toModel.prototype,\n            this.backwardsFieldName,\n            this.field.createBackwardsDescriptor(\n                this.fieldName,\n                this.model,\n                this.toModel,\n                this.throughModel\n            )\n        );\n    }\n\n    installBackwardsVirtualField() {\n        this.toModel.virtualFields[this.backwardsFieldName] = this.field.createBackwardsVirtualField(\n            this.fieldName,\n            this.model,\n            this.toModel,\n            this.throughModel\n        );\n    }\n}\n\n/**\n * @ignore\n */\nclass Field {\n    constructor() {\n        this.index = false;\n    }\n\n    get installerClass() {\n        return DefaultFieldInstaller;\n    }\n\n    getClass() {\n        return this.constructor;\n    }\n\n    references(model) {\n        return false;\n    }\n\n    getThroughModelName(fieldName, model) {\n        return null;\n    }\n\n    get installsForwardsDescriptor() {\n        return true;\n    }\n\n    get installsForwardsVirtualField() {\n        return false;\n    }\n\n    get installsBackwardsDescriptor() {\n        return false;\n    }\n\n    get installsBackwardsVirtualField() {\n        return false;\n    }\n}\n\n/**\n * @ignore\n */\nexport class Attribute extends Field {\n    constructor(opts) {\n        super();\n        this.opts = opts || {};\n\n        if (this.opts.hasOwnProperty('getDefault')) {\n            this.getDefault = this.opts.getDefault;\n        }\n    }\n\n    createForwardsDescriptor(fieldName, model) {\n        return attrDescriptor(fieldName);\n    }\n}\n\n/**\n * @ignore\n */\nclass RelationalField extends Field {\n    constructor(...args) {\n        super();\n        if (args.length === 1 && typeof args[0] === 'object') {\n            const opts = args[0];\n            this.toModelName = opts.to;\n            this.relatedName = opts.relatedName;\n            this.through = opts.through;\n            this.throughFields = opts.throughFields;\n            this.as = opts.as;\n        } else {\n            [this.toModelName, this.relatedName] = args;\n        }\n    }\n\n    getBackwardsFieldName(model) {\n        return (\n            this.relatedName ||\n            reverseFieldName(model.modelName)\n        );\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField(model.modelName, fieldName);\n    }\n\n    get installsBackwardsVirtualField() {\n        return true;\n    }\n\n    get installsBackwardsDescriptor() {\n        return true;\n    }\n\n    references(model) {\n        return this.toModelName === model.modelName;\n    }\n\n    get installerClass() {\n        return class AliasedForwardsDescriptorInstaller extends DefaultFieldInstaller {\n            installForwardsDescriptor() {\n                Object.defineProperty(\n                    this.model.prototype,\n                    this.field.as || this.fieldName, // use supplied name if possible\n                    this.field.createForwardsDescriptor(\n                        this.fieldName,\n                        this.model,\n                        this.toModel,\n                        this.throughModel\n                    )\n                );\n            }\n        };\n    }\n}\n\n/**\n * @ignore\n */\nexport class ForeignKey extends RelationalField {\n    constructor(...args) {\n        super(...args);\n        this.index = true;\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsManyToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsManyToOneDescriptor(fieldName, model.modelName);\n    }\n}\n\n/**\n * @ignore\n */\nexport class ManyToMany extends RelationalField {\n    getDefault() {\n        return [];\n    }\n\n    getThroughModelName(fieldName, model) {\n        return (\n            this.through ||\n            m2mName(model.modelName, fieldName)\n        );\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            false\n        );\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return manyToManyDescriptor(\n            model.modelName,\n            toModel.modelName,\n            throughModel.modelName,\n            this.getThroughFields(fieldName, model, toModel, throughModel),\n            true\n        );\n    }\n\n    createBackwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: model.modelName,\n            relatedName: fieldName,\n            through: throughModel.modelName,\n            throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n        });\n    }\n\n    createForwardsVirtualField(fieldName, model, toModel, throughModel) {\n        const ThisField = this.getClass();\n        return new ThisField({\n            to: toModel.modelName,\n            relatedName: fieldName,\n            through: this.through,\n            throughFields: this.getThroughFields(fieldName, model, toModel, throughModel),\n        });\n    }\n\n    get installsForwardsVirtualField() {\n        return true;\n    }\n\n    getThroughFields(fieldName, model, toModel, throughModel) {\n        if (this.throughFields) {\n            const [fieldAName, fieldBName] = this.throughFields;\n            const fieldA = throughModel.fields[fieldAName];\n            return {\n                to: fieldA.references(toModel) ? fieldAName : fieldBName,\n                from: fieldA.references(toModel) ? fieldBName : fieldAName,\n            };\n        }\n\n        if (model.modelName === toModel.modelName) {\n            /**\n             * we have no way of determining the relationship's\n             * direction here, so we need to assume that the user\n             * did not use a custom through model\n             * see ORM#registerManyToManyModelsFor\n             */\n            return {\n                to: m2mToFieldName(toModel.modelName),\n                from: m2mFromFieldName(model.modelName),\n            };\n        }\n\n        /**\n         * determine which field references which model\n         * and infer the directions from that\n         */\n        const throughModelFieldReferencing = otherModel => (\n            Object.keys(throughModel.fields).find(someFieldName => (\n                throughModel.fields[someFieldName].references(otherModel)\n            ))\n        );\n\n        return {\n            to: throughModelFieldReferencing(toModel),\n            from: throughModelFieldReferencing(model),\n        };\n    }\n}\n\n/**\n * @ignore\n */\nexport class OneToOne extends RelationalField {\n    getBackwardsFieldName(model) {\n        return (\n            this.relatedName ||\n            model.modelName.toLowerCase()\n        );\n    }\n\n    createForwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return forwardsOneToOneDescriptor(fieldName, toModel.modelName);\n    }\n\n    createBackwardsDescriptor(fieldName, model, toModel, throughModel) {\n        return backwardsOneToOneDescriptor(fieldName, model.modelName);\n    }\n}\n\n/**\n * Defines a value attribute on the model.\n * Though not required, it is recommended to define this for each non-foreign key you wish to use.\n * Getters and setters need to be defined on each Model\n * instantiation for undeclared data fields, which is slower.\n * You can use the optional `getDefault` parameter to fill in unpassed values\n * to {@link Model.create}, such as for generating ID's with UUID:\n *\n * ```javascript\n * import getUUID from 'your-uuid-package-of-choice';\n *\n * fields = {\n *   id: attr({ getDefault: () => getUUID() }),\n *   title: attr(),\n * }\n * ```\n *\n * @global\n *\n * @param  {Object} [opts]\n * @param {Function} [opts.getDefault] - if you give a function here, it's return\n *                                       value from calling with zero arguments will\n *                                       be used as the value when creating a new Model\n *                                       instance with {@link Model#create} if the field\n *                                       value is not passed.\n * @return {Attribute}\n */\nexport function attr(opts) {\n    return new Attribute(opts);\n}\n\n/**\n * Defines a foreign key on a model, which points\n * to a single entity on another model.\n *\n * You can pass arguments as either a single object,\n * or two arguments.\n *\n * If you pass two arguments, the first one is the name\n * of the Model the foreign key is pointing to, and\n * the second one is an optional related name, which will\n * be used to access the Model the foreign key\n * is being defined from, from the target Model.\n *\n * If the related name is not passed, it will be set as\n * `${toModelName}Set`.\n *\n * If you pass an object to `fk`, it has to be in the form\n *\n * ```javascript\n * fields = {\n *   author: fk({ to: 'Author', relatedName: 'books' })\n * }\n * ```\n *\n * Which is equal to\n *\n * ```javascript\n * fields = {\n *   author: fk('Author', 'books'),\n * }\n * ```\n *\n * @global\n *\n * @param  {string|Object} toModelNameOrObj - the `modelName` property of\n *                                            the Model that is the target of the\n *                                            foreign key, or an object with properties\n *                                            `to` and optionally `relatedName`.\n * @param {string} [relatedName] - if you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a QuerySet the foreign key is defined from,\n *                                 from the target model.\n * @return {ForeignKey}\n */\nexport function fk(...args) {\n    return new ForeignKey(...args);\n}\n\n/**\n * Defines a many-to-many relationship between\n * this (source) and another (target) model.\n *\n * The relationship is modeled with an extra model called the through model.\n * The through model has foreign keys to both the source and target models.\n *\n * You can define your own through model if you want to associate more information\n * to the relationship. A custom through model must have at least two foreign keys,\n * one pointing to the source Model, and one pointing to the target Model.\n *\n * If you have more than one foreign key pointing to a source or target Model in the\n * through Model, you must pass the option `throughFields`, which is an array of two\n * strings, where the strings are the field names that identify the foreign keys to\n * be used for the many-to-many relationship. Redux-ORM will figure out which field name\n * points to which model by checking the through Model definition.\n *\n * Unlike `fk`, this function accepts only an object argument.\n *\n * ```javascript\n * class Authorship extends Model {}\n * Authorship.modelName = 'Authorship';\n * Authorship.fields = {\n *   author: fk('Author', 'authorships'),\n *   book: fk('Book', 'authorships'),\n * };\n *\n * class Author extends Model {}\n * Author.modelName = 'Author';\n * Author.fields = {\n *   books: many({\n *     to: 'Book',\n *     relatedName: 'authors',\n *     through: 'Authorship',\n *\n *     // this is optional, since Redux-ORM can figure\n *     // out the through fields itself as there aren't\n *     // multiple foreign keys pointing to the same models.\n *     throughFields: ['author', 'book'],\n *   })\n * };\n *\n * class Book extends Model {}\n * Book.modelName = 'Book';\n * ```\n *\n * You should only define the many-to-many relationship on one side. In the\n * above case of Authors to Books through Authorships, the relationship is\n * defined only on the Author model.\n *\n * @global\n *\n * @param  {Object} options - options\n * @param  {string} options.to - the `modelName` attribute of the target Model.\n * @param  {string} [options.through] - the `modelName` attribute of the through Model which\n *                                    must declare at least one foreign key to both source and\n *                                    target Models. If not supplied, Redux-Orm will autogenerate\n *                                    one.\n * @param  {string[]} [options.throughFields] - this must be supplied only when a custom through\n *                                            Model has more than one foreign key pointing to\n *                                            either the source or target mode. In this case\n *                                            Redux-ORM can't figure out the correct fields for\n *                                            you, you must provide them. The supplied array should\n *                                            have two elements that are the field names for the\n *                                            through fields you want to declare the many-to-many\n *                                            relationship with. The order doesn't matter;\n *                                            Redux-ORM will figure out which field points to\n *                                            the source Model and which to the target Model.\n * @param  {string} [options.relatedName] - the attribute used to access a QuerySet\n *                                          of source Models from target Model.\n * @return {ManyToMany}\n */\nexport function many(...args) {\n    return new ManyToMany(...args);\n}\n\n/**\n * Defines a one-to-one relationship. In database terms, this is a foreign key with the\n * added restriction that only one entity can point to single target entity.\n *\n * The arguments are the same as with `fk`. If `relatedName` is not supplied,\n * the source model name in lowercase will be used. Note that with the one-to-one\n * relationship, the `relatedName` should be in singular, not plural.\n *\n * @global\n *\n * @param  {string|Object} toModelNameOrObj - the `modelName` property of\n *                                            the Model that is the target of the\n *                                            foreign key, or an object with properties\n *                                            `to` and optionally `relatedName`.\n * @param {string} [relatedName] - if you didn't pass an object as the first argument,\n *                                 this is the property name that will be used to\n *                                 access a Model the foreign key is defined from,\n *                                 from the target Model.\n * @return {OneToOne}\n */\nexport function oneToOne(...args) {\n    return new OneToOne(...args);\n}\n","import Session from './Session';\nimport QuerySet from './QuerySet';\nimport {\n    ManyToMany,\n    ForeignKey,\n    OneToOne,\n    attr,\n} from './fields';\nimport {\n    CREATE, UPDATE, DELETE, FILTER,\n} from './constants';\nimport {\n    normalizeEntity,\n    arrayDiffActions,\n    objectShallowEquals,\n    warnDeprecated,\n    m2mName,\n} from './utils';\n\n\n/**\n * Generates a query specification to get the instance's\n * corresponding table row using its primary key.\n *\n * @private\n * @returns {Object}\n */\nfunction getByIdQuery(modelInstance) {\n    const modelClass = modelInstance.getClass();\n    const { idAttribute, modelName } = modelClass;\n\n    return {\n        table: modelName,\n        clauses: [\n            {\n                type: FILTER,\n                payload: {\n                    [idAttribute]: modelInstance.getId(),\n                },\n            },\n        ],\n    };\n}\n\n\n/**\n * The heart of an ORM, the data model.\n *\n * The fields you specify to the Model will be used to generate\n * a schema to the database, related property accessors, and\n * possibly through models.\n *\n * In each {@link Session} you instantiate from an {@link ORM} instance,\n * you will receive a session-specific subclass of this Model. The methods\n * you define here will be available to you in sessions.\n *\n * An instance of {@link Model} represents a record in the database, though\n * it is possible to generate multiple instances from the same record in the database.\n *\n * To create data models in your schema, subclass {@link Model}. To define\n * information about the data model, override static class methods. Define instance\n * logic by defining prototype methods (without `static` keyword).\n */\nconst Model = class Model {\n    /**\n     * Creates a Model instance from it's properties.\n     * Don't use this to create a new record; Use the static method {@link Model#create}.\n     * @param  {Object} props - the properties to instantiate with\n     */\n    constructor(props) {\n        this._initFields(props);\n    }\n\n    _initFields(props) {\n        const propsObj = Object(props);\n        this._fields = { ...propsObj };\n\n        Object.keys(propsObj).forEach((fieldName) => {\n            // In this case, we got a prop that wasn't defined as a field.\n            // Assuming it's an arbitrary data field, making an instance-specific\n            // descriptor for it.\n            // Using the in operator as the property could be defined anywhere\n            // on the prototype chain.\n            if (!(fieldName in this)) {\n                Object.defineProperty(this, fieldName, {\n                    get: () => this._fields[fieldName],\n                    set: value => this.set(fieldName, value),\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n\n    static toString() {\n        return `ModelClass: ${this.modelName}`;\n    }\n\n    /**\n     * Returns the options object passed to the database for the table that represents\n     * this Model class.\n     *\n     * Returns an empty object by default, which means the database\n     * will use default options. You can either override this function to return the options\n     * you want to use, or assign the options object as a static property of the same name to the\n     * Model class.\n     *\n     * @return {Object} the options object passed to the database for the table\n     *                  representing this Model class.\n     */\n    static options() {\n        return {};\n    }\n\n    /**\n     * Manually mark individual instances as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<*>} ids - Array of primary key values\n     * @return {undefined}\n     */\n    static markAccessed(ids) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark rows of the ${this.modelName} model as accessed without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markAccessed\\` instead.`,\n            ].join(''));\n        }\n        this.session.markAccessed(this.modelName, ids);\n    }\n\n    /**\n     * Manually mark this model's table as scanned.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @return {undefined}\n     */\n    static markFullTableScanned() {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark the ${this.modelName} model as full table scanned without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markFullTableScanned\\` instead.`,\n            ].join(''));\n        }\n        this.session.markFullTableScanned(this.modelName);\n    }\n\n    /**\n     * Manually mark indexes as accessed.\n     * This allows invalidating selector memoization within mutable sessions.\n     *\n     * @param {Array.<Array.<*,*>>} indexes - Array of column-value pairs\n     * @return {undefined}\n     */\n    static markAccessedIndexes(indexes) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to mark indexes for the ${this.modelName} model as accessed without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].markAccessedIndexes\\` instead.`,\n            ].join(''));\n        }\n        this.session.markAccessedIndexes(\n            indexes.map(\n                ([attribute, value]) => [this.modelName, attribute, value]\n            )\n        );\n    }\n\n    /**\n     * Returns the id attribute of this {@link Model}.\n     *\n     * @return {string} The id attribute of this {@link Model}.\n     */\n    static get idAttribute() {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to get the ${this.modelName} model's id attribute without a session. `,\n                'Create a session using `session = orm.session()` and access ',\n                `\\`session[\"${this.modelName}\"].idAttribute\\` instead.`,\n            ].join(''));\n        }\n        return this.session.db.describe(this.modelName).idAttribute;\n    }\n\n    /**\n     * Connect the model class to a {@link Session}.\n     *\n     * @private\n     * @param  {Session} session - The session to connect to.\n     */\n    static connect(session) {\n        if (!(session instanceof Session)) {\n            throw new Error('A model can only be connected to instances of Session.');\n        }\n        this._session = session;\n    }\n\n    /**\n     * Get the current {@link Session} instance.\n     *\n     * @private\n     * @return {Session} The current {@link Session} instance.\n     */\n    static get session() {\n        return this._session;\n    }\n\n    /**\n     * Returns an instance of the model's `querySetClass` field.\n     * By default, this will be an empty {@link QuerySet}.\n     *\n     * @return {Object} An instance of the model's `querySetClass`.\n     */\n    static getQuerySet() {\n        const { querySetClass: QuerySetClass } = this;\n        return new QuerySetClass(this);\n    }\n\n    /**\n     * @return {undefined}\n     */\n    static invalidateClassCache() {\n        this.isSetUp = undefined;\n        this.virtualFields = {};\n    }\n\n    /**\n     * @see {@link Model.getQuerySet}\n     */\n    static get query() {\n        return this.getQuerySet();\n    }\n\n    /**\n     * @private\n     */\n    static _getTableOpts() {\n        if (typeof this.backend === 'function') {\n            warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n            return this.backend();\n        }\n        if (this.backend) {\n            warnDeprecated('`Model.backend` has been deprecated. Please rename to `.options`.');\n            return this.backend;\n        }\n        if (typeof this.options === 'function') {\n            return this.options();\n        }\n        return this.options;\n    }\n\n    /**\n     * Creates a new record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {props} userProps - the new {@link Model}'s properties.\n     * @return {Model} a new {@link Model} instance.\n     */\n    static create(userProps) {\n        if (typeof this._session === 'undefined') {\n            throw new Error([\n                `Tried to create a ${this.modelName} model instance without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].create\\` instead.`,\n            ].join(''));\n        }\n        const props = { ...userProps };\n\n        const m2mRelations = {};\n\n        const declaredFieldNames = Object.keys(this.fields);\n        const declaredVirtualFieldNames = Object.keys(this.virtualFields);\n\n        declaredFieldNames.forEach((key) => {\n            const field = this.fields[key];\n            const valuePassed = userProps.hasOwnProperty(key);\n            if (!(field instanceof ManyToMany)) {\n                if (valuePassed) {\n                    const value = userProps[key];\n                    props[key] = normalizeEntity(value);\n                } else if (field.getDefault) {\n                    props[key] = field.getDefault();\n                }\n            } else if (valuePassed) {\n                // If a value is supplied for a ManyToMany field,\n                // discard them from props and save for later processing.\n                m2mRelations[key] = userProps[key];\n                delete props[key];\n            }\n        });\n\n        // add backward many-many if required\n        declaredVirtualFieldNames.forEach((key) => {\n            if (!m2mRelations.hasOwnProperty(key)) {\n                const field = this.virtualFields[key];\n                if (userProps.hasOwnProperty(key) && field instanceof ManyToMany) {\n                    // If a value is supplied for a ManyToMany field,\n                    // discard them from props and save for later processing.\n                    m2mRelations[key] = userProps[key];\n                    delete props[key];\n                }\n            }\n        });\n\n        const newEntry = this.session.applyUpdate({\n            action: CREATE,\n            table: this.modelName,\n            payload: props,\n        });\n\n        const ThisModel = this;\n        const instance = new ThisModel(newEntry);\n        instance._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n        return instance;\n    }\n\n    /**\n     * Creates a new or update existing record in the database, instantiates a {@link Model} and returns it.\n     *\n     * If you pass values for many-to-many fields, instances are created on the through\n     * model as well.\n     *\n     * @param  {props} userProps - the required {@link Model}'s properties.\n     * @return {Model} a {@link Model} instance.\n     */\n    static upsert(userProps) {\n        if (typeof this.session === 'undefined') {\n            throw new Error([\n                `Tried to upsert a ${this.modelName} model instance without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].upsert\\` instead.`,\n            ].join(''));\n        }\n\n        const { idAttribute } = this;\n        if (userProps.hasOwnProperty(idAttribute)) {\n            const id = userProps[idAttribute];\n            if (this.idExists(id)) {\n                const model = this.withId(id);\n                model.update(userProps);\n                return model;\n            }\n        }\n\n        return this.create(userProps);\n    }\n\n    /**\n     * Returns a {@link Model} instance for the object with id `id`.\n     * Returns `null` if the model has no instance with id `id`.\n     *\n     * You can use {@link Model#idExists} to check for existence instead.\n     *\n     * @param  {*} id - the `id` of the object to get\n     * @throws If object with id `id` doesn't exist\n     * @return {Model|null} {@link Model} instance with id `id`\n     */\n    static withId(id) {\n        return this.get({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     *\n     * @since 0.11.0\n     */\n    static idExists(id) {\n        return this.exists({\n            [this.idAttribute]: id,\n        });\n    }\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the given props exists in the state.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     */\n    static exists(lookupObj) {\n        if (typeof this.session === 'undefined') {\n            throw new Error([\n                `Tried to check if a ${this.modelName} model instance exists without a session. `,\n                'Create a session using `session = orm.session()` and call ',\n                `\\`session[\"${this.modelName}\"].exists\\` instead.`,\n            ].join(''));\n        }\n\n        return Boolean(\n            this._findDatabaseRows(lookupObj).length\n        );\n    }\n\n    /**\n     * Gets the {@link Model} instance that matches properties in `lookupObj`.\n     * Throws an error if {@link Model} if multiple records match\n     * the properties.\n     *\n     * @param  {Object} lookupObj - the properties used to match a single entity.\n     * @throws {Error} If more than one entity matches the properties in `lookupObj`.\n     * @return {Model} a {@link Model} instance that matches the properties in `lookupObj`.\n     */\n    static get(lookupObj) {\n        const ThisModel = this;\n\n        const rows = this._findDatabaseRows(lookupObj);\n        if (rows.length === 0) {\n            return null;\n        }\n        if (rows.length > 1) {\n            throw new Error(`Expected to find a single row in \\`${this.modelName}.get\\`. Found ${rows.length}.`);\n        }\n\n        return new ThisModel(rows[0]);\n    }\n\n    /**\n     * Gets the {@link Model} class or subclass constructor (the class that\n     * instantiated this instance).\n     *\n     * @return {Model} The {@link Model} class or subclass constructor used to instantiate\n     *                 this instance.\n     */\n    getClass() {\n        return this.constructor;\n    }\n\n    /**\n     * Gets the id value of the current instance by looking up the id attribute.\n     * @return {*} The id value of the current instance.\n     */\n    getId() {\n        return this._fields[this.getClass().idAttribute];\n    }\n\n    /**\n     * Returns a reference to the plain JS object in the store.\n     * Make sure to not mutate this.\n     *\n     * @return {Object} a reference to the plain JS object in the store\n     */\n    get ref() {\n        const ThisModel = this.getClass();\n\n        // eslint-disable-next-line no-underscore-dangle\n        return ThisModel._findDatabaseRows({\n            [ThisModel.idAttribute]: this.getId(),\n        })[0];\n    }\n\n    /**\n     * Finds all rows in this model's table that match the given `lookupObj`.\n     * If no `lookupObj` is passed, all rows in the model's table will be returned.\n     *\n     * @param  {*}  props - a key-value that {@link Model} instances should have to be considered as existing.\n     * @return {Boolean} a boolean indicating if entity with `props` exists in the state\n     * @private\n     */\n    static _findDatabaseRows(lookupObj) {\n        const querySpec = {\n            table: this.modelName,\n        };\n        if (lookupObj) {\n            querySpec.clauses = [\n                {\n                    type: FILTER,\n                    payload: lookupObj,\n                },\n            ];\n        }\n        return this.session.query(querySpec).rows;\n    }\n\n    /**\n     * Returns a string representation of the {@link Model} instance.\n     *\n     * @return {string} A string representation of this {@link Model} instance.\n     */\n    toString() {\n        const ThisModel = this.getClass();\n        const className = ThisModel.modelName;\n        const fieldNames = Object.keys(ThisModel.fields);\n        const fields = fieldNames.map((fieldName) => {\n            const field = ThisModel.fields[fieldName];\n            if (field instanceof ManyToMany) {\n                const ids = this[fieldName].toModelArray().map(\n                    model => model.getId()\n                );\n                return `${fieldName}: [${ids.join(', ')}]`;\n            }\n            const val = this._fields[fieldName];\n            return `${fieldName}: ${val}`;\n        }).join(', ');\n        return `${className}: {${fields}}`;\n    }\n\n    /**\n     * Returns a boolean indicating if `otherModel` equals this {@link Model} instance.\n     * Equality is determined by shallow comparing their attributes.\n     *\n     * This equality is used when you call {@link Model#update}.\n     * You can prevent model updates by returning `true` here.\n     * However, a model will always be updated if its relationships are changed.\n     *\n     * @param  {Model} otherModel - a {@link Model} instance to compare\n     * @return {Boolean} a boolean indicating if the {@link Model} instance's are equal.\n     */\n    equals(otherModel) {\n        // eslint-disable-next-line no-underscore-dangle\n        return objectShallowEquals(this._fields, otherModel._fields);\n    }\n\n    /**\n     * Updates a property name to given value for this {@link Model} instance.\n     * The values are immediately committed to the database.\n     *\n     * @param {string} propertyName - name of the property to set\n     * @param {*} value - value assigned to the property\n     * @return {undefined}\n     */\n    set(propertyName, value) {\n        this.update({\n            [propertyName]: value,\n        });\n    }\n\n    /**\n     * Assigns multiple fields and corresponding values to this {@link Model} instance.\n     * The updates are immediately committed to the database.\n     *\n     * @param  {Object} userMergeObj - an object that will be merged with this instance.\n     * @return {undefined}\n     */\n    update(userMergeObj) {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === 'undefined') {\n            throw new Error([\n                `Tried to update a ${ThisModel.modelName} model instance without a session. `,\n                'You cannot call `.update` on an instance that you did not receive from the database.',\n            ].join(''));\n        }\n\n        const mergeObj = { ...userMergeObj };\n\n        const { fields, virtualFields } = ThisModel;\n\n        const m2mRelations = {};\n\n        // If an array of entities or id's is supplied for a\n        // many-to-many related field, clear the old relations\n        // and add the new ones.\n        for (const mergeKey in mergeObj) { // eslint-disable-line no-restricted-syntax, guard-for-in\n            const isRealField = fields.hasOwnProperty(mergeKey);\n\n            if (isRealField) {\n                const field = fields[mergeKey];\n\n                if (field instanceof ForeignKey || field instanceof OneToOne) {\n                    // update one-one/fk relations\n                    mergeObj[mergeKey] = normalizeEntity(mergeObj[mergeKey]);\n                } else if (field instanceof ManyToMany) {\n                    // field is forward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n                    delete mergeObj[mergeKey];\n                }\n            } else if (virtualFields.hasOwnProperty(mergeKey)) {\n                const field = virtualFields[mergeKey];\n                if (field instanceof ManyToMany) {\n                    // field is backward relation\n                    m2mRelations[mergeKey] = mergeObj[mergeKey];\n                    delete mergeObj[mergeKey];\n                }\n            }\n        }\n\n        const mergedFields = {\n            ...this._fields,\n            ...mergeObj,\n        };\n\n        const updatedModel = new ThisModel(this._fields);\n        updatedModel._initFields(mergedFields); // eslint-disable-line no-underscore-dangle\n\n        // determine if model would have different related models after update\n        updatedModel._refreshMany2Many(m2mRelations); // eslint-disable-line no-underscore-dangle\n        const relationsEqual = Object.keys(m2mRelations).every(name => !arrayDiffActions(this[name], updatedModel[name])\n        );\n        const fieldsEqual = this.equals(updatedModel);\n\n        // only update fields if they have changed (referentially)\n        if (!fieldsEqual) {\n            this._initFields(mergedFields);\n        }\n\n        // only update many-to-many relationships if any reference has changed\n        if (!relationsEqual) {\n            this._refreshMany2Many(m2mRelations);\n        }\n\n        // only apply the update if a field or relationship has changed\n        if (!fieldsEqual || !relationsEqual) {\n            ThisModel.session.applyUpdate({\n                action: UPDATE,\n                query: getByIdQuery(this),\n                payload: mergeObj,\n            });\n        }\n    }\n\n    /**\n     * Updates {@link Model} instance attributes to reflect the\n     * database state in the current session.\n     * @return {undefined}\n     */\n    refreshFromState() {\n        this._initFields(this.ref);\n    }\n\n    /**\n     * Deletes the record for this {@link Model} instance.\n     * You'll still be able to access fields and values on the instance.\n     *\n     * @return {undefined}\n     */\n    delete() {\n        const ThisModel = this.getClass();\n        if (typeof ThisModel.session === 'undefined') {\n            throw new Error([\n                `Tried to delete a ${ThisModel.modelName} model instance without a session. `,\n                'You cannot call `.delete` on an instance that you did not receive from the database.',\n            ].join(''));\n        }\n\n        this._onDelete();\n        ThisModel.session.applyUpdate({\n            action: DELETE,\n            query: getByIdQuery(this),\n        });\n    }\n\n    /**\n     * Update many-many relations for model.\n     * @param relations\n     * @return undefined\n     * @private\n     */\n    _refreshMany2Many(relations) {\n        const ThisModel = this.getClass();\n        const { fields, virtualFields, modelName } = ThisModel;\n\n        Object.keys(relations).forEach((name) => {\n            const reverse = !fields.hasOwnProperty(name);\n            const field = virtualFields[name];\n            const values = relations[name];\n\n            if (!Array.isArray(values)) {\n                throw new TypeError(`Failed to resolve many-to-many relationship: ${modelName}[${name}] must be an array (passed: ${values})`);\n            }\n\n            const normalizedNewIds = values.map(normalizeEntity);\n            const uniqueIds = [...new Set(normalizedNewIds)];\n\n            if (normalizedNewIds.length !== uniqueIds.length) {\n                throw new Error(`Found duplicate id(s) when passing \"${normalizedNewIds}\" to ${ThisModel.modelName}.${name} value`);\n            }\n\n            const throughModelName = field.through || m2mName(ThisModel.modelName, name);\n            const ThroughModel = ThisModel.session[throughModelName];\n\n            let fromField;\n            let toField;\n\n            if (!reverse) {\n                ({ from: fromField, to: toField } = field.throughFields);\n            } else {\n                ({ from: toField, to: fromField } = field.throughFields);\n            }\n\n            const currentIds = ThroughModel.filter(through => through[fromField] === this[ThisModel.idAttribute]\n            ).toRefArray().map(ref => ref[toField]);\n\n            const diffActions = arrayDiffActions(currentIds, normalizedNewIds);\n\n            if (diffActions) {\n                const {\n                    delete: idsToDelete,\n                    add: idsToAdd,\n                } = diffActions;\n                if (idsToDelete.length > 0) {\n                    this[name].remove(...idsToDelete);\n                }\n                if (idsToAdd.length > 0) {\n                    this[name].add(...idsToAdd);\n                }\n            }\n        });\n    }\n\n    /**\n     * @return {undefined}\n     * @private\n     */\n    _onDelete() {\n        const { virtualFields } = this.getClass();\n        for (const key in virtualFields) { // eslint-disable-line\n            const field = virtualFields[key];\n            if (field instanceof ManyToMany) {\n                // Delete any many-to-many rows the entity is included in.\n                this[key].clear();\n            } else if (field instanceof ForeignKey) {\n                const relatedQs = this[key];\n                if (relatedQs.exists()) {\n                    relatedQs.update({ [field.relatedName]: null });\n                }\n            } else if (field instanceof OneToOne) {\n                // Set null to any foreign keys or one to ones pointed to\n                // this instance.\n                if (this[key] !== null) {\n                    this[key][field.relatedName] = null;\n                }\n            }\n        }\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * Returns a boolean indicating if an entity\n     * with the id `id` exists in the state.\n     *\n     * @param  {*}  id - a value corresponding to the id attribute of the {@link Model} class.\n     * @return {Boolean} a boolean indicating if entity with `id` exists in the state\n     * @deprecated Please use {@link Model.idExists} instead.\n     */\n    static hasId(id) {\n        console.warn('`Model.hasId` has been deprecated. Please use `Model.idExists` instead.');\n        return this.idExists(id);\n    }\n\n    /**\n     * @deprecated See the 0.9 migration guide on the GitHub repo.\n     * @throws {Error} Due to deprecation.\n     */\n    getNextState() {\n        throw new Error(\n            '`Model.prototype.getNextState` has been removed. See the 0.9 ' +\n            'migration guide on the GitHub repo.'\n        );\n    }\n};\n\nModel.fields = {\n    id: attr(),\n};\nModel.virtualFields = {};\nModel.querySetClass = QuerySet;\n\nexport default Model;\n","import reject from 'lodash/reject';\nimport filter from 'lodash/filter';\nimport orderBy from 'lodash/orderBy';\nimport sortBy from 'lodash/sortBy';\nimport ops from 'immutable-ops';\n\nimport {\n    FILTER, EXCLUDE, ORDER_BY,\n} from '../constants';\nimport { clauseFiltersByAttribute, clauseReducesResultSetSize } from '../utils';\n\nconst DEFAULT_TABLE_OPTIONS = {\n    idAttribute: 'id',\n    arrName: 'items',\n    mapName: 'itemsById',\n    fields: {},\n};\n\n// Input is the current max id and the new id passed to the create action.\n// Both may be undefined. The current max id in the case that this is the first Model\n// being created, and the new id if the id was not explicitly passed to the\n// database.\n//\n// Return value is the new max id and the id to use to create the new row.\n// If the id's are strings, the id must be passed explicitly every time.\n// In this case, the current max id will remain `NaN` due to `Math.max`, but that's fine.\nfunction idSequencer(_currMax, userPassedId) {\n    let currMax = _currMax;\n    let newMax;\n    let newId;\n\n    if (currMax === undefined) {\n        currMax = -1;\n    }\n\n    if (userPassedId === undefined) {\n        newMax = currMax + 1;\n        newId = newMax;\n    } else {\n        newMax = Math.max(currMax + 1, userPassedId);\n        newId = userPassedId;\n    }\n\n    return [\n        newMax, // new max id\n        newId, // id to use for row creation\n    ];\n}\n\n/**\n * Handles the underlying data structure for a {@link Model} class.\n */\nconst Table = class Table {\n    /**\n     * Creates a new {@link Table} instance.\n     * @param  {Object} userOpts - options to use.\n     * @param  {string} [userOpts.idAttribute=id] - the id attribute of the entity.\n     * @param  {string} [userOpts.arrName=items] - the state attribute where an array of\n     *                                             entity id's are stored\n     * @param  {string} [userOpts.mapName=itemsById] - the state attribute where the entity objects\n     *                                                 are stored in a id to entity object\n     *                                                 map.\n     * @param  {string} [userOpts.fields={}] - mapping of field key to {@link Field} object\n     */\n    constructor(userOpts) {\n        Object.assign(this, DEFAULT_TABLE_OPTIONS, userOpts);\n    }\n\n    /**\n     * Returns a reference to the object at index `id`\n     * in state `branch`.\n     *\n     * @param  {Object} branch - the state\n     * @param  {Number} id - the id of the object to get\n     * @return {Object|undefined} A reference to the raw object in the state or\n     *                            `undefined` if not found.\n     */\n    accessId(branch, id) {\n        return branch[this.mapName][id];\n    }\n\n    accessIds(branch, ids) {\n        const map = branch[this.mapName];\n        return ids.map(id => map[id]);\n    }\n\n    idExists(branch, id) {\n        return branch[this.mapName].hasOwnProperty(id);\n    }\n\n    accessIdList(branch) {\n        return branch[this.arrName];\n    }\n\n    accessList(branch) {\n        return this.accessIds(branch, this.accessIdList(branch));\n    }\n\n    getMaxId(branch) {\n        return this.getMeta(branch, 'maxId');\n    }\n\n    setMaxId(tx, branch, newMaxId) {\n        return this.setMeta(tx, branch, 'maxId', newMaxId);\n    }\n\n    nextId(id) {\n        return id + 1;\n    }\n\n    /**\n     * Returns the default state for the data structure.\n     * @return {Object} The default state for this {@link ORM} instance's data structure\n     */\n    getEmptyState() {\n        const pkIndex = {\n            [this.arrName]: [],\n            [this.mapName]: {},\n        };\n        const attrIndexes = Object.keys(this.fields)\n            .filter(attr => attr !== this.idAttribute)\n            .filter(attr => this.fields[attr].index)\n            .reduce((indexes, attr) => ({\n                ...indexes,\n                [attr]: {},\n            }), {});\n        return {\n            ...pkIndex,\n            indexes: attrIndexes,\n            meta: {},\n        };\n    }\n\n    setMeta(tx, branch, key, value) {\n        const { batchToken, withMutations } = tx;\n        if (withMutations) {\n            const res = ops.mutable.setIn(['meta', key], value, branch);\n            return res;\n        }\n\n        return ops.batch.setIn(batchToken, ['meta', key], value, branch);\n    }\n\n    getMeta(branch, key) {\n        return branch.meta[key];\n    }\n\n    query(branch, clauses) {\n        if (clauses.length === 0) {\n            return this.accessList(branch);\n        }\n\n        const { idAttribute } = this;\n\n        const optimallyOrderedClauses = sortBy(clauses, (clause) => {\n            if (clauseFiltersByAttribute(clause, idAttribute)) {\n                return 1;\n            }\n\n            if (clauseReducesResultSetSize(clause)) {\n                return 2;\n            }\n\n            return 3;\n        });\n\n        const reducer = (rows, clause) => {\n            const { type, payload } = clause;\n            if (!rows) {\n                /**\n                 * First time this reducer is called during query.\n                 * This is where we apply query optimizations.\n                 */\n                if (clauseFiltersByAttribute(clause, idAttribute)) {\n                    /**\n                     * Payload specified a primary key. Use PK index\n                     * to look up the single row identified by the PK.\n                     */\n                    const id = payload[idAttribute];\n                    const remainingPayload = Object.keys(payload)\n                        .reduce((withoutPkAttr, filterAttr) => {\n                            if (filterAttr !== idAttribute) {\n                                withoutPkAttr[filterAttr] = payload[filterAttr];\n                            }\n                            return withoutPkAttr;\n                        }, {});\n                    const ids = this.idExists(branch, id) ? [id] : [];\n                    if (Object.keys(remainingPayload).length) {\n                        /**\n                         * Payload has additional, non-PK columns.\n                         * Filter accessed row by remaining payload (if one was found).\n                         */\n                        return reducer(this.accessIds(branch, ids), {\n                            ...clause,\n                            payload: remainingPayload,\n                        });\n                    }\n                    /**\n                     * No need to filter these rows any further.\n                     * The primary key value satisfies this clause's conditions.\n                     */\n                    return this.accessIds(branch, ids);\n                }\n                if (type === FILTER && typeof payload === 'object') {\n                    const indexes = Object.entries(branch.indexes);\n                    const accessedIndexes = [];\n                    const indexAttrs = [];\n                    indexes.forEach(([attr, index]) => {\n                        if (clauseFiltersByAttribute(clause, attr)) {\n                            /**\n                             * Payload specified an indexed attribute. Use index\n                             * to potentially decrease amount of accessed rows.\n                             */\n                            if (index.hasOwnProperty(payload[attr])) {\n                                accessedIndexes.push(index[payload[attr]]);\n                                indexAttrs.push(attr);\n                            }\n                        }\n                    });\n                    /**\n                     * Calculate set of unique PK values corresponding to each\n                     * foreign key's attribute value. Then retrieve all those rows.\n                     */\n                    if (accessedIndexes.length) {\n                        const lastIndex = accessedIndexes.pop();\n                        const indexedIds = accessedIndexes.reduce((result, index) => {\n                            const indexSet = new Set(index);\n                            return result.filter(Set.prototype.has, indexSet);\n                        }, lastIndex);\n                        const remainingPayload = Object.keys(payload)\n                            .reduce((withoutIndexAttrs, filterAttr) => {\n                                if (!indexAttrs.includes(filterAttr)) {\n                                    withoutIndexAttrs[filterAttr] = payload[filterAttr];\n                                }\n                                return withoutIndexAttrs;\n                            }, {});\n                        if (Object.keys(remainingPayload).length) {\n                            /**\n                             * Payload has additional, non-indexed columns.\n                             * Filter indexed rows by remaining payload (if any were found).\n                             */\n                            return reducer(this.accessIds(branch, indexedIds), {\n                                ...clause,\n                                payload: remainingPayload,\n                            });\n                        }\n                        /**\n                         * No need to filter these rows any further.\n                         * The used indexes satisfy this clause's conditions.\n                         */\n                        return this.accessIds(branch, indexedIds);\n                    }\n                }\n\n                // Give up optimization: Retrieve all rows (full table scan).\n                return reducer(this.accessList(branch), clause);\n            }\n\n            switch (type) {\n            case FILTER: {\n                return filter(rows, payload);\n            }\n            case EXCLUDE: {\n                return reject(rows, payload);\n            }\n            case ORDER_BY: {\n                const [iteratees, orders] = payload;\n                return orderBy(rows, iteratees, orders);\n            }\n            default:\n                return rows;\n            }\n        };\n\n        return optimallyOrderedClauses.reduce(reducer, undefined);\n    }\n\n    /**\n     * Returns the data structure including a new object `entry`\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object} entry - the object to insert\n     * @return {Object} an object with two keys: `state` and `created`.\n     *                  `state` is the new table state and `created` is the\n     *                  row that was created.\n     */\n    insert(tx, branch, entry) {\n        const { batchToken, withMutations } = tx;\n\n        const hasId = entry.hasOwnProperty(this.idAttribute);\n\n        let workingState = branch;\n\n        // This will not affect string id's.\n        const [newMaxId, id] = idSequencer(this.getMaxId(branch), entry[this.idAttribute]);\n        workingState = this.setMaxId(tx, branch, newMaxId);\n\n        const finalEntry = hasId\n            ? entry\n            : ops.batch.set(batchToken, this.idAttribute, id, entry);\n\n        const indexesToAppendTo = Object.keys(workingState.indexes).reduce((values, fkAttr) => {\n            if (!entry.hasOwnProperty(fkAttr)) return values;\n            if (entry[fkAttr] === null) return values;\n            values.push([fkAttr, entry[fkAttr]]);\n            return values;\n        }, []);\n\n\n        if (withMutations) {\n            ops.mutable.push(id, workingState[this.arrName]);\n            ops.mutable.set(id, finalEntry, workingState[this.mapName]);\n            // add id to indexes\n            indexesToAppendTo.forEach(([attr, value]) => {\n                const attrIndex = workingState.indexes[attr];\n                if (attrIndex.hasOwnProperty(value)) {\n                    ops.mutable.push(id, attrIndex[value]);\n                } else {\n                    ops.mutable.set(value, [id], attrIndex);\n                }\n            });\n            return {\n                state: workingState,\n                created: finalEntry,\n            };\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            indexesToAppendTo\n                .reduce((indexMap, [attr, value]) => {\n                    indexMap[attr] = ops.batch.merge(\n                        batchToken,\n                        {\n                            [value]: ops.batch.push(\n                                batchToken,\n                                id,\n                                indexMap[attr][value] || []\n                            ),\n                        },\n                        indexMap[attr]\n                    );\n                    return indexMap;\n                }, { ...workingState.indexes }),\n            workingState.indexes\n        );\n\n        const nextState = ops.batch.merge(batchToken, {\n            [this.arrName]: ops.batch.push(batchToken, id, workingState[this.arrName]),\n            [this.mapName]: ops.batch.merge(batchToken, {\n                [id]: finalEntry,\n            }, workingState[this.mapName]),\n            indexes: nextIndexes,\n        }, workingState);\n\n        return {\n            state: nextState,\n            created: finalEntry,\n        };\n    }\n\n    /**\n     * Returns the data structure with objects where `rows`\n     * are merged with `mergeObj`.\n     *\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @param  {Object} mergeObj - The object to merge with each row.\n     * @return {Object}\n     */\n    update(tx, branch, rows, mergeObj) {\n        const { batchToken, withMutations } = tx;\n\n        const mergeObjInto = (row) => {\n            const merge = withMutations ? ops.mutable.merge : ops.batch.merge(batchToken);\n            return merge(mergeObj, row);\n        };\n\n        const set = withMutations ? ops.mutable.set : ops.batch.set(batchToken);\n\n        const indexedAttrs = Object.keys(branch.indexes)\n            .filter(attr => mergeObj.hasOwnProperty(attr));\n        const indexIdsToAdd = [];\n        const indexIdsToDelete = [];\n\n        const nextMap = rows.reduce((map, row) => {\n            const prevAttrValues = indexedAttrs.reduce((valueMap, attr) => ({\n                ...valueMap,\n                [attr]: row[attr],\n            }), {});\n            const result = mergeObjInto(row);\n            const nextAttrValues = indexedAttrs.reduce((valueMap, attr) => ({\n                ...valueMap,\n                [attr]: result[attr],\n            }), {});\n            const id = result[this.idAttribute];\n            const nextRow = set(id, result, map);\n            indexedAttrs.forEach((attr) => {\n                const { [attr]: prevValue } = prevAttrValues;\n                const { [attr]: nextValue } = nextAttrValues;\n                if (prevValue === nextValue) {\n                    // attribute has not changed, no need to update any index\n                    return;\n                }\n                if (prevValue !== null) {\n                    // remove id from attribute's index for its old value\n                    indexIdsToDelete.push([attr, prevValue, id]);\n                }\n                if (nextValue !== null) {\n                    // add id to attribute's index for its new value\n                    indexIdsToAdd.push([attr, nextValue, id]);\n                }\n            });\n            return nextRow;\n        }, branch[this.mapName]);\n\n        let nextIndexes = branch.indexes;\n        if (withMutations) {\n            indexIdsToDelete.forEach(([attr, value, id]) => {\n                const arr = nextIndexes[attr][value];\n                const idx = arr.indexOf(id);\n                if (idx !== -1) {\n                    ops.mutable.splice(idx, 1, [], arr);\n                }\n            });\n            indexIdsToAdd.forEach(([attr, value, id]) => {\n                ops.mutable.push(id, nextIndexes[attr][value]);\n            });\n        } else {\n            if (indexIdsToAdd.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToAdd.reduce((indexMap, [attr, value, id]) => {\n                        indexMap[attr] = ops.batch.merge(\n                            batchToken,\n                            {\n                                [value]: ops.batch.push(\n                                    batchToken,\n                                    id,\n                                    indexMap[attr][value] || []\n                                ),\n                            },\n                            indexMap[attr]\n                        );\n                        return indexMap;\n                    }, { ...nextIndexes }),\n                    nextIndexes\n                );\n            }\n            if (indexIdsToDelete.length) {\n                nextIndexes = ops.batch.merge(\n                    batchToken,\n                    indexIdsToDelete.reduce((indexMap, [attr, value, id]) => {\n                        indexMap[attr] = ops.batch.merge(\n                            batchToken,\n                            {\n                                [value]: ops.batch.filter(\n                                    batchToken,\n                                    rowId => rowId !== id,\n                                    indexMap[attr][value] || []\n                                ),\n                            },\n                            indexMap[attr]\n                        );\n                        return indexMap;\n                    }, { ...nextIndexes }),\n                    nextIndexes\n                );\n            }\n        }\n\n        return ops.batch.merge(batchToken, {\n            [this.mapName]: nextMap,\n            indexes: nextIndexes,\n        }, branch);\n    }\n\n    /**\n     * Returns the data structure without rows `rows`.\n     * @param  {Object} tx - transaction info\n     * @param  {Object} branch - the data structure state\n     * @param  {Object[]} rows - rows to update\n     * @return {Object} the data structure without ids in `idsToDelete`.\n     */\n    delete(tx, branch, rows) {\n        const { batchToken, withMutations } = tx;\n\n        const { arrName, mapName } = this;\n        const arr = branch[arrName];\n\n        const idsToDelete = rows.map(row => row[this.idAttribute]);\n        if (withMutations) {\n            idsToDelete.forEach((id) => {\n                const idx = arr.indexOf(id);\n                if (idx !== -1) {\n                    ops.mutable.splice(idx, 1, [], arr);\n                }\n\n                ops.mutable.omit(id, branch[mapName]);\n            });\n            // delete ids from all indexes\n            Object.values(branch.indexes).forEach(attrIndex => (\n                Object.values(attrIndex).forEach(valueIndex => (\n                    idsToDelete.forEach((id) => {\n                        const idx = valueIndex.indexOf(id);\n                        if (idx !== -1) {\n                            ops.mutable.splice(idx, 1, [], valueIndex);\n                        }\n                    })\n                ))\n            ));\n            return branch;\n        }\n\n        const nextIndexes = ops.batch.merge(\n            batchToken,\n            Object.entries(branch.indexes).reduce((indexMap, [attr, attrIndex]) => {\n                indexMap[attr] = ops.batch.merge(\n                    batchToken,\n                    Object.entries(attrIndex).reduce((attrIndexMap, [value, valueIndex]) => {\n                        attrIndexMap[value] = ops.batch.filter(\n                            batchToken,\n                            id => !idsToDelete.includes(id),\n                            valueIndex\n                        );\n                        return attrIndexMap;\n                    }, { ...indexMap[attr] }),\n                    indexMap[attr]\n                );\n                return indexMap;\n            }, { ...branch.indexes }),\n            branch.indexes\n        );\n\n        return ops.batch.merge(batchToken, {\n            [arrName]: ops.batch.filter(\n                batchToken,\n                id => !idsToDelete.includes(id),\n                branch[arrName],\n            ),\n            [mapName]: ops.batch.omit(\n                batchToken,\n                idsToDelete,\n                branch[mapName],\n            ),\n            indexes: ops.batch.merge(\n                batchToken,\n                nextIndexes,\n                branch.indexes,\n            ),\n        }, branch);\n    }\n};\n\nexport default Table;\n","import ops from 'immutable-ops';\n\nimport {\n    CREATE, UPDATE, DELETE, SUCCESS,\n} from '../constants';\n\nimport Table from './Table';\n\n\nfunction replaceTableState(tableName, newTableState, tx, state) {\n    const { batchToken, withMutations } = tx;\n\n    if (withMutations) {\n        state[tableName] = newTableState;\n        return state;\n    }\n\n    return ops.batch.set(batchToken, tableName, newTableState, state);\n}\n\nfunction query(tables, querySpec, state) {\n    const { table: tableName, clauses } = querySpec;\n    const table = tables[tableName];\n    const rows = table.query(state[tableName], clauses);\n    return {\n        rows,\n    };\n}\n\nfunction update(tables, updateSpec, tx, state) {\n    const { action, payload } = updateSpec;\n\n    let tableName;\n    let nextTableState;\n    let resultPayload;\n\n    if (action === CREATE) {\n        ({ table: tableName } = updateSpec);\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n        const result = table.insert(tx, currTableState, payload);\n        nextTableState = result.state;\n        resultPayload = result.created;\n    } else {\n        const { query: querySpec } = updateSpec;\n        ({ table: tableName } = querySpec);\n        const { rows } = query(tables, querySpec, state);\n\n        const table = tables[tableName];\n        const currTableState = state[tableName];\n\n        if (action === UPDATE) {\n            nextTableState = table.update(tx, currTableState, rows, payload);\n            // return updated rows\n            resultPayload = query(tables, querySpec, state).rows;\n        } else if (action === DELETE) {\n            nextTableState = table.delete(tx, currTableState, rows);\n            // return original rows that we just deleted\n            resultPayload = rows;\n        } else {\n            throw new Error(`Database received unknown update type: ${action}`);\n        }\n    }\n\n    const nextDBState = replaceTableState(tableName, nextTableState, tx, state);\n    return {\n        status: SUCCESS,\n        state: nextDBState,\n        payload: resultPayload,\n    };\n}\n\n\nexport function createDatabase(schemaSpec) {\n    const { tables: tableSpecs } = schemaSpec;\n    const tables = Object.entries(tableSpecs)\n        .reduce((map, [tableName, tableSpec]) => ({\n            ...map,\n            [tableName]: new Table(tableSpec),\n        }), {});\n\n    const getEmptyState = () => (\n        Object.entries(tables)\n            .reduce((map, [tableName, table]) => ({\n                ...map,\n                [tableName]: table.getEmptyState(),\n            }), {})\n    );\n\n    return {\n        getEmptyState,\n        query: query.bind(null, tables),\n        update: update.bind(null, tables),\n        // Used to inspect the schema.\n        describe: tableName => tables[tableName],\n    };\n}\n\nexport default createDatabase;\n","const defaultEqualityCheck = (a, b) => a === b;\nexport const eqCheck = defaultEqualityCheck;\n\nconst argsAreEqual = (lastArgs, nextArgs, equalityCheck) => (\n    nextArgs.every((arg, index) => (\n        equalityCheck(arg, lastArgs[index])\n    ))\n);\n\nconst rowsAreEqual = (ids, rowsA, rowsB) => (\n    ids.every(id => rowsA[id] === rowsB[id])\n);\n\nconst accessedModelInstancesAreEqual = (previous, ormState, orm) => {\n    const {\n        accessedInstances,\n    } = previous;\n\n    return Object.entries(accessedInstances).every(([modelName, instances]) => {\n        // if the entire table has not been changed, we have nothing to do\n        if (previous.ormState[modelName] === ormState[modelName]) {\n            return true;\n        }\n\n        const { mapName } = orm.getDatabase().describe(modelName);\n\n        const { [mapName]: previousRows } = previous.ormState[modelName];\n        const { [mapName]: rows } = ormState[modelName];\n\n        const accessedIds = Object.keys(instances);\n        return rowsAreEqual(accessedIds, previousRows, rows);\n    });\n};\n\nconst accessedIndexesAreEqual = (previous, ormState) => {\n    const {\n        accessedIndexes,\n    } = previous;\n\n    return Object.entries(accessedIndexes).every(([modelName, indexes]) => (\n        Object.entries(indexes).every(([column, values]) => (\n            values.every(value => (\n                previous.ormState[modelName].indexes[column][value]\n                    === ormState[modelName].indexes[column][value]\n            ))\n        ))\n    ));\n};\n\nconst fullTableScannedModelsAreEqual = (previous, ormState) => (\n    previous.fullTableScannedModels.every(modelName => (\n        previous.ormState[modelName]\n            === ormState[modelName]\n    ))\n);\n\n/**\n * A memoizer to use with redux-orm\n * selectors. When the memoized function is first run,\n * the memoizer will remember the models that are accessed\n * during that function run.\n *\n * On subsequent runs, the memoizer will check if those\n * models' states have changed compared to the previous run.\n *\n * Memoization algorithm operates like this:\n *\n * 1. Has the selector been run before? If not, go to 6.\n *\n * 2. If the selector has other input selectors in addition to the\n *    ORM state selector, check their results for equality with the previous results.\n *    If they aren't equal, go to 6.\n *\n * 3. Some filter queries may have required scanning entire tables during the last run.\n *    If any of those tables have changed, go to 6.\n *\n * 4. Check which foreign key indexes the database has used to speed up queries\n *    during the last run. If any have changed, go to 6.\n *\n * 5. Check which Model's instances the selector has accessed during the last run.\n *    Check for equality with each of those states versus their states in the\n *    previous ORM state. If all of them are equal, return the previous result.\n *\n * 6. Run the selector. Check the Session object used by the selector for\n *    which Model's states were accessed, and merge them with the previously\n *    saved information about accessed models (if-else branching can change\n *    which models are accessed on different inputs). Save the ORM state and\n *    other arguments the selector was called with, overriding previously\n *    saved values. Save the selector result. Return the selector result.\n *\n * @private\n * @param  {Function} func - function to memoize\n * @param  {Function} argEqualityCheck - equality check function to use with normal\n *                                       selector args\n * @param  {ORM} orm - a redux-orm ORM instance\n * @return {Function} `func` memoized.\n */\nexport function memoize(func, argEqualityCheck = defaultEqualityCheck, orm) {\n    let previous = {\n        /* Result of the previous function call */\n        result: null,\n        /* Arguments to the previous function call (excluding ORM state) */\n        args: null,\n        /**\n         * Snapshot of the previous database.\n         *\n         * Lets us know how the tables looked like\n         * during the previous function call.\n         */\n        ormState: null,\n        /**\n         * Names of models whose tables have been scanned completely\n         * during previous function call (contains only model names)\n         * Format example: ['Book']\n         */\n        fullTableScannedModels: [],\n        /**\n         * Map of which model instances have been accessed\n         * during previous function call.\n         * Contains only PKs of accessed instances.\n         * Format example: { Book: { 1: true, 3: true } }\n         */\n        accessedInstances: {},\n        /**\n         * Map of which attribute indexes have been accessed\n         * during previous function call.\n         * Contains only attributes that were actually filtered on.\n         * Author.withId(3).books would add 3 to the authorId index below.\n         * Format example: { Book: { authorId: [1, 2], publisherId: [5] } }\n         */\n        accessedIndexes: {},\n    };\n\n    return (...stateAndArgs) => {\n        /**\n         * The first argument to this function needs to be\n         * the ORM's reducer state in the user's Redux store.\n         */\n        const [ormState, ...args] = stateAndArgs;\n\n        const selectorWasCalledBefore = (\n            previous.args &&\n            previous.ormState\n        );\n\n        if (\n            selectorWasCalledBefore &&\n            argsAreEqual(previous.args, args, argEqualityCheck) &&\n            fullTableScannedModelsAreEqual(previous, ormState) &&\n            accessedIndexesAreEqual(previous, ormState) &&\n            accessedModelInstancesAreEqual(previous, ormState, orm)\n        ) {\n            /**\n             * None of this selector's dependencies have changed\n             * since the last time that we called it.\n             */\n            return previous.result;\n        }\n\n        /**\n         * Start a session so that the selector can access the database.\n         * Make this session immutable. This way we can find out if\n         * the operations that the selector performs are cacheable.\n         */\n        const session = orm.session(ormState);\n\n        /* This is where we call the actual function */\n        const result = func(...[session, ...args]);\n\n        /**\n         * The metadata for the previous call are no longer valid.\n         * Update cached values.\n         */\n        previous = {\n            /* Arguments that were passed to the selector */\n            args,\n            /* Selector result */\n            result,\n            /* Redux state slice for session.state */\n            ormState,\n            /* Rows retrieved by resolved primary key */\n            accessedInstances: session.accessedModelInstances,\n            /* Foreign key indexes that were used to speed up queries */\n            accessedIndexes: session.accessedIndexes,\n            /* Tables that had to be scanned completely */\n            fullTableScannedModels: session.fullTableScannedModels,\n        };\n\n        return result;\n    };\n}\n","import { createSelectorCreator } from 'reselect';\n\nimport { memoize } from './memoize';\n\n/**\n * @module redux\n */\n\n/**\n * Calls all models' reducers if they exist.\n * @return {undefined}\n */\nexport function defaultUpdater(session, action) {\n    session.sessionBoundModels.forEach((modelClass) => {\n        if (typeof modelClass.reducer === 'function') {\n            // This calls this.applyUpdate to update this.state\n            modelClass.reducer(action, modelClass, session);\n        }\n    });\n}\n\n\n/**\n * Call the returned function to pass actions to Redux-ORM.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance.\n * @param {Function} [updater] - the function updating the ORM state based on the given action.\n * @return {Function} reducer that will update the ORM state.\n */\nexport function createReducer(orm, updater = defaultUpdater) {\n    return (state, action) => {\n        const session = orm.session(state || orm.getEmptyState());\n        updater(session, action);\n        return session.state;\n    };\n}\n\n\n/**\n * Returns a memoized selector based on passed arguments.\n * This is similar to `reselect`'s `createSelector`,\n * except you can also pass a single function to be memoized.\n *\n * If you pass multiple functions, the format will be the\n * same as in `reselect`. The last argument is the selector\n * function and the previous are input selectors.\n *\n * When you use this method to create a selector, the returned selector\n * expects the whole `redux-orm` state branch as input. In the selector\n * function that you pass as the last argument, you will receive a\n * `session` argument (a `Session` instance) followed by any\n * input arguments, like in `reselect`.\n *\n * This is an example selector:\n *\n * ```javascript\n * // orm is an instance of ORM\n * const bookSelector = createSelector(orm, session => {\n *     return session.Book.map(book => {\n *         return Object.assign({}, book.ref, {\n *             authors: book.authors.map(author => author.name),\n *             genres: book.genres.map(genre => genre.name),\n *         });\n *     });\n * });\n * ```\n *\n * redux-orm uses a special memoization function to avoid recomputations.\n *\n * Everytime a selector runs, this function records which instances\n * of your `Model`s were accessed.<br>\n * On subsequent runs, the selector first checks if the previously\n * accessed instances or `args` have changed in any way:\n * <ul>\n *     <li>If yes, the selector calls the function you passed to it.</li>\n *     <li>If not, it just returns the previous result\n *         (unless you call it for the first time).</li>\n * </ul>\n *\n * This way you can use the `PureRenderMixin` in your React components\n * for performance gains.\n *\n * @global\n *\n * @param {ORM} orm - the ORM instance\n * @param  {...Function} args - zero or more input selectors\n *                              and the selector function.\n * @return {Function} memoized selector\n */\nexport function createSelector(orm, ...args) {\n    if (args.length === 1) {\n        return memoize(args[0], undefined, orm);\n    }\n\n    return createSelectorCreator(memoize, undefined, orm)(...args);\n}\n","import Session from './Session';\nimport Model from './Model';\nimport { createDatabase as defaultCreateDatabase } from './db';\nimport {\n    ForeignKey,\n    ManyToMany,\n    attr,\n} from './fields';\n\nimport {\n    createReducer,\n    createSelector,\n} from './redux';\n\nimport {\n    m2mName,\n    attachQuerySetMethods,\n    m2mToFieldName,\n    m2mFromFieldName,\n    warnDeprecated,\n} from './utils';\n\nconst ORM_DEFAULTS = {\n    createDatabase: defaultCreateDatabase,\n};\n\nconst RESERVED_TABLE_OPTIONS = [\n    'indexes',\n    'meta',\n];\nconst isReservedTableOption = word => RESERVED_TABLE_OPTIONS.includes(word);\n\n/**\n * ORM - the Object Relational Mapper.\n *\n * Use instances of this class to:\n *\n * - Register your {@link Model} classes using {@link ORM#register}\n * - Get the empty state for the underlying database with {@link ORM#getEmptyState}\n * - Start an immutable database session with {@link ORM#session}\n * - Start a mutating database session with {@link ORM#mutableSession}\n *\n * Internally, this class handles generating a schema specification from models\n * to the database.\n */\nexport class ORM {\n    /**\n     * Creates a new ORM instance.\n     */\n    constructor(opts) {\n        const { createDatabase } = Object.assign({}, ORM_DEFAULTS, (opts || {}));\n        this.createDatabase = createDatabase;\n        this.registry = [];\n        this.implicitThroughModels = [];\n        this.installedFields = {};\n    }\n\n    /**\n     * Registers a {@link Model} class to the ORM.\n     *\n     * If the model has declared any ManyToMany fields, their\n     * through models will be generated and registered with\n     * this call, unless a custom through model has been specified.\n     *\n     * @param  {...Model} model - a {@link Model} class to register\n     * @return {undefined}\n     */\n    register(...models) {\n        models.forEach((model) => {\n            if (model.modelName === undefined) {\n                throw new Error('A model was passed that doesn\\'t have a modelName set');\n            }\n\n            model.invalidateClassCache();\n\n            this.registerManyToManyModelsFor(model);\n            this.registry.push(model);\n        });\n    }\n\n    registerManyToManyModelsFor(model) {\n        const { fields } = model;\n        const thisModelName = model.modelName;\n\n        Object.entries(fields).forEach(([fieldName, fieldInstance]) => {\n            if (!(fieldInstance instanceof ManyToMany)) {\n                return;\n            }\n\n            let toModelName;\n            if (fieldInstance.toModelName === 'this') {\n                toModelName = thisModelName;\n            } else {\n                toModelName = fieldInstance.toModelName; // eslint-disable-line prefer-destructuring\n            }\n\n            const selfReferencing = thisModelName === toModelName;\n            const fromFieldName = m2mFromFieldName(thisModelName);\n            const toFieldName = m2mToFieldName(toModelName);\n\n            if (fieldInstance.through) {\n                if (selfReferencing && !fieldInstance.throughFields) {\n                    throw new Error(\n                        'Self-referencing many-to-many relationship at ' +\n                        `\"${thisModelName}.${fieldName}\" using custom ` +\n                        `model \"${fieldInstance.through}\" has no ` +\n                        'throughFields key. Cannot determine which ' +\n                        'fields reference the instances partaking ' +\n                        'in the relationship.'\n                    );\n                }\n            } else {\n                const Through = class ThroughModel extends Model {};\n\n                Through.modelName = m2mName(thisModelName, fieldName);\n\n                const PlainForeignKey = class ThroughForeignKeyField extends ForeignKey {\n                    get installsBackwardsVirtualField() {\n                        return false;\n                    }\n\n                    get installsBackwardsDescriptor() {\n                        return false;\n                    }\n                };\n                const ForeignKeyClass = selfReferencing\n                    ? PlainForeignKey\n                    : ForeignKey;\n                Through.fields = {\n                    id: attr(),\n                    [fromFieldName]: new ForeignKeyClass(thisModelName),\n                    [toFieldName]: new ForeignKeyClass(toModelName),\n                };\n\n                Through.invalidateClassCache();\n                this.implicitThroughModels.push(Through);\n            }\n        });\n    }\n\n    /**\n     * Gets a {@link Model} class by its name from the registry.\n     * @param  {string} modelName - the name of the {@link Model} class to get\n     * @throws If {@link Model} class is not found.\n     * @return {Model} the {@link Model} class, if found\n     */\n    get(modelName) {\n        const allModels = this.registry.concat(this.implicitThroughModels);\n        const found = Object.values(allModels).find(\n            model => model.modelName === modelName\n        );\n\n        if (typeof found === 'undefined') {\n            throw new Error(`Did not find model ${modelName} from registry.`);\n        }\n        return found;\n    }\n\n    getModelClasses() {\n        this._setupModelPrototypes(this.registry);\n        this._setupModelPrototypes(this.implicitThroughModels);\n        return this.registry.concat(this.implicitThroughModels);\n    }\n\n    generateSchemaSpec() {\n        const models = this.getModelClasses();\n        const tables = models.reduce((spec, modelClass) => {\n            const tableName = modelClass.modelName;\n            const tableSpec = modelClass._getTableOpts(); // eslint-disable-line no-underscore-dangle\n            Object.keys(tableSpec).forEach((key) => {\n                if (!isReservedTableOption(key)) return;\n                throw new Error(`Reserved keyword \\`${key}\\` used in ${tableName}.options.`);\n            });\n            spec[tableName] = Object.assign({}, { fields: modelClass.fields }, tableSpec);\n            return spec;\n        }, {});\n        return { tables };\n    }\n\n    getDatabase() {\n        if (!this.db) {\n            this.db = this.createDatabase(this.generateSchemaSpec());\n        }\n        return this.db;\n    }\n\n    /**\n     * Returns the empty database state.\n     * @return {Object} the empty state\n     */\n    getEmptyState() {\n        return this.getDatabase().getEmptyState();\n    }\n\n    /**\n     * Begins an immutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    session(state) {\n        return new Session(this, this.getDatabase(), state);\n    }\n\n    /**\n     * Begins a mutable database session.\n     *\n     * @param  {Object} state  - the state the database manages\n     * @return {Session} a new {@link Session} instance\n     */\n    mutableSession(state) {\n        return new Session(this, this.getDatabase(), state, true);\n    }\n\n    /**\n     * @private\n     */\n    _setupModelPrototypes(models) {\n        models.forEach((model) => {\n            if (!model.isSetUp) {\n                const { fields, modelName, querySetClass } = model;\n                Object.entries(fields).forEach(([fieldName, field]) => {\n                    if (!this._isFieldInstalled(modelName, fieldName)) {\n                        this._installField(field, fieldName, model);\n                        this._setFieldInstalled(modelName, fieldName);\n                    }\n                });\n                attachQuerySetMethods(model, querySetClass);\n                model.isSetUp = true;\n            }\n        });\n    }\n\n    /**\n     * @private\n     */\n    _isFieldInstalled(modelName, fieldName) {\n        return this.installedFields.hasOwnProperty(modelName)\n            ? !!this.installedFields[modelName][fieldName]\n            : false;\n    }\n\n    /**\n     * @private\n     */\n    _setFieldInstalled(modelName, fieldName) {\n        if (!this.installedFields.hasOwnProperty(modelName)) {\n            this.installedFields[modelName] = {};\n        }\n        this.installedFields[modelName][fieldName] = true;\n    }\n\n    /**\n     * Installs a field on a model and its related models if necessary.\n     * @private\n     */\n    _installField(field, fieldName, model) {\n        const FieldInstaller = field.installerClass;\n        (new FieldInstaller({\n            field,\n            fieldName,\n            model,\n            orm: this,\n        })).run();\n    }\n\n    // DEPRECATED AND REMOVED METHODS\n\n    /**\n     * @deprecated Use {@link ORM#mutableSession} instead.\n     */\n    withMutations(state) {\n        warnDeprecated(\n            '`ORM.prototype.withMutations` has been deprecated. ' +\n            'Use `ORM.prototype.mutableSession` instead.'\n        );\n        return this.mutableSession(state);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#session} instead.\n     */\n    from(state) {\n        warnDeprecated(\n            '`ORM.prototype.from` has been deprecated. ' +\n            'Use `ORM.prototype.session` instead.'\n        );\n        return this.session(state);\n    }\n\n    /**\n     * @deprecated Access {@link Session#state} instead.\n     */\n    reducer() {\n        warnDeprecated(\n            '`ORM.prototype.reducer` has been deprecated. Access ' +\n            'the `Session.prototype.state` property instead.'\n        );\n        return createReducer(this);\n    }\n\n    /**\n     * @deprecated Use `import { createSelector } from \"redux-orm\"` instead.\n     */\n    createSelector(...args) {\n        warnDeprecated(\n            '`ORM.prototype.createSelector` has been deprecated. ' +\n            'Import `createSelector` from Redux-ORM instead.'\n        );\n        return createSelector(this, ...args);\n    }\n\n    /**\n     * @deprecated Use {@link ORM#getEmptyState} instead.\n     */\n    getDefaultState() {\n        warnDeprecated(\n            '`ORM.prototype.getDefaultState` has been deprecated. Use ' +\n            '`ORM.prototype.getEmptyState` instead.'\n        );\n        return this.getEmptyState();\n    }\n\n    /**\n     * @deprecated Define a Model class instead.\n     */\n    define() {\n        throw new Error(\n            '`ORM.prototype.define` has been removed. Please define a Model class.'\n        );\n    }\n}\n\nexport function DeprecatedSchema() {\n    throw new Error(\n        'Schema has been renamed to ORM. Please import ORM instead of Schema ' +\n        'from Redux-ORM.'\n    );\n}\n\nexport default ORM;\n","import QuerySet from './QuerySet';\nimport Model from './Model';\nimport { DeprecatedSchema, ORM } from './ORM';\nimport Session from './Session';\nimport {\n    createReducer,\n    createSelector,\n} from './redux';\nimport {\n    ForeignKey,\n    ManyToMany,\n    OneToOne,\n    fk,\n    many,\n    oneToOne,\n    attr,\n    Attribute,\n} from './fields';\n\nconst Schema = DeprecatedSchema;\n\nconst Backend = function RemovedBackend() {\n    throw new Error(\n        'Having a custom Backend instance is now unsupported. ' +\n        'Documentation for database customization is upcoming, for now ' +\n        'please look at the db folder in the source.'\n    );\n};\n\nexport {\n    Attribute,\n    QuerySet,\n    Model,\n    ORM,\n    Schema,\n    Backend,\n    Session,\n    ForeignKey,\n    ManyToMany,\n    OneToOne,\n    fk,\n    many,\n    attr,\n    oneToOne,\n    createReducer,\n    createSelector,\n};\n\nexport default Model;\n"],"sourceRoot":""}